"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.borderStyle = void 0;

var _styledComponents = require("styled-components");

var _colors = require("./colors");

var _mixins = require("./mixins");

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n        border: ", ";\n      "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n      border-top: ", ";\n      border-bottom: ", ";\n    "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n      border-left: ", ";\n      border-right: ", ";\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["border-inline-", ": ", ";"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var borderStyle = function borderStyle(data, responsive, theme) {
  var styles = [];
  var color = (0, _colors.normalizeColor)(data.color || 'border', theme);
  var borderSize = data.size || 'xsmall';
  var style = data.style || 'solid';
  var side = typeof data === 'string' ? data : data.side || 'all';
  var value = "".concat(style, " ").concat(theme.global.borderSize[borderSize] || borderSize, " ").concat(color);
  var breakpoint = theme.box.responsiveBreakpoint && theme.global.breakpoints[theme.box.responsiveBreakpoint];
  var responsiveValue = responsive && breakpoint && (breakpoint.borderSize[borderSize] || borderSize) && "".concat(style, " ").concat(breakpoint.borderSize[borderSize] || borderSize, " ").concat(color);

  if (side === 'top' || side === 'bottom' || side === 'left' || side === 'right') {
    styles.push("border-".concat(side, ": ").concat(value, ";"));

    if (responsiveValue) {
      styles.push((0, _mixins.breakpointStyle)(breakpoint, "\n        border-".concat(side, ": ").concat(responsiveValue, ";\n      ")));
    }
  } else if (side === 'end' || side === 'start') {
    styles.push((0, _styledComponents.css)(_templateObject(), side, value));

    if (responsiveValue) {
      styles.push((0, _mixins.breakpointStyle)(breakpoint, "\n        border-inline-".concat(side, ": ").concat(responsiveValue, ";\n      ")));
    }
  } else if (side === 'vertical') {
    styles.push((0, _styledComponents.css)(_templateObject2(), value, value));

    if (responsiveValue) {
      styles.push((0, _mixins.breakpointStyle)(breakpoint, "\n        border-left: ".concat(responsiveValue, ";\n        border-right: ").concat(responsiveValue, ";\n      ")));
    }
  } else if (side === 'horizontal') {
    styles.push((0, _styledComponents.css)(_templateObject3(), value, value));

    if (responsiveValue) {
      styles.push((0, _mixins.breakpointStyle)(breakpoint, "\n        border-top: ".concat(responsiveValue, ";\n        border-bottom: ").concat(responsiveValue, ";\n      ")));
    }
  } else if (side === 'between') {// no-op
  } else {
    styles.push((0, _styledComponents.css)(_templateObject4(), value));

    if (responsiveValue) {
      styles.push((0, _mixins.breakpointStyle)(breakpoint, "border: ".concat(responsiveValue, ";")));
    }
  }

  return styles;
};

exports.borderStyle = borderStyle;

//# sourceMappingURL=border.js.map