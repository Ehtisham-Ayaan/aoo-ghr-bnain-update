[{"F:\\Aoo-Ghr-Bnain-Client\\src\\index.js":"1","F:\\Aoo-Ghr-Bnain-Client\\src\\reportWebVitals.js":"2","F:\\Aoo-Ghr-Bnain-Client\\src\\App.js":"3","F:\\Aoo-Ghr-Bnain-Client\\src\\home.jsx":"4","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\notfound.js":"5","F:\\Aoo-Ghr-Bnain-Client\\src\\auth\\signup.js":"6","F:\\Aoo-Ghr-Bnain-Client\\src\\auth\\login.js":"7","F:\\Aoo-Ghr-Bnain-Client\\src\\postForm.js":"8","F:\\Aoo-Ghr-Bnain-Client\\src\\contact.js":"9","F:\\Aoo-Ghr-Bnain-Client\\src\\submitted.js":"10","F:\\Aoo-Ghr-Bnain-Client\\src\\About.js":"11","F:\\Aoo-Ghr-Bnain-Client\\src\\sketch.js":"12","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\responsive.js":"13","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\nav.js":"14","F:\\Aoo-Ghr-Bnain-Client\\src\\auth\\addByAdmin.js":"15","F:\\Aoo-Ghr-Bnain-Client\\src\\admin\\Dashboard.js":"16","F:\\Aoo-Ghr-Bnain-Client\\src\\users\\userDashboard.js":"17","F:\\Aoo-Ghr-Bnain-Client\\src\\services\\payment.js":"18","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\footer.jsx":"19","F:\\Aoo-Ghr-Bnain-Client\\src\\services\\UserServices.js":"20","F:\\Aoo-Ghr-Bnain-Client\\src\\components\\PaymentForm.js":"21","F:\\Aoo-Ghr-Bnain-Client\\src\\services\\GenericServices.js":"22","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\toggleDrawer.js":"23","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\isWithinElement.js":"24","F:\\Aoo-Ghr-Bnain-Client\\src\\scrapMe.jsx":"25","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleSave.js":"26","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleMouseMove.js":"27","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleMouseUp.js":"28","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleMouseDown.js":"29","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\useStyles.js":"30","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\updateElement.js":"31","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\createElement.js":"32","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\TabPanel.js":"33","F:\\Aoo-Ghr-Bnain-Client\\src\\animatedButton\\Button.js":"34","E:\\aoo-ghr-bnain-update\\src\\index.js":"35","E:\\aoo-ghr-bnain-update\\src\\App.js":"36","E:\\aoo-ghr-bnain-update\\src\\reportWebVitals.js":"37","E:\\aoo-ghr-bnain-update\\src\\home.jsx":"38","E:\\aoo-ghr-bnain-update\\src\\helper\\notfound.js":"39","E:\\aoo-ghr-bnain-update\\src\\auth\\login.js":"40","E:\\aoo-ghr-bnain-update\\src\\auth\\signup.js":"41","E:\\aoo-ghr-bnain-update\\src\\postForm.js":"42","E:\\aoo-ghr-bnain-update\\src\\contact.js":"43","E:\\aoo-ghr-bnain-update\\src\\About.js":"44","E:\\aoo-ghr-bnain-update\\src\\sketch.js":"45","E:\\aoo-ghr-bnain-update\\src\\submitted.js":"46","E:\\aoo-ghr-bnain-update\\src\\helper\\responsive.js":"47","E:\\aoo-ghr-bnain-update\\src\\helper\\nav.js":"48","E:\\aoo-ghr-bnain-update\\src\\auth\\addByAdmin.js":"49","E:\\aoo-ghr-bnain-update\\src\\admin\\Dashboard.js":"50","E:\\aoo-ghr-bnain-update\\src\\services\\payment.js":"51","E:\\aoo-ghr-bnain-update\\src\\users\\userDashboard.js":"52","E:\\aoo-ghr-bnain-update\\src\\helper\\footer.jsx":"53","E:\\aoo-ghr-bnain-update\\src\\services\\UserServices.js":"54","E:\\aoo-ghr-bnain-update\\src\\components\\PaymentForm.js":"55","E:\\aoo-ghr-bnain-update\\src\\services\\GenericServices.js":"56","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\isWithinElement.js":"57","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleSave.js":"58","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\toggleDrawer.js":"59","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleMouseUp.js":"60","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleMouseMove.js":"61","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleMouseDown.js":"62","E:\\aoo-ghr-bnain-update\\src\\scrapMe.jsx":"63","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\useStyles.js":"64","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\updateElement.js":"65","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\createElement.js":"66","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\TabPanel.js":"67"},{"size":504,"mtime":1613716738000,"results":"68","hashOfConfig":"69"},{"size":362,"mtime":1612156156000,"results":"70","hashOfConfig":"69"},{"size":3941,"mtime":1620567594519,"results":"71","hashOfConfig":"69"},{"size":13316,"mtime":1624778569459,"results":"72","hashOfConfig":"69"},{"size":342,"mtime":1615119578000,"results":"73","hashOfConfig":"69"},{"size":9895,"mtime":1624766755913,"results":"74","hashOfConfig":"69"},{"size":6594,"mtime":1619592519737,"results":"75","hashOfConfig":"69"},{"size":1552,"mtime":1613577486000,"results":"76","hashOfConfig":"69"},{"size":5239,"mtime":1618297109742,"results":"77","hashOfConfig":"69"},{"size":112,"mtime":1613913137000,"results":"78","hashOfConfig":"69"},{"size":4181,"mtime":1615130351000,"results":"79","hashOfConfig":"69"},{"size":178224,"mtime":1624244902996,"results":"80","hashOfConfig":"69"},{"size":1197,"mtime":1613717006000,"results":"81","hashOfConfig":"69"},{"size":21866,"mtime":1620711313204,"results":"82","hashOfConfig":"69"},{"size":6081,"mtime":1619507687208,"results":"83","hashOfConfig":"69"},{"size":5695,"mtime":1624289409775,"results":"84","hashOfConfig":"69"},{"size":10638,"mtime":1624778427155,"results":"85","hashOfConfig":"69"},{"size":2105,"mtime":1624766505606,"results":"86","hashOfConfig":"69"},{"size":9677,"mtime":1624778308291,"results":"87","hashOfConfig":"69"},{"size":3957,"mtime":1624766482188,"results":"88","hashOfConfig":"69"},{"size":1761,"mtime":1623333086870,"results":"89","hashOfConfig":"69"},{"size":1150,"mtime":1624766514376,"results":"90","hashOfConfig":"69"},{"size":538,"mtime":1623471678262,"results":"91","hashOfConfig":"69"},{"size":1740,"mtime":1613717129000,"results":"92","hashOfConfig":"69"},{"size":3272,"mtime":1624766551883,"results":"93","hashOfConfig":"69"},{"size":6154,"mtime":1624167564473,"results":"94","hashOfConfig":"69"},{"size":5092,"mtime":1624075386851,"results":"95","hashOfConfig":"69"},{"size":150,"mtime":1613717112000,"results":"96","hashOfConfig":"69"},{"size":2474,"mtime":1616993196814,"results":"97","hashOfConfig":"69"},{"size":1947,"mtime":1612861096000,"results":"98","hashOfConfig":"69"},{"size":575,"mtime":1621445964311,"results":"99","hashOfConfig":"69"},{"size":1411,"mtime":1621445951426,"results":"100","hashOfConfig":"69"},{"size":657,"mtime":1612768812000,"results":"101","hashOfConfig":"69"},{"size":938,"mtime":1624777545172,"results":"102","hashOfConfig":"69"},{"size":521,"mtime":1632729146353,"results":"103","hashOfConfig":"104"},{"size":4083,"mtime":1632729145495,"results":"105","hashOfConfig":"104"},{"size":375,"mtime":1632729146353,"results":"106","hashOfConfig":"104"},{"size":14342,"mtime":1632729145519,"results":"107","hashOfConfig":"104"},{"size":355,"mtime":1632729145518,"results":"108","hashOfConfig":"104"},{"size":6835,"mtime":1632729145498,"results":"109","hashOfConfig":"104"},{"size":10249,"mtime":1632729145499,"results":"110","hashOfConfig":"104"},{"size":1610,"mtime":1632729146353,"results":"111","hashOfConfig":"104"},{"size":5410,"mtime":1632729145514,"results":"112","hashOfConfig":"104"},{"size":4304,"mtime":1632729145495,"results":"113","hashOfConfig":"104"},{"size":185095,"mtime":1632729146359,"results":"114","hashOfConfig":"104"},{"size":123,"mtime":1632729146396,"results":"115","hashOfConfig":"104"},{"size":1227,"mtime":1632729145518,"results":"116","hashOfConfig":"104"},{"size":22237,"mtime":1632729145518,"results":"117","hashOfConfig":"104"},{"size":6081,"mtime":1632729145498,"results":"118","hashOfConfig":"104"},{"size":5863,"mtime":1632729145496,"results":"119","hashOfConfig":"104"},{"size":2105,"mtime":1632729146356,"results":"120","hashOfConfig":"104"},{"size":10922,"mtime":1632729146397,"results":"121","hashOfConfig":"104"},{"size":10018,"mtime":1632729145517,"results":"122","hashOfConfig":"104"},{"size":4612,"mtime":1632729146355,"results":"123","hashOfConfig":"104"},{"size":1761,"mtime":1632729145513,"results":"124","hashOfConfig":"104"},{"size":1205,"mtime":1632729146355,"results":"125","hashOfConfig":"104"},{"size":1800,"mtime":1632729146393,"results":"126","hashOfConfig":"104"},{"size":6360,"mtime":1632729146393,"results":"127","hashOfConfig":"104"},{"size":559,"mtime":1632729146395,"results":"128","hashOfConfig":"104"},{"size":155,"mtime":1632729146362,"results":"129","hashOfConfig":"104"},{"size":5526,"mtime":1632729146362,"results":"130","hashOfConfig":"104"},{"size":3616,"mtime":1632729146361,"results":"131","hashOfConfig":"104"},{"size":3375,"mtime":1632729146354,"results":"132","hashOfConfig":"104"},{"size":2022,"mtime":1632729146396,"results":"133","hashOfConfig":"104"},{"size":594,"mtime":1632729146395,"results":"134","hashOfConfig":"104"},{"size":1443,"mtime":1632729146361,"results":"135","hashOfConfig":"104"},{"size":681,"mtime":1632729146360,"results":"136","hashOfConfig":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r6o1w",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ilqcwy",{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"299"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Aoo-Ghr-Bnain-Client\\src\\index.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\reportWebVitals.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\App.js",["309","310","311"],"import './css/App.css';\nimport './helper/responsive';\nimport Nav from './helper/nav';\nimport PostForm from \"./postForm\";\nimport AnimatedCursor from \"react-animated-cursor\"\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch,\n} from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport login from \"./auth/login.js\";\nimport signup from \"./auth/signup.js\";\n// import Cart from \"./components/Cart.jsx\";\nimport contactus from \"./contact\";\nimport Home from \"./home.jsx\";\nimport notfound from \"./helper/notfound.js\";\nimport sketch from \"./sketch\";\n// import Addproduct from \"./components/products/Addproduct.jsx\";\n// import Editproduct from \"./components/products/editProduct\";\nimport dashboardA from \"./admin/Dashboard\";\nimport about from \"./About\";\nimport TopMenu from \"./helper/nav\";\nimport submitted from \"./submitted\";\nimport addByAdmin from \"./auth/addByAdmin\";\nimport Footer from \"./helper/footer\"\nimport dashboardB from \"./users/userDashboard\";\nimport Payment from \"./services/payment\";\n\n// import Checkout from \"./components/checkout/Checkout.js\";\n function App() {\n    function forceUpdateHandler(){\n        window.location.reload(false);\n          }\n          \n\n     return (\n        <>\n\n            {/*<PostForm />*/}\n     {/*<Nav />*/}\n\n\n\n\n\n\n            <Router>\n                <div>\n\n                <AnimatedCursor  \n                    innerSize={10}\n                    outerSize={10}\n                    color='193, 11, 111'\n                    outerAlpha={0.2}\n                    innerScale={0.7}\n                    outerScale={5}/>\n\n                    <ToastContainer />\n                    <TopMenu />\n                    <Switch>\n                        {/*<Route*/}\n                        {/*    path=\"/products/product_details/:id\"*/}\n                        {/*    component={ProductPage}*/}\n                        {/*></Route>*/}\n                        {/*<Route path=\"/cart/:id?\" component={Cart}></Route>*/}\n                        {/*<Route*/}\n                        {/*    path=\"/manageProducts/Addproduct\"*/}\n                        {/*    component={Addproduct}*/}\n                        {/*></Route>*/}\n                        {/*<Route*/}\n                        {/*    path=\"/manageProducts/Editproduct/:id\"*/}\n                        {/*    component={Editproduct}*/}\n                        {/*></Route>*/}\n\n                        <Route path=\"/dashboardA\" component={dashboardA}></Route>\n                        <Route path=\"/dashboardB\" component={dashboardB}></Route>\n\n                        <Route path=\"/payment\" component={Payment}></Route>\n\n                        {/*<Route path=\"/checkout\" component={Checkout}></Route>*/}\n\n                        {/*<Route path=\"/products\" component={products}></Route>*/}\n\n                        <Route path=\"/contact-us\" component={contactus} \n                        // onClick={forceUpdateHandler}\n                        />\n\n                        <Route path=\"/submitted\" component={submitted} \n                        // onClick={forceUpdateHandler}\n                        />\n                        <Route path=\"/notfound\" component={notfound}/>\n                        <Route path=\"/login\" component={login} \n                        // onClick={forceUpdateHandler}\n                        />\n                        <Route path=\"/signup\" component={signup}/>\n                        <Route path=\"/sketch\" component={sketch}/>\n                        <Route path=\"/about\" component={about}/>\n\n                       \n                        <Route path=\"/addByAdmin\" component={addByAdmin}/>\n                        <Route path=\"/\" exact component={Home}/>\n                        <Redirect to=\"/notfound\"/>\n                    </Switch>\n                    <Footer/>\n                </div>\n            </Router>\n\n        </>\n  )\n}\nexport default App;\n","F:\\Aoo-Ghr-Bnain-Client\\src\\home.jsx",["312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330"],"import './css/App.css';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport front from './img/front.jpg';\n// import home1 from \"./img/home1.png\";\nimport home1 from \"./img/home1-removebg-preview (2).png\";\n// import home2 from \"./img/home2.png\";\nimport home2 from \"./img/home2-removebg-preview (2).png\";\n// import home3 from \"./img/home3.png\";\nimport home3 from \"./img/home3-removebg.png\";\n// import home4 from \"./img/home4.jpg\";\n// import home4 from \"./img/home4-removebg.png\";\n// import home4 from \"./img/home4-removebg-preview.png\";\n\nimport home4 from \"./img/home44.png\";\n\nimport home5 from \"./img/home5.png\";\nimport coffee from \"./img/coffee.jpg\"\nimport lightening from \"./img/lightening.png\";\n\nimport React, { useEffect } from 'react';\nimport { Spin } from 'antd';\nimport { check } from 'antd';\nimport 'antd/dist/antd.css';\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport MyEstimates from \"./sketch\";\nimport logo from \"./img/logoA.png\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Typography from \"@material-ui/core/Typography\";\nimport { FaBeer } from 'react-icons/fa';\nimport { LogoNodejs } from 'react-ionicons'\nimport { Heart } from 'react-ionicons'  \nimport { Close } from 'react-ionicons'  \n\nimport { toast } from \"react-toastify\";\n\n// import AnimatedButton from 'animatedButton/ButtonHover';\n\n\nconst useStyles = makeStyles((theme) => ({\n    p: {\n            overflow: \"visible\",\n            letterSpacing: 0.5,\n            color: \"#433E69\",\n            fontSize: '20px',\n            fontWeight: 700,\n            fontStyle: \"italic\",\n            fontFamily: `\"Inter-ExtraBoldItalic\", \"Inter\", sans-serif`,\n            lineHeight: 2,\n            textAlign: \"center\",\n            top: '20%' ,\n            height: 'auto',\n            width : '100%'\n            \n        },\n    frame : {\n        width: '100%',\n        height: 'auto',\n    },\n\n    textframe:{\n    width: '100%',\n  height: 'auto',\n  overflow: \"hidden\",\n//   transform: \"translate('-50%' , -'50%' )\" ,\n  background: \"radial-gradient(92.10000000000001% 50% at 5.2% 52.7%, #2266ff 0%, hsl(222, 57%, 77%) 100%)\",\nborderRadius: \"5%\",   \n\n},\n\nframe1 : {\n\n    width: '100%',\n    height: 'auto',\n    overflow: 'visible',\n    background: \"radial-gradient(100% 50% at 0% 50%, #593b3b 0%, hsla(0, 71%, 76%, 0.66) 100%)\",\n\n},\n\nliText : {\n\n    width: '100%',\n    height: 'auto',\n    overflow: 'visible',\n    color: 'white',\n    textAlign: 'left',\n    lineHeight: '2.3',\n    fontWeight: '700',\n    fontStyle: 'italic',\n    fontFamily: \"Inter-Bold\" || \"Inter\" || \"sans-serif\",\n    fontSize: '14.3px',\n    letterSpacing: '0px',\n},\n\n    myStyle : {\n        position: 'absolute',\n        top: '20%' ,\n        left: '35%' ,\n        transform: \"translate('-50%' , -'50%' )\" ,\n        width: '30%',\n        height: 'auto',\n    }\n\n\n\n}));\n\nconst Sketch = () => <div> <MyEstimates/>     </div>;\n\nfunction Home() {\n\n    const width = '100%';\n    const height = 'auto';\n\n    const myClass = useStyles();\n\n    return (\n<div style={{overflow : 'hidden'}}>\n<img width = {width} height = {height}\n                     src = {front}\n                     alt=\"image\" \n                     style = {{  opacity:0.8 , borderBottomRightRadius : '20%' }}\n                     \n                     />\n                     \n\n                     <img src = {logo} className={myClass.myStyle}/>\n\n<div style={{paddingLeft : \"10px\" , paddingRight : \"10px\" }}>\n<div className=\"container\">\n<div className=\"row\" style={{marginTop:80}}>\n  <div className=\"col-md-3\"style={{marginTop:70}}>\n      <div className={myClass.textframe}>\n    <p  className={myClass.p} >\n     Here you can build your buildings ( architectural  designs layout)\n    and estimate  the results. You can also see the\n     trending materials in market and see their prices.</p>\n                </div>\n    </div>\n\n   \n\n<div className=\"col-md-4\">\n\n<p className={myClass.p} style ={{textAlign: \"left\" , marginTop: '20%' , fontSize : '15.5px'}}>\n                     Sketch with app estimate with </p>\n                     <div style={{marginTop: '10%'}}></div>\n                         <Link to=\"/sketch\" style={{textDecoration: 'none' }} >\n                             \n                             <Button style={{ marginTop: '20%' , align : 'center' }} label =    \"Sketch App Estimate\"/>\n                         \n                         </Link>\n<div style={{marginTop: '10%'}}></div>\n                         </div>\n<div className=\"col-md-4\">\n    <img className={myClass.frame}\n                     width={\"35%\"}\n                     src = {home2}\n                     alt=\"image\" />\n                     {/* </div>\n                     <div className=\"col-md-3\" style = {{marignTop : '5%'}}> */}\n                    <img className={myClass.frame}\n                     src = {home1}\n                     alt=\"image\" />\n    </div>\n\n</div>\n\n<div className=\"row\" style={{marginTop: '3%'}}>\n    <div className=\"col-md-12\">\n\n    <p className={myClass.p} >\n    Just two Steps For your results</p>\n\n    </div>\n\n\n</div>\n\n<div className=\"row\" style={{marginTop : '3%'}}>\n    <div className=\"col-md-5\">\n\n    <p className={myClass.p} >\n                    Layout Design </p>\n                    <img style={{width:'50%' , height:'auto' ,  marginLeft: '25%' \n  , marginTop : '3%'}}\n                 src = {home4}\n                 alt=\"image\" />\n\n\n    </div>\n\n    <div className=\"col-md-2\">\n        \n        {/* <Spin style={{width:'100%' , marginTop: '20%' , marginBottom:'20%'}} /> */}\n\n        <img style={{width:'150%' , height:'auto' ,  marginLeft: '-25%' \n  , marginTop : '5%'}}\n                 src = {lightening}\n                 alt=\"image\" />\n    </div>\n\n    <div className=\"col-md-5\">\n\n    <p className={myClass.p} style={{marginTop:'3%'}}>\n    Estimate Design </p>\n\n    <img style={{width:'60%' , height:'auto' , marginLeft: '25%' }}\n                 src = {home3}\n                 alt=\"image\" />\n\n    </div>\n\n\n</div>\n\n<div className=\"row\">\n<img style={{width:'60%' , height:'auto' , marginLeft: '20%' }}\n                 src = {home5}\n                 alt=\"image\" />\n\n</div>\n<div className=\"row\">\n<p className={myClass.p} \nstyle={{\n    marginTop:'3%' , \n    fontStyle : 'normal' , \n    fontSize : '20px' ,\n    }}>\nBuy us a cup of Coffee and get\n\nyour Subscription today </p>\n\n</div>\n\n\n<div className=\"row\" style={{marginTop : '3%'}}>\n<div className=\"col-md-4\">\n\n\n\n<img style={{width:'80%' , height:'auto' , borderRadius : '10%' }}\n                 src = {coffee}\n                 alt=\"image\" />\n\n\n</div>\n\n\n<div className=\"col-md-4\">\n    <div className={myClass.frame1}>\n{/* <div style={{marginTop:\"12%\"}}></div> */}\n<Typography className={myClass.p} style = {{paddingTop : '20px' , fontSize : '20px'}}>Features</Typography>\n\n<ol className={myClass.liText}>\n<li>Build</li>\n<li>Estimate</li>\n<li>See Material From Other Sources</li>\n<li>Save Locally</li>\n<li>Save On Web App</li>\n<li>Save As pdf For Verification (NOC and print on A3)</li> \n<li>View From DB</li>\n</ol>\n<Link to=\"/signup\" style={{textDecoration: 'none' }} >\n                             \n                             <Button style={{ marginTop: '20%' , align : 'center' }} \n                             label =    \"We will be glad to see you \"/>\n                         \n                         </Link>\n    </div>\n    </div>\n\n\n\n<div className=\"col-md-2\"><div className={myClass.frame1}\n\nstyle = {{background: \"radial-gradient(100% 50% at 0% 50%, #593b3b 0%, hsla(0, 71%, 76%, 0.66) 100%)\" }}>\n\n{/* <div style={{marginTop:\"25%\"}}></div> */}\n\n<Typography className={myClass.p} style = {{paddingTop : '20px', fontSize : '20px' }}>UnSubscribed</Typography>\n\n<ol className={myClass.liText} style = {{textAlign : 'center'}} >\n<li>  <Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/>  </li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Close\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.error('Service Not Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Close\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.error('Service Not Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li> \n<li><Close\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.error('Service Not Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n</ol>\n<Link to=\"/sketch\" style={{textDecoration: 'none' }} >\n                             \n                             <Button style={{ marginTop: '20%' , align : 'center' }} label =    \"Sketch App\"/>\n                         \n                         </Link>\n\n    </div></div>\n\n\n<div className=\"col-md-2\"><div className={myClass.frame1} \n\nstyle = {{background: \"radial-gradient(100% 50% at 0% 50%, #593b3b 0%, hsla(0, 71%, 76%, 0.66) 100%)\" }}>\n\n{/* <div style={{marginTop:\"25%\"}}></div> */}\n\n\n<Typography className={myClass.p} style = {{paddingTop : '20px' , fontSize : '20px'}}>Subscribed</Typography>\n\n<ol className={myClass.liText} style = {{textAlign : 'center'}}>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li> \n<li><Heart\n  color={'#8B0000'}\n  beat\n  height=\"auto\"\n  width=\"18%\"\n  onClick={() => toast.success('Service Available', {\n    position: \"bottom-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  })}\n/></li>\n</ol>\n<Link to=\"/signup\" style={{textDecoration: 'none' }} >\n                             \n                             <Button style={{ marginTop: '20%' , align : 'center' }} label =    \"Subscribe\"/>\n                         \n                         </Link>\n    </div></div>\n    </div>\n</div>\n\n</div>\n</div>\n\n\n//             <Router>\n\n//                 <Switch>\n//                     <Route path=\"/sketch\" component={Sketch} />\n//                 </Switch>\n//             </Router>\n\n    )\n}\nexport default Home;\n","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\notfound.js",["331"],"import React from \"react\";\nimport notFound from \"../img/404-not-found.jpg\";\nimport 'bootstrap/dist/js/bootstrap.min.js'\n\nconst notfound = () => {\n  return (\n    <div className=\"container\">\n      <img src={notFound} width=\"100%\" height=\"auto\"  style = {{marginTop: '10%' , marginBottom: '10%'}}/>\n     </div>\n  );\n};\n\nexport default notfound;\n","F:\\Aoo-Ghr-Bnain-Client\\src\\auth\\signup.js",["332","333","334","335","336","337"],"import Avatar from \"@material-ui/core/Avatar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport UserServices from \"../services/UserServices\";\nimport PasswordStrengthBar from 'react-password-strength-bar';\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\n\n\nimport { Elements } from '@stripe/react-stripe-js'\nimport { loadStripe } from \"@stripe/stripe-js\"\n\nimport PaymentForm from \"../components/PaymentForm\"\n\nlet ids, setId;\n\nexport {ids , setId};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\n\n\nconst PUBLIC_KEY = \"pk_test_51IorIIJmpNZTNdrVSyS2DzXf6i1NSsowyVHM90rIurlyXK9SXfLKq8rMb4ppoc0zPhcnLff6kUKuOXB90Uy9FyG100kml35YcH\"\nconst stripeTestPromise = loadStripe(PUBLIC_KEY)\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const [name, setName] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  [ids, setId] = React.useState(null)\n\n\n\n\n\n  const [token , setToken] = React.useState(false);\n\n  \n  \n  \n \n\n\n\n\n\n  function handleToken(token, addresses) {\n\n      toast.error(\"This Function will work properly on online server\", {\n      position: \"bottom-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n          });\n\n\n      setToken(true)\n\n    new Promise((resolve, reject) => {\n\n      console.log(token)\n\n    axios.post(\n      \"https://aoo-ghr-bnain-fyp.herokuapp.com/mycheckout\",\n      { token }\n    ).then((res)=>{\n      resolve(res)\n    })\n    .catch((err)=>{\n      reject(err)\n    });\n  });\n\n\n\n    // this.post(\"http://localhost:5000/register\", { username, email, password , role})\n    //     .then((res) => {\n    //       resolve(res);\n    //     })  \n    //     .catch((err) => {\n    //       reject(err);\n    //     });\n\n    // console.log(handleToken)\n\n\n\n    // const { status } = response.data;\n    // console.log(\"Response:\", response.data);\n    // if (status === \"success\") {\n    //   toast(\"Success! Check email for details\", { type: \"success\" });\n    // } else {\n    //   toast(\"Something went wrong\", { type: \"error\" });\n    // }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                autoComplete=\"name\"\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"Full Name\"\n                autoFocus\n                value={name}\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                onKeyPress={event => {\n                  if (event.key === 'Enter') {\n                document.getElementById('save').click();\n                  }\n              }}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.target.value);\n                }}\n                onKeyPress={event => {\n                  if (event.key === 'Enter') {\n                document.getElementById('save').click();\n                  }\n              }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.target.value);\n\n                  \n                }}\n                onKeyPress={event => {\n                  if (event.key === 'Enter') {\n                document.getElementById('save').click();\n                  }\n              }}\n              />\n            </Grid>\n          </Grid>\n                  <br></br>\n          <PasswordStrengthBar password={password} />\n<Grid>\n\n\n  <Elements stripe = {stripeTestPromise}>\n    \n              <PaymentForm/>\n  </Elements>\n  \n\n</Grid>\n          \n\n        {ids == null ? ( \n        \n        <Button\n            disabled\n          id = \"save\"\n            fullWidth\n            className={classes.submit}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => {\n              UserServices.register(name, email, password , \"user\")\n                .then((data) => {\n                  console.log(data);\n                  toast.success(data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                  window.location.href = \"/login\";\n                })\n                .catch((err) => {\n                  toast.error(err.response.data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                });\n            }}\n          >\n            Sign Up\n          </Button>) : ( \n          \n          <Button\n          \n          id = \"save\"\n            fullWidth\n            className={classes.submit}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => {\n              UserServices.register(name, email, password , \"user\" , 100, ids)\n                .then((data) => {\n                  console.log(data);\n                  toast.success(data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                  window.location.href = \"/login\";\n                })\n                .catch((err) => {\n                  toast.error(err.response.data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                });\n            }}\n          >\n            Sign Up\n          </Button>) }\n\n          {/* <Button\n          \n          id = \"save\"\n            fullWidth\n            className={classes.submit}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => {\n\n                UserServices.register(name, email, password , \"user\")\n                .then((data) => {\n                  console.log(data);\n                  toast.success(data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                  window.location.href = \"/login\";\n                })\n                .catch((err) => {\n                  toast.error(err.response.data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                });\n               \n              }}\n          >\n            Sign Up\n          </Button> */}\n        <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n  \n    </Container>\n  );\n}\n","F:\\Aoo-Ghr-Bnain-Client\\src\\auth\\login.js",["338","339","340","341","342"],"\n// import React, { Component } from 'react';\n// import axios from 'axios';\n\n// class Create extends Component {\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             username: '',\n//             password: '',\n//             data:'',\n//         };\n//     }\n\n//     handleInputChange = e => {\n//         this.setState({\n//             [e.target.name]: e.target.value,\n//         });\n//     };\n\n//     handleSubmit = e => {\n//         e.preventDefault();\n\n//         // console.log(\"happy\")\n//         const { username , password } = this.state;\n\n\n//         const account = {\n//             username,\n//             password,\n//         };\n\n//         // console.log(account);\n\n    \n\n//         axios.post('http://localhost:5000/auth', account )\n//             .then((res) =>{ \n//                             // this.data = res.data\n//                             console.log(res.status);\n//                             console.log(res.isLoggedin);\n//                 if(res.isLoggedin){\n\n//                     window.location.href = '/welcome ';\n//                 }\n                            \n                            \n//                         })\n//             .catch(err => {\n//                 console.error(err.status);  \n//             },{\n//                 withCredentials: true,\n//                 headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'\n//             }});\n\n//         this.setState({ name: '', email: '' })\n\n//         document.forms['myform'].reset();\n\n\n//     };\n\n   \n\n//     render() {\n//         return (\n//             <div>\n//                 <br />\n//                 <div className=\"container\">\n\n//                         <div className=\"login-form\">\n//                             <h1>Login Form</h1>\n//                             <form onSubmit={this.handleSubmit} id=\"myform\">\n//                                 <input type=\"text\" name=\"username\" placeholder=\"Username\" required onChange={this.handleInputChange}/>\n//                                     <input type=\"password\" name=\"password\" placeholder=\"Password\" required onChange={this.handleInputChange}/>\n//                                         <input type=\"submit\"/>\n//                             </form>\n//                         </div>\n//                 </div>\n//                 <h1>{this.data}</h1>\n//             </div>\n//         );\n//     }\n// }\n\n// export default Create;\n\n\n\n\n\n\n\n\n\n\n\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport UserServices from \"../services/UserServices\";\nimport * as jwt from 'jsonwebtoken';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n\n  const [userName, setUserName] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"userName\"\n            label=\"email address\"\n            name=\"User Name\"\n            autoComplete=\"userName\"\n            autoFocus\n            value={userName}\n            onChange={(e) => {\n              setUserName(e.target.value);\n            }}\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n            document.getElementById('save').click();\n              }\n          }}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            required\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n            document.getElementById('save').click();\n              }\n          }}\n          />\n\n          <Button\n          id = \"save\"\n            className={classes.submit}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => {\n\n              // console.log({userName}, {password})\n              UserServices.login(userName, password)\n                .then((data) => {\n                  console.log(data);\n                  window.location.href = \"/dashboardB\";\n\n                })\n                .catch((err) => {\n                  toast.error(err.response.data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                });\n            }}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item>\n              <Link href=\"/signup\" variant=\"body2\">\n                Don't have an account? {\"Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      \n    </Container>\n  );\n}\n","F:\\Aoo-Ghr-Bnain-Client\\src\\postForm.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\contact.js",["343","344","345","346","347","348"],"import Avatar from \"@material-ui/core/Avatar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport UserServices from \"./services/UserServices\";\nimport avatar from \"./img/contactAvatar.jpg\"\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const [name, setName] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [query, setQuery] = React.useState(\"\");\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <img src={avatar} width=\"100%\" height = \"auto\"/>\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          We Want To Listen From You\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                autoComplete=\"name\"\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"Full Name\"\n                autoFocus\n                value={name}\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                  document.getElementById('save').click();\n                    }\n                }}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.target.value);\n                }}\n                onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                  document.getElementById('save').click();\n                    }\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                  document.getElementById('save').click();\n                    }\n                }}\n                variant=\"outlined\"\n                required\n                fullWidth\n                fullHeight\n                name=\"query\"\n                label=\"Query\"\n                type=\"query\"\n                id=\"query\"\n                value={query}\n                onChange={(e) => {\n                  setQuery(e.target.value);\n\n                  \n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n          \n          id = \"save\"\n            fullWidth\n            className={classes.submit}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => {\n              UserServices.contact(name, email, query)\n                .then((data) => {\n                  console.log(data);\n                  toast.success(data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                })\n                .catch((err) => {\n                  toast.error(err.response.data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                });\n\n                setName(\"\"); setEmail(\"\"); setQuery(\"\");\n            }}\n          >\n            Submit\n          </Button>\n          <Grid container justify=\"flex-end\">\n          </Grid>\n        </form>\n      </div>\n      \n    </Container>\n  );\n}\n","F:\\Aoo-Ghr-Bnain-Client\\src\\submitted.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\About.js",["349","350","351","352","353","354","355","356"],"import { Typography } from '@material-ui/core';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport about from './img/about.jpg'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport home1 from './img/home1.png'\nimport about111 from './img/about111.jpeg'\nimport about222 from './img/about222.jpg'\nimport { useState, useEffect } from 'react';\nimport { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/map-marker'\n\nconst useStyles = makeStyles((theme) => ({\n \n    h:{\n        marginTop : '20%',\n        color: \"green\"\n    },\n\n    text : {\n           fontSize : '15px',\n           overflow: \"visible\",\n           fontWeight: 800,\n           fontStyle: \"italic\",\n           fontFamily: `\"Inter-ExtraBoldItalic\", \"Inter\", sans-serif`,\n           color: \"#433E69\",\n           letterSpacing: 1,\n           lineHeight: 1.5,\n    },\n\n    frame : {\n        height: \"auto\",\n        overflow: \"visible\",\n        display: 'block',\n        marginTop : '10%',\n        marginBottom: '10%',\n      },\n\n      frame2 : {\n        width: \"85%\",\n        height: 'auto',\n        background: \"radial-gradient(100% 50% at 0% 46.6%, #33aaff 0%, hsl(0, 0%, 66%) 100%)\",\n        overflow: \"visible\",\n      }\n\n}));\n\nfunction getWindowDimensions() {\n    const width = window.innerWidth;\n    return width\n    \n  }\n\nexport default function About() {\n\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    const [fontSize, setFontSize] = useState(25);\n    const [widthh , setWidthh] = useState(750);\nuseEffect(() => {\n\n    setWindowDimensions(getWindowDimensions());\n\n    if(windowDimensions < 1024){ \n        setFontSize(12);\n        setWidthh(280);\n    }\n})\n    \n    const myClass = useStyles();\n\n    return(\n\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-xs-12\">\n                    <img src={about} width = '100%' height = 'auto' style = {{marginTop: '10%'}}/>\n                </div>\n            </div>\n            <div className=\"row\">\n            <div className=\"col-xs-12\" style = {{padding : 15}}>\n                    <h4 className={myClass.h}>Who We Are</h4>\n                    <Typography className={myClass.text}>We are Students in UOL. We have made this project as FYP</Typography>\n                </div>\n            </div>\n\n            <div className=\"row\">\n            <div className=\"col-xs-12\">\n                    <div className={myClass.frame}>\n                        <div style = {{marginLeft:'10%'}}>    \n                        <img src={about111} width=\"35%\" height = \"auto\"/>\n                        <img src={about222} width = \"50%\" height = \"auto\"/>\n\n                            <div className = {myClass.frame2}>\n            <Typography className = {myClass.text} style = {{fontSize : fontSize , marginLeft : '12%'}}>\n            Designed By: UOL Students <br/>\n            Supervisor: Sir Hassan Bajwa <br/>\n            Ehtisham ur Rehman (70069403@student.uol.edu.pk) <br/>\n            Saad Qadeer (70069780@student.uol.edu.pk) <br/> </Typography>\n\n                            </div>\n                            \n\n                    </div>\n                    </div>\n                </div>\n                </div>\n                <div className=\"row\">\n            <div className=\"col-xs-12\" style = {{padding : 15}}>\n                    <h4 className={myClass.h}>Where to Find us</h4>\n                    <Typography className={myClass.text}>The University of Lahore, Defence Road Campus</Typography>\n                </div>\n            </div>\n            <br/>\n            <div className=\"row\">\n            <div className=\"col-xs-12\" style = {{marginLeft:'10%'  }} >\n            <iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3405.82331630059!2d74.23897181549792!3d31.39143496063751!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3919018a8ea548c1%3A0x4a52db69c2c814f!2sThe%20University%20of%20Lahore!5e0!3m2!1sen!2s!4v1615126762811!5m2!1sen!2s\" \n            width={widthh} height=\"auto\" style={{border:1}} allowfullscreen=\"yes\" loading=\"eager\"></iframe>\n                </div>\n            </div>\n            \n\n\n        </div>\n    )\n}","F:\\Aoo-Ghr-Bnain-Client\\src\\sketch.js",["357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384"],"import './css/App.css';\nimport React, {useLayoutEffect,useEffect, useState} from 'react';\nimport rough from 'roughjs/bundled/rough.esm';\nimport Button from '@material-ui/core/Button';\nimport clsx from 'clsx';\nimport TabPanel from \"./sketchHelper/TabPanel\";\nimport PropTypes from 'prop-types';\nimport {useTheme} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport {Avatar,  Input, InputAdornment, InputLabel, Menu, MenuItem} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport {ButtonGroup as MaterialButtonGroup}  from \"@material-ui/core\";\n\nimport SwapHorizontalCircleIcon from '@material-ui/icons/SwapHorizontalCircle';\nimport BuildIcon from '@material-ui/icons/Build';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport SwapVerticalCircleIcon from '@material-ui/icons/SwapVerticalCircle';\nimport useStyles from \"./sketchHelper/useStyles\"; \nimport {handleMouseDown} from \"./sketchHelper/handleMouseDown\";\nimport {handleMouseUp} from \"./sketchHelper/handleMouseUp\";\nimport {handleMouseMove} from \"./sketchHelper/handleMouseMove\";\nimport {HandleSave} from \"./sketchHelper/handleSave\";\nimport {isWithinElement} from \"./sketchHelper/isWithinElement\";\nimport {toggleDrawer , toggleDrawer2} from \"./sketchHelper/toggleDrawer\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport {scrapMe} from './scrapMe'\nimport { toast } from \"react-toastify\";\nimport UserServices from \"./services/UserServices\";\nimport { Spin } from 'antd';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport surface from './img/surface.jpg'; \nimport steel from './img/steel.jpg'; \nimport brick from './img/brick.jpg'; \nimport sand from './img/sand.jpg';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSave} from \"@fortawesome/free-solid-svg-icons\";\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\nimport {faVoteYea} from \"@fortawesome/free-solid-svg-icons\";\nimport {faIndustry} from \"@fortawesome/free-solid-svg-icons\";\nimport {faGripLinesVertical} from \"@fortawesome/free-solid-svg-icons\";\nimport {faSquare} from \"@fortawesome/free-solid-svg-icons\";\nimport {faCircleNotch} from \"@fortawesome/free-solid-svg-icons\";\nimport {faDoorOpen} from \"@fortawesome/free-solid-svg-icons\";\nimport {faCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {faEraser} from \"@fortawesome/free-solid-svg-icons\";\nimport {faFileDownload} from \"@fortawesome/free-solid-svg-icons\";\nimport {faLayerGroup} from \"@fortawesome/free-solid-svg-icons\";\nimport {faTrashAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport {faPalette} from  \"@fortawesome/free-solid-svg-icons\";\nimport {faGetPocket} from  \"@fortawesome/free-brands-svg-icons\";\nimport {faJoget} from  \"@fortawesome/free-brands-svg-icons\";\n\n\nimport ColorPicker from 'material-ui-color-picker'\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport {sketchData} from './users/userDashboard'\nimport { custom } from 'joi';\n\n        let heightt ;\n        let widthh ;\n        let item = 0;\n        let canv = null;\n        let canvWidth , setCanvWidth = null;\n        let canvHeight , setCanvHeight = null;\n        let ElementWidth , setElementWidth = null;\n        let ElementLength , setElementLength = null;\n        let ElementStrokeWidth , setElementStrokeWidth = null;\n        let error , setError ;\n        let canvas = null;\n        let totalLayer = 0;\n        let  tool , setTool ;\n        let elements, setElements;\n        let myElements, setMyElements;\n        let myVar, setMyVar;\n        let estimateArr, setEstimateArr;\n        let selectedElement , setSelectedElement ;\n        let action , setAction ;\n        let state , setState;\n        let state2 , setState2;\n        let open , setOpen ;\n        let myArr , setMyArr ;\n        let price , setPrice ;\n        let title , setTitle ;\n        let image , setImage ;\n        let price2 , setPrice2 ;\n        let title2 , setTitle2 ;\n        let image2 , setImage2 ;\n        let price3 , setPrice3 ;\n        let title3 , setTitle3 ;\n        let image3 , setImage3 ;\n        let steelPrice , setSteelPrice ;\n        let steelTitle , setSteelTitle ;\n        let steelImage , setSteelImage ;\n        let steelPrice2 , setSteelPrice2 ;\n        let steelTitle2 , setSteelTitle2 ;\n        let steelImage2 , setSteelImage2 ;\n        let steelPrice3 , setSteelPrice3 ;\n        let steelTitle3 , setSteelTitle3 ;\n        let steelImage3 , setSteelImage3 ;\n        let loading , setLoading ;\n        let value, setValue;\n        let steelValue, setSteelValue;\n        let bricksValue, setBricksValue;\n        let sandValue, setSandValue;\n        let heightValue, setHeightValue;\n        let ccRatio, setCcRatio;\n        let ssRatio, setSsRatio;\n        let plasterValue, setPlasterValue;\n        let marla = 0;\n        let wall , setWall ;\n        let bgColor , setBGColor ;\n        let customCement , setCustomCement ;\n        let customSteel , setCustomSteel ;\n        let customBricks , setCustomBricks ;\n        let customSand , setCustomSand ;\n        let customHeight , setCustomHeight ;\n        let customCRatio , setCustomCRatio ;\n        let customSRatio , setCustomSRatio ;\n        let customPlaster , setCustomPlaster ;\n        let cArea , setCArea ;\n        let c2Area , setC2Area ;\n\n        export {totalLayer};\n        export {widthh};\n        export {heightt};\n        export {marla};\n        export {canvWidth , canvHeight};\n        export {ElementWidth , ElementLength ,ElementStrokeWidth,\n                setElementStrokeWidth, setElementLength  , setElementWidth};\n        export {error , setError };\n        export {canvas};\n        export {tool , setTool};\n        export {elements , setElements };\n        export {selectedElement , setSelectedElement};\n        export {action , setAction};\n        export {state , setState};\n        export {state2 , setState2};\n        export {open , setOpen};        \n        export {myArr , setMyArr};\n        export {price , setPrice};\n        export {title , setTitle};\n        export {image , setImage};\n        export {price2 , setPrice2};\n        export {title2 , setTitle2};\n        export {image2 , setImage2};\n        export {price3 , setPrice3};\n        export {title3 , setTitle3};\n        export {image3 , setImage3};\n        export {steelPrice , setSteelPrice};\n        export {steelTitle , setSteelTitle};\n        export {steelImage , setSteelImage};\n        export {steelPrice2 , setSteelPrice2};\n        export {steelTitle2 , setSteelTitle2};\n        export {steelImage2 , setSteelImage2};\n        export {steelPrice3 , setSteelPrice3};\n        export {steelTitle3 , setSteelTitle3};\n        export {steelImage3 , setSteelImage3};\n        export {loading , setLoading};\n        export {value, setValue}; \n        export {steelValue, setSteelValue};\n        export {bricksValue, setBricksValue};\n        export {sandValue, setSandValue};\n        export {heightValue, setHeightValue};\n        export {plasterValue, setPlasterValue};\n        export {wall , setWall}\n        export {bgColor , setBGColor}\n        export {customCement , setCustomCement}\n        export {customSteel , setCustomSteel };\n        export {customBricks , setCustomBricks };\n        export {customSand , setCustomSand };\n        export {customHeight , setCustomHeight };\n        export {customPlaster , setCustomPlaster };\n        export {myVar, setMyVar};\n\n\n\n        export let mouse = {x : 0, y : 0, events : \"mousemove,mousedown,mouseup\"};\n\n        function myColorPicker(){\n            return  <ColorPicker\n            name=\"color\"\n            defaultValue=\"#000\"\n            // value={this.state.color} - for controlled component\n            onChange={color => console.log(color)}\n          />\n        }\n            \n        export const list = (anchor) => (\n        \n            <div\n                className={clsx(useStyles.list, {\n                    [useStyles.fullList]: anchor === 'top' || anchor === 'bottom',\n                })}\n                role=\"presentation\"\n                // onClick={toggleDrawer(anchor, false)}\n                // onKeyDown={toggleDrawer(anchor, false)}\n            >\n\n                {loading ? (\n                               \n                               <List\n                               style={{display: 'flex' , flexDirection : 'row'}}\n                   \n                           >\n                   \n                               {[<Spin style={{width:'100%' , marginTop: '20%' , marginBottom:'20%'}} />\n                                   ].map((text, index) => (\n                                   <ListItem button key={text}>\n                                       <ListItemIcon></ListItemIcon>\n                                       <ListItemText primary={text} />\n                                   </ListItem>\n                               ))}\n                           </List>\n                    ) :  \n\n                    <List \n                    style={{display: 'flex' , flexDirection : 'column'}}\n        \n                >\n        \n                    {[\n                  \n\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Cement</FormLabel>\n                            <RadioGroup aria-label=\"cement\" name=\"cement\" value={value} \n                            onChange={(event) => setValue(event.target.value)}\n                            >\n                                <FormControlLabel value={price} control={<Radio />} label={title} /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>{price}</Typography>\n                                <FormControlLabel value={price2} control={<Radio />} label={title2} />  <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>{price2}</Typography>\n                                 <FormControlLabel value={price3} control={<Radio />} label={title3} /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>{price3}</Typography>\n                                <FormControlLabel value={customCement} control={<Radio />} label=\"Your Desired Price per bag\" /> <TextField\n                                                                                                                            autoComplete=\"price\"\n                                                                                                                            name=\"Price\"\n                                                                                                                            variant=\"outlined\"\n                                                                                                                            required\n                                                                                                                            fullWidth\n                                                                                                                            id=\"priceCement\"\n                                                                                                                            label=\"Enter Price\"\n                                                                                                                            autoFocus\n                                                                                                                            value={customCement}\n                                                                                                                            onChange={(e) => {\n                                                                                                                                setCustomCement(e.target.value);\n                                                                                                                             }}\n                                                                                                                            />\n                            </RadioGroup>\n                         \n                        </FormControl>\n                        ,\n<FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Steel</FormLabel>\n                            <RadioGroup aria-label=\"steel\" name=\"steel\" value={steelValue} \n                            onChange={(event) => setSteelValue(event.target.value)}\n                            >\n                                <FormControlLabel value=\"136.9\" control={<Radio />} label={steelTitle} /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>{steelPrice}</Typography>\n                                <FormControlLabel value=\"137\" control={<Radio />} label={steelTitle2} />  <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>{steelPrice2}</Typography>\n                                 <FormControlLabel value=\"137.1\" control={<Radio />} label={steelTitle3} /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>{steelPrice3}</Typography>\n                                <FormControlLabel value={customSteel} control={<Radio />} label=\"Your Desired Price per Kg\" /> <TextField\n                                                                                                                            autoComplete=\"price\"\n                                                                                                                            name=\"Price\"\n                                                                                                                            variant=\"outlined\"\n                                                                                                                            required\n                                                                                                                            fullWidth\n                                                                                                                            id=\"priceSteel\"\n                                                                                                                            label=\"Enter Price\"\n                                                                                                                            autoFocus\n                                                                                                                            value={customSteel}\n                                                                                                                            onChange={(e) => {\n                                                                                                                                setCustomSteel(e.target.value);\n                                                                                                                             }}\n                                                                                                                            />\n                            </RadioGroup>\n                         \n                        </FormControl>\n                        ,\n                        <FormControl component=\"fieldset\">\n                                <FormLabel component=\"legend\">Bricks</FormLabel>\n                                    <RadioGroup aria-label=\"bricks\" name=\"bricks\" value={bricksValue} \n                                        onChange={(event) => setBricksValue(event.target.value)}\n                                        >\n                                        <FormControlLabel value=\"13.2\" control={<Radio />} label=\"level 1 Bricks (Awwal A+)\" /> <Typography\n                                                                                                                                style = {{color: 'black',\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 13,200</Typography>\n                                            <FormControlLabel value=\"12.8\" control={<Radio />} label=\"level 1- Bricks (Awwal A)\" />  <Typography\n                                                                                                                                style = {{color: 'black',\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 12,800</Typography>\n                                             <FormControlLabel value=\"9.2\" control={<Radio />} label=\"level 2 Bricks (Doam)\" /> <Typography\n                                                                                                                                style = {{color: 'black',\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 9,200</Typography>\n                                             <FormControlLabel value=\"8.8\" control={<Radio />} label=\"level 3 Bricks (Khangar)\" /> <Typography\n                                                                                                                                style = {{color: 'black',\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 8,800</Typography>\n\n                                            <FormControlLabel value={customBricks} control={<Radio />} label=\"Your Desired Price per 1 piece\" /> <TextField\n                                                                                                                            autoComplete=\"price\"\n                                                                                                                            name=\"Price\"\n                                                                                                                            variant=\"outlined\"\n                                                                                                                            required\n                                                                                                                            fullWidth\n                                                                                                                            id=\"priceBricks\"\n                                                                                                                            label=\"Enter Price\"\n                                                                                                                            autoFocus\n                                                                                                                            value={customBricks}\n                                                                                                                            onChange={(e) => {\n                                                                                                                                setCustomBricks(e.target.value);\n                                                                                                                             }}\n                                                                                                                            />\n                                                    \n                                        </RadioGroup>\n                                                 \n                                     </FormControl>\n                        ,\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Sand (Construction)</FormLabel>\n                            <RadioGroup aria-label=\"gender\" name=\"steel\" value={sandValue} \n                            onChange={(event) => setSandValue(event.target.value)}\n                            >\n                                <FormControlLabel value=\"42.14\" control={<Radio />} label=\"Chanab Sand A+\" /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 29,500</Typography>\n                                <FormControlLabel value=\"40\" control={<Radio />} label=\"Chanab Sand B\" />  <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 28,000</Typography>\n                                 <FormControlLabel value=\"34.28\" control={<Radio />} label=\"Chanab Sand C\" /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 24,000</Typography>\n                               <FormControlLabel value=\"17.14\" control={<Radio />} label=\"Ravi Sand\" /> <Typography\n                                                                                                        style = {{color: 'black',\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 12,000</Typography>\n                               <FormControlLabel value={customSand} control={<Radio />} label=\"Your Desired Price per Trolly 700 CFT\" /> <TextField\n                                                                                                                            autoComplete=\"price\"\n                                                                                                                            name=\"Price\"\n                                                                                                                            variant=\"outlined\"\n                                                                                                                            required\n                                                                                                                            fullWidth\n                                                                                                                            id=\"priceSand\"\n                                                                                                                            label=\"Enter Price\"\n                                                                                                                            autoFocus\n                                                                                                                            value={customSand}\n                                                                                                                            onChange={(e) => {\n                                                                                                                                setCustomSand(e.target.value);\n                                                                                                                             }}\n                                                                                                                            />\n                            </RadioGroup>\n                         \n                        </FormControl>\n                        ,\n                        <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Height of Building</FormLabel>\n                        <RadioGroup aria-label=\"gender\" name=\"heightValue\" value={heightValue} \n                        onChange={(event) => setHeightValue(event.target.value)}\n                        >\n                            <FormControlLabel value=\"12\" control={<Radio />} label=\"12 ft\" /> \n                            <FormControlLabel value=\"11\" control={<Radio />} label=\"11 ft\" />  \n                             <FormControlLabel value=\"10\" control={<Radio />} label=\"10 ft\" />\n                           <FormControlLabel value={customHeight} control={<Radio />} label=\"Your Desired Height\" /> <TextField\n                                                                                                                        autoComplete=\"price\"\n                                                                                                                        name=\"Price\"\n                                                                                                                        variant=\"outlined\"\n                                                                                                                        required\n                                                                                                                        fullWidth\n                                                                                                                        id=\"priceSand\"\n                                                                                                                        label=\"Enter Price\"\n                                                                                                                        autoFocus\n                                                                                                                        value={customHeight}\n                                                                                                                        onChange={(e) => {\n                                                                                                                            setCustomHeight(e.target.value);\n                                                                                                                         }}\n                                                                                                                        />\n                        </RadioGroup>\n                     \n                    </FormControl>,\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Enter ratio of cement <span style={{color : \"blue\"}}>\n                                                                                (If you want 1:4 select 1)</span></FormLabel>\n                        <RadioGroup aria-label=\"gender\" name=\"ccRatio\" value={ccRatio} \n                        onChange={(event) => setCcRatio(event.target.value)}\n                        >\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" /> \n                            \n                           <FormControlLabel value={customCRatio} control={<Radio />} label=\"Your Desired cement ratio\" /> <TextField\n                                                                                                                        autoComplete=\"price\"\n                                                                                                                        name=\"Price\"\n                                                                                                                        variant=\"outlined\"\n                                                                                                                        required\n                                                                                                                        fullWidth\n                                                                                                                        id=\"cRatio\"\n                                                                                                                        label=\"Enter Cement Ratio\"\n                                                                                                                        autoFocus\n                                                                                                                        value={customCRatio}\n                                                                                                                        onChange={(e) => {\n                                                                                                                            setCustomCRatio(e.target.value);\n                                                                                                                         }}\n                                                                                                                        />\n                        </RadioGroup>\n                     \n                    </FormControl>,\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Enter ratio of sand <span style={{color : \"blue\"}}>\n                                                                                (If you want 1:4 select 4)</span></FormLabel>\n                        <RadioGroup aria-label=\"gender\" name=\"ssRatio\" value={ssRatio} \n                        onChange={(event) => setSsRatio(event.target.value)}\n                        >\n                            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" /> \n                            <FormControlLabel value=\"6\" control={<Radio />} label=\"6\" />\n                           <FormControlLabel value={customSRatio} control={<Radio />} label=\"Your Desired sand ratio\" /> <TextField\n                                                                                                                        autoComplete=\"price\"\n                                                                                                                        name=\"Price\"\n                                                                                                                        variant=\"outlined\"\n                                                                                                                        required\n                                                                                                                        fullWidth\n                                                                                                                        id=\"cRatio\"\n                                                                                                                        label=\"Enter Sand Ratio\"\n                                                                                                                        autoFocus\n                                                                                                                        value={customSRatio}\n                                                                                                                        onChange={(e) => {\n                                                                                                                            setCustomSRatio(e.target.value);\n                                                                                                                         }}\n                                                                                                                        />\n                        </RadioGroup>\n                     \n                    </FormControl>,\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Plastering Depth in inches</FormLabel>\n                        <RadioGroup aria-label=\"gender\" name=\"plasterValue\" value={plasterValue} \n                        onChange={(event) => setPlasterValue(event.target.value)}\n                        >\n                            <FormControlLabel value=\"0.5\" control={<Radio />} label=\"0.5 inches\" /> \n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1 inches\" />  \n                            \n                           <FormControlLabel value={customPlaster} control={<Radio />} label=\"Your Depth for Plastering\" /> <TextField\n                                                                                                                        autoComplete=\"price\"\n                                                                                                                        name=\"Depth of Plsater\"\n                                                                                                                        variant=\"outlined\"\n                                                                                                                        required\n                                                                                                                        fullWidth\n                                                                                                                        id=\"plaster\"\n                                                                                                                        label=\"Enter Depth of Plsater\"\n                                                                                                                        autoFocus\n                                                                                                                        value={customPlaster}\n                                                                                                                        onChange={(e) => {\n                                                                                                                            setCustomPlaster(e.target.value);\n                                                                                                                         }}\n                                                                                                                        />\n                        </RadioGroup>\n                     \n                    </FormControl>,\n                        <Button onClick={()=>{\n                            // setState(\"bottom\" , false)\n\n                            var price = value;\n                            console.log(parseFloat(price.replace( /\\D/g, \"\")));\n                            \n                            console.log(steelValue)\n                            console.log(bricksValue)\n                            console.log(sandValue)\n                            console.log(heightValue)\n\n                            let estimatess1 = 0;\n                            let estimatess2 = 0;\n                            let estimatess1total = 0;\n                            let estimatess2total = 0;\n\n                            let strokeWidth = 0;\n\n                            for(var k = 0; k < myVar.length; k++) {\n\n                                var Data = myVar[k];\n    \n                                for(var m = 0; m < Data.length; m++) {\n    \n                                    estimatess1total = estimatess1total + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\n                                    estimatess2total = estimatess2total + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\n    \n                                }\n    \n                            }\n                            \n\n                        for(var i = 0; i < myArr.length ; i++)\n                        {\n                            // console.log( myArr[i].type);\n                            // console.log( myArr[i].x1);\n                            // console.log( myArr[i].x2);\n                            // console.log( myArr[i].y2);\n                            // console.log( myArr[i].y1);\n                            // console.log( (myArr[i].x2-myArr[i].x1)  / 15.36);\n                            // console.log( (myArr[i].y2-myArr[i].y1)  / 15.36);\n     \n                            estimatess1 = estimatess1 + (Math.abs(myArr[i].x2-myArr[i].x1)  / 15.36);\n                            estimatess2 = estimatess2 + (Math.abs(myArr[i].y2-myArr[i].y1) / 15.36);\n                            strokeWidth = myArr[i].roughElement.options.strokeWidth\n                           \n                        }   \n\n                            var brickArea = Math.abs(heightValue) * Math.abs((estimatess1  + estimatess2) * 144 ) * strokeWidth\n\n                            var nuOfBrick = brickArea / 166.25\n\n                            var mortar = nuOfBrick * 0.10\n                            \n                            nuOfBrick = nuOfBrick - mortar\n                            \n                            var waste = nuOfBrick * 0.04\n\n                            var getTotalBrick = nuOfBrick + waste;\n                        \n                            var totalBricks = Math.abs(heightValue) * Math.abs((((estimatess1 *2 ) + (estimatess2*2))*144)/32)\n                            // var totalBricks = Math.abs((estimatess1 * 2 )+( estimatess2*2)) \n   \n\n                            console.log(\"arr length   :   \" + myArr.length)\n                            console.log(\"Height  :   \" + heightValue)\n                            console.log(\"ElementStrokeWidth   :   \" + strokeWidth)\n                            console.log(\"estimate1   :    \" + estimatess1 * 2 )\n                            console.log(\"estimate2   :    \" + estimatess2 * 2 )\n                            console.log(\"Total Bricks  :  \" + getTotalBrick )\n                            console.log(\"mortar of Bricks  :    \" + mortar * 0.0254 * 0.012 )\n\n                            document.getElementById(\"bricksCount\").value = getTotalBrick ;\n\n                            var Hplaster = Math.abs(heightValue * 0.3048)\n\n                            var Wplaster = Math.abs(estimatess1 * 0.3048 + estimatess2  * 0.3048)\n\n                            var Dplaster = Math.abs(strokeWidth * 0.0254)\n\n                            var currentPlasterValue = plasterValue * 0.0254\n\n                            var plasterVolume =   Hplaster *  Wplaster * currentPlasterValue\n\n                            var plasterDryVolume = plasterVolume * 1.35\n\n                            var cRatio = Math.abs(ccRatio) \n                            var sRatio = Math.abs(ssRatio)\n                            \n                            \n                            // var cRatio = Math.abs(1) \n                            // var sRatio = Math.abs(6)\n\n                            var tRatio = Math.abs(cRatio + sRatio)\n\n                            var cCum = ( cRatio / tRatio ) * plasterDryVolume\n\n                            var cKg = cCum * 1440\n\n                            var cBags = cKg / 50\n\n                            var sCum = (sRatio / tRatio) * plasterDryVolume\n                            \n                            var sCFT = sCum * 35.31\n\n                            console.log(\"H  :   \" +  Hplaster)\n                            console.log(\"W  :   \" +  Wplaster)\n                            console.log(\"D  :   \" + currentPlasterValue)\n                            \n                            console.log(\"plasterVolume  :   \" + plasterVolume )\n                            console.log(\"plasterDryVolume  :   \" + plasterDryVolume)\n                            console.log(\"cRatio   :   \" + cRatio)\n                            console.log(\"sRatio   :    \" + sRatio )\n                            console.log(\"tRatio   :    \" + tRatio )\n                            console.log(\"cCum  :  \" + cCum)\n                            console.log(\"cKg  :   \" + cKg )\n                            console.log(\"cBags  :   \" + cBags)\n                            console.log(\"sCum   :   \" + sCum)\n                            console.log(\"sCFT   :    \" + sCFT )\n                            console.log(\"mortar of Plaster  :    \" + (Hplaster * Wplaster * currentPlasterValue) )\n\n                            document.getElementById(\"cementCount\").value = cBags\n                            document.getElementById(\"sandCount\").value = sCFT\n                            document.getElementById(\"cementKg\").value = cKg\n\n                            var brickAreaTotal = Math.abs(heightValue) * Math.abs((estimatess1total  + estimatess2total) * 144 ) * strokeWidth\n\n                            var nuOfBrickTotal = brickAreaTotal / 166.25\n\n                            var mortarTotal = nuOfBrickTotal * 0.10\n                            \n                            nuOfBrickTotal = nuOfBrickTotal - mortarTotal\n                            \n                            var wasteTotal = nuOfBrickTotal * 0.04\n\n                            var getTotalBrickTotal = nuOfBrickTotal + wasteTotal;\n                        \n                            var totalBricksTotal = Math.abs(heightValue) * Math.abs((((estimatess1total *2 ) + (estimatess2total*2))*144)/32)\n                            // var totalBricks = Math.abs((estimatess1 * 2 )+( estimatess2*2)) \n                            \n                            console.log(\"arr length   :   \" + myArr.length)\n                            console.log(\"Height  :   \" + heightValue)\n                            console.log(\"ElementStrokeWidth   :   \" + strokeWidth)\n                            console.log(\"estimate1   :    \" + estimatess1total * 2 )\n                            console.log(\"estimate2   :    \" + estimatess2total * 2 )\n                            console.log(\"Total Bricks  :  \" + getTotalBrick )\n                            console.log(\"mortar of Bricks  :    \" + mortar * 0.0254 * 0.012 )\n\n                            document.getElementById(\"bricksCountTotal\").value = getTotalBrickTotal ;\n\n                            var HplasterTotal = Math.abs(heightValue * 0.3048)\n\n                            var WplasterTotal = Math.abs(estimatess1total * 0.3048 + estimatess2total  * 0.3048)\n\n                            var DplasterTotal = Math.abs(strokeWidth * 0.0254)\n\n                            var totalPlasterValue = plasterValue * 0.0254\n\n                            var plasterVolumeTotal =   HplasterTotal *  WplasterTotal * totalPlasterValue\n\n                            var plasterDryVolumeTotal = plasterVolumeTotal * 1.35\n\n                            var cRatioTotal = Math.abs(ccRatio) \n                            var sRatioTotal = Math.abs(ssRatio)\n\n                            var tRatioTotal = Math.abs(cRatioTotal + sRatioTotal)\n\n                            var cCumTotal = ( cRatioTotal / tRatioTotal ) * plasterDryVolumeTotal\n\n                            var cKgTotal = cCumTotal * 1440\n\n                            var cBagsTotal = cKgTotal / 50\n\n                            var sCumTotal = (sRatioTotal / tRatioTotal) * plasterDryVolumeTotal\n                            \n                            var sCFTTotal = sCumTotal * 35.31\n\n                            console.log(\"H  :   \" +  Hplaster)\n                            console.log(\"W  :   \" +  Wplaster)\n                            console.log(\"D  :   \" + totalPlasterValue)\n                            \n                            console.log(\"plasterVolumeTotal  :   \" + plasterVolumeTotal )\n                            console.log(\"plasterDryVolumeTotal  :   \" + plasterDryVolumeTotal)\n                            console.log(\"cRatioTotal   :   \" + cRatioTotal)\n                            console.log(\"sRatioTotal   :    \" + sRatioTotal )\n                            console.log(\"tRatioTotal   :    \" + tRatioTotal )\n                            console.log(\"cCumTotal  :  \" + cCumTotal)\n                            console.log(\"cKgTotal  :   \" + cKgTotal )\n                            console.log(\"cBagsTotal  :   \" + cBagsTotal)\n                            console.log(\"sCumTotal   :   \" + sCumTotal)\n                            console.log(\"sCFTTotal   :    \" + sCFTTotal )\n                            console.log(\"mortar of Plaster Total :    \" + (HplasterTotal * WplasterTotal * totalPlasterValue) )\n\n                            document.getElementById(\"cementCountTotal\").value = cBagsTotal\n                            document.getElementById(\"sandCountTotal\").value = sCFTTotal\n                            document.getElementById(\"cementKgTotal\").value = cKgTotal\n\n                            var myArea = document.getElementById(\"cArea\").value;\n                            console.log(\"Area 1 : : : \" + myArea)\n                            console.log(\"Area 2 : : : \" +c2Area)\n\n                            var cBagCost =  (cBags * parseFloat(price.replace( /\\D/g, \"\")))\n                            var sCFTCost =  (sCFT * sandValue)\n                            var brickCost = (getTotalBrick * bricksValue)\n\n                            var cBagCostTotal = (cBagsTotal * parseFloat(price.replace( /\\D/g, \"\")))\n                            var sCFTCostTotal =  (sCFTTotal * sandValue)\n                            var brickCostTotal = (getTotalBrickTotal * bricksValue)\n\n                            console.log(\"cBagCostTotal  \" +cBagCostTotal )\n                            console.log(\"sCFTCostTotal  \" +sCFTCostTotal )\n                            console.log(\"brickCostTotal \" +brickCostTotal )\n\n                            document.getElementById(\"cAreaMat\").value = (cArea * 150) + cBagCost + sCFTCost + brickCost\n                            document.getElementById(\"c2AreaMat\").value = (c2Area * 150) + cBagCostTotal + sCFTCostTotal + brickCostTotal\n\n                        }}>Apply</Button>\n\n                ].map((text, index) => (\n                        <ListItem button key={text}>\n                            <ListItemIcon>{index  === 0 ? <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={surface}/> :\n                                            index === 1 ? <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={steel}/> :\n                                            index === 2 ? <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={brick}/> :\n                                            <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={sand}/>  }</ListItemIcon>\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ))}\n                </List>\n\n\n\n                            \n                }\n        \n        \n            </div>\n        );\n\n        export const list2 = (anchor) => (\n            <div\n              className={clsx(useStyles.list, {\n                [useStyles.fullList]: anchor === 'top' || anchor === 'bottom',\n              })}\n              role=\"presentation\"\n              onClick={toggleDrawer2(anchor, false)}\n              onKeyDown={toggleDrawer2(anchor, false)}\n            >\n              <List>\n                {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n                  <ListItem button key={text}>\n                    <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                    <ListItemText primary={text} />\n                  </ListItem>\n                ))}\n              </List>\n              <Divider />\n              <List>\n                {['All mail', 'Trash', 'Spam'].map((text, index) => (\n                  <ListItem button key={text}>\n                    <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                    <ListItemText primary={text} />\n                  </ListItem>\n                ))}\n              </List>\n            </div>\n          );\n        \n        export const distance = (a,b) => Math.sqrt(Math.pow(a.x - b.x , 2) + Math.pow(a.y - b.y, 2));\n        \n        export const getElementAtPosition = (x,y, elements) => {\n            return elements.find(element => isWithinElement(x,y,element));\n        }\n\n\n        function getWindowDimensions() {\n            const width = window.innerWidth;\n            return width\n            \n          }\n        \n        export const handleDrawerOpen = () => {\n            setOpen(true);\n        };\n        \n        export const handleDrawerClose = () => {\n            setOpen(false);\n        }; \n        \n        export const handleError = () => {\n            setError(false);\n        }; \n        \n        \n            // const isWithinCanvas = (x,y, element) => {\n            //     const {x1, y1, x2, y2} = element;\n            //\n            //         const minX = Math.min(x1, x2);\n            //         const maxX = Math.max(x1, x2);\n            //         const minY = Math.min(y1, y2);\n            //         const maxy = Math.max(y1, y2);\n            //         return x >= minX && x <= maxX && y <= maxy && y >= minY;\n            //\n            // }\n\n\n            // export function putCanvs() {\n\n\n            //     // for (let item = 0; item < 20; item++) {\n            //     //     if (count !== 0 && count%5 === 0) {\n            //     //         document.write(\" ||| \");\n            //     //     }\n\n\n            //     // canv.setAttribute('width', window.innerWidth);\n            //     if (widthh !== null) {\n\n            //         item = item + 1;\n            //         totalLayer = totalLayer + 1;\n\n\n            //         const texta = document.createElement(\"input\");\n\n            //         texta.setAttribute('id', 'itemNo'\n            //         + item\n            //         );\n\n\n            //         texta.textContent = '111';\n\n            //         canv = document.createElement(\"canvas\");\n\n            //         canv.width = canvas.width;\n            //         // canv.setAttribute('height', window.innerHeight * heightt/100);\n            //         canv.height = canvas.height;\n            //         canv.setAttribute('id', 'canv'\n            //         + item\n            //         );\n\n\n\n            //         alert(totalLayer);\n            //         canv.style.background = \"#c0c6c5\";\n\n            //         canv.style.border = \"5px solid darkslategrey\";\n\n            //         canv.style.margin = \"14.4%\";\n\n            //         document.body.appendChild(canv);\n\n            //         canv.addEventListener('mousedown' , handleMouseDown , true);\n            //         canv.addEventListener('mouseup' , handleMouseUp , true);\n            //         canv.addEventListener('mousemove' , handleMouseMove , true);\n\n            //         canv.onmousedown = handleMouseDown;\n            //         canv.onmouseup = handleMouseUp;\n            //         canv.onmousemove = handleMouseMove;\n            //         const C = document.getElementById(canv.getAttribute('id'));\n            //         if (C.getContext) {\n            //             if (C.getContext) {\n            //                 makePlot(C);\n            //             }\n            //         }\n            //     }\n            //     else {\n            //         alert(\"Please Enter Width and Length First\");\n            //         setOpen(true);\n            //     }\n            // }\n\n            // function makePlot(elem) {\n\n            //     const ctx = elem.getContext(\"2d\");\n            //     ctx.fillStyle   = '#00f';\n            //     ctx.strokeStyle = 'black';\n            //     ctx.lineWidth   = 5;\n            //     ctx.borderBlock = 1;\n\n            // }\n            export function saveLayer(){\n                \n\n                console.log(elements)\n\n                setMyElements(elements)\n\n                // myVar[totalLayer] = elements\n\n                myVar[item] = elements\n\n                console.log(myElements)\n\n            }\n\n            function addLayer(){\n                \n\n                console.log(elements)\n\n                setMyElements(elements)\n\n                myVar[totalLayer] = elements\n\n                console.log(myElements)\n\n                setElements([])\n\n                item = item + 1;\n                totalLayer = totalLayer + 1;\n\n                // alert(\"Your Current Layer: \" + totalLayer);\n                // alert(\"Your Current Element: \" + item);\n\n            }\n\n            function App() \n            \n            {\n\n                [tool, setTool] = useState(\"selection\");\n                [elements, setElements] = useState([]);\n                [action , setAction] = useState('none');\n                [canvWidth, setCanvWidth] = useState(null);\n                [canvHeight, setCanvHeight] = useState(null);\n                [myArr , setMyArr] = useState([]);\n                [ElementWidth , setElementWidth] = useState(null);\n                [ElementLength , setElementLength] = useState(null);\n                [ElementStrokeWidth , setElementStrokeWidth] = useState(null);\n                [selectedElement , setSelectedElement] = useState(null);\n                [error , setError] = useState(false);\n                [price , setPrice] = useState(null);\n                [title , setTitle] = useState(null);\n                [image , setImage] = useState(null);\n                [price2 , setPrice2] = useState(null);\n                [title2 , setTitle2] = useState(null);\n                [image2 , setImage2] = useState(null);\n                [price3 , setPrice3] = useState(null);\n                [title3 , setTitle3] = useState(null);\n                [image3 , setImage3] = useState(null);\n                [steelPrice , setSteelPrice] = useState(null);\n                [steelTitle , setSteelTitle] = useState(null);\n                [steelImage , setSteelImage] = useState(null);\n                [steelPrice2 , setSteelPrice2] = useState(null);\n                [steelTitle2 , setSteelTitle2] = useState(null);\n                [steelImage2 , setSteelImage2] = useState(null);\n                [steelPrice3 , setSteelPrice3] = useState(null);\n                [steelTitle3 , setSteelTitle3] = useState(null);\n                [steelImage3 , setSteelImage3] = useState(null);\n                [loading , setLoading] = useState(false);\n                [value, setValue] = React.useState(null);\n                [steelValue, setSteelValue] = React.useState(null);\n                [bricksValue, setBricksValue] = React.useState(null);\n                [sandValue, setSandValue] = React.useState(null);\n                [heightValue, setHeightValue] = React.useState(null);\n                [ccRatio, setCcRatio] = React.useState(null);\n                [ssRatio, setSsRatio] = React.useState(null);\n                [plasterValue, setPlasterValue] = React.useState(null);\n                [myElements , setMyElements] = useState([]);\n                [myVar , setMyVar] = useState([]);\n                [estimateArr , setEstimateArr] = React.useState([]);\n                [wall , setWall] = React.useState(null);\n                [bgColor , setBGColor] = React.useState(null);\n                [customCement , setCustomCement] = React.useState(null);\n                [customSteel , setCustomSteel ] = React.useState(null);\n                [customBricks , setCustomBricks ] = React.useState(null);\n                [customSand , setCustomSand ] = React.useState(null);\n                [customHeight , setCustomHeight ] = React.useState(null);\n                [customCRatio , setCustomCRatio ] = React.useState(null);\n                [customSRatio , setCustomSRatio ] = React.useState(null);\n                [customPlaster , setCustomPlaster ] = React.useState(null);\n\n                let [name , setName] = useState(undefined);\n                const [id, setId] = useState(null);\n                [cArea , setCArea] = useState(null);\n                [c2Area , setC2Area] = useState(null);\n\n                const [devWidth, setDevWidth] = useState(null);\n                const [devHeight, setDevHeight] = useState(null);\n\n                const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n                const [isMobile, setMobile] = useState(0);\n\n                const [overflow, setOverflow] = useState(\"hidden\")\n\n                // const [widthh , setWidthh] = useState(750);\n                \n                useEffect(() => {\n\n                    setWindowDimensions(getWindowDimensions());\n\n                    if(windowDimensions < 1440 && windowDimensions >= 1200 ){ \n                        setMobile(1);\n                        console.log(isMobile)\n                    }\n                    else if(windowDimensions < 1200 && windowDimensions >= 700){ \n                        setMobile(2);\n                        console.log(isMobile)\n                        \n                    }\n                    else if(windowDimensions < 700){\n                        setMobile(3);\n                        console.log(isMobile)\n\n                    }\n                    \n                    if(canvWidth > windowDimensions){\n                            setOverflow(\"visible\")\n                    }\n                \n                })\n\n                const getData = () => {\n                    \n                    if(sketchData)\n                    {\n                        setId( sketchData.id )\n                        setName( sketchData.name )\n                        alert(sketchData.width)\n                        widthh = sketchData.width \n                        // setWidthh( sketchData.width ) \n                        heightt = sketchData.height\n                        totalLayer = sketchData.layer\n                        setMyVar( JSON.parse(sketchData.sketch))\n\n                        canvas = document.getElementById(\"canvas\");\n                        setCanvWidth( 1536 * widthh/100 );\n                        setCanvHeight(1536 * heightt/100);\n                        canvas.width = canvWidth ;\n                        canvas.height = canvHeight;\n\n                        marla = (widthh * heightt)/270;\n\n                        document.getElementById(\"marla\").value = marla ;\n                        document.getElementById(\"height\").value = heightt;\n                        document.getElementById(\"width\").value = widthh;\n    \n                    }\n    \n                    else{\n\n                        alert(\"No Data Found\")\n    \n                    }\n                  }\n\n                \n\n\n                // let canv = null;\n    \n                // }\n\n                useLayoutEffect(() => {\n\n                    if(widthh !== null)\n                    {\n\n                        canvas = document.getElementById('canvas');\n                        const context = canvas.getContext('2d');\n                        context.clearRect(0, 0, canvas.width, canvas.height);\n\n                        const roughCanvas = rough.canvas(canvas);\n                        elements.forEach(({roughElement}) => roughCanvas.draw(roughElement));\n\n\n                        // const roughCanvas222 = rough.canvas(canvas2);\n                        // elements.forEach(({roughElement}) => roughCanvas222.draw(roughElement));\n                        //\n                        //      canv = document.getElementById('canv' + 1);\n                        //     const ctx = canv.getContext('2d');\n                        //     ctx.clearRect(0,0,canvas.width, canvas.height);\n                        //\n                        //     const roughCanvas2 = rough.canvas(canv);\n                        //     elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n\n\n                        // for(let i = 1 ; i <= item ; i ++) {\n                        //     const cnv = document.getElementById('canv' + item);\n                        //     const ctx = cnv.getContext('2d');\n\n                        //     ctx.clearRect(0,0,cnv.width, cnv.height);\n                        //     const roughCanvas2 = rough.canvas(cnv);\n                        //     // let element+item;\n                        //     // let\n                        //     elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n                        // }\n\n                    }\n                            \n                    else {\n                        alert(\"Please Enter Width and Length First\");\n                        setOpen(true);\n                    }\n                }\n                    // ,\n                    // [\n                    //     elements , canvas , item\n                    // ]\n    \n                    );\n\n                    function handleWrite(){\n\n                        const context = canvas.getContext('2d');\n\n                        const wrt = document.getElementById(\"write\").value;\n                        context.fillStyle = \"white\";\n                        context.font = \"bold 16px Arial\";\n                        context.fillText(wrt , (canvas.width / 2) - 17, (canvas.height / 2) + 8);\n\n                    }\n\n                    const classes = useStyles();\n                    const theme = useTheme();\n                    [open, setOpen] = React.useState(false);\n                    \n                    [state, setState] = React.useState({\n                        bottom: false,\n           \n                    });\n\n                    [state2, setState2] = React.useState({\n                        // top: false,\n                        left: false,\n                        // bottom: false,\n                        // right: false,\n                      });\n\n                    TabPanel.propTypes = {\n                        children: PropTypes.node,\n                        index: PropTypes.any.isRequired,\n                        value: PropTypes.any.isRequired,\n                    };\n\n                    const handleSubmit = () => {\n                        heightt = document.getElementById(\"height\").value;\n                        widthh = document.getElementById(\"width\").value;\n                        alert(\" Length  \" + heightt + \"   width  \" + widthh + \"   was submitted\");\n                        canvas = document.getElementById(\"canvas\");\n                        setCanvWidth( 1536 * widthh/100 );\n                        setCanvHeight(1536 * heightt/100);\n                        canvas.width = canvWidth ;\n                        canvas.height = canvHeight;\n\n                        marla = (widthh * heightt)/270;\n\n                        document.getElementById(\"marla\").value = marla ;\n\n                    }\n\n\n\n                    const handleCalculate = () => {\n\n                        const totalArea = widthh * heightt;\n                        const enteredArea = document.getElementById(\"area\").value ;\n                        let myElement = 0;\n\n                        \n                        const totalCost = totalArea * 150;\n                        const cost = enteredArea * 150;\n                        let myJs = JSON.stringify(elements);\n                        setMyArr(JSON.parse(myJs))\n                        let estimatess1 = 0;\n                        let estimatess2 = 0;\n\n\n\n                        for(var i = 0; i < myArr.length ; i++)\n                        {\n                            // console.log( myArr[i].type);\n                            // console.log( myArr[i].x1);\n                            // console.log( myArr[i].x2);\n                            // console.log( myArr[i].y2);\n                            // console.log( myArr[i].y1);\n                            // console.log( (myArr[i].x2-myArr[i].x1)  / 15.36);\n                            // console.log( (myArr[i].y2-myArr[i].y1)  / 15.36);\n                            \n                            estimatess1 = estimatess1 + (Math.abs((myArr[i].x2-myArr[i].x1))  / 15.36);\n                            estimatess2 = estimatess2 + (Math.abs((myArr[i].y2-myArr[i].y1))  / 15.36);\n                           \n                            // myElement ++ ;\n\n                        }\n\n                        if(marla < ((estimatess1*estimatess2) / 270))\n                        {\n                            console.log(\"Total Area Created Feet  \" + (widthh*heightt));\n                            console.log(\"Total Area Created Marla \" + marla);\n                        }\n                        else{\n                        console.log(\"Total Area Created Feet  \" + (estimatess1*estimatess2));\n\n                        \n                        console.log(\"Total Area Created Marla \" + ((estimatess1*estimatess2) / 270)); \n                        }\n                        document.getElementById(\"myArea\").value = totalCost ;\n                        document.getElementById(\"eArea\").value = cost ;\n\n                        if(marla < ((estimatess1*estimatess2) / 270))\n                        {\n                            document.getElementById(\"cArea\").value =  (widthh*heightt) * 150 ;\n                            setCArea(widthh*heightt);\n                        }\n                        else{\n                            document.getElementById(\"cArea\").value =  (estimatess1*estimatess2) * 150 ;\n                            setCArea(estimatess1*estimatess2)\n                        }\n                        \n\n                        // console.log(value)\n\n                        \n\n                    }\n\n                    const handleCalculate2 = () => {\n\n                        alert(\"We are calculating labour cost at the price of 150 RS per feet\")\n                        \n                        saveLayer()\n\n                        const totalArea = widthh * heightt;\n                        const enteredArea = document.getElementById(\"area\").value ;\n                        let myElement = 0;\n\n                        \n                        const totalCost = totalArea * 150;\n                        const cost = enteredArea * 150;\n                        let myJs = JSON.stringify(elements);\n                        setMyArr(JSON.parse(myJs))\n                        let estimatess1 = 0;\n                        let estimatess2 = 0;\n\n                        let estimatess1total = 0;\n                        let estimatess2total = 0;\n\n                        console.log(myVar.length)\n\n                        for(var k = 0; k < myVar.length; k++) {\n\n                            var Data = myVar[k];\n\n                            console.log(Data);\n\n                            for(var m = 0; m < Data.length; m++) {\n\n                                // console.log( \"Type : \" + Data[m].type);\n                                // console.log( \"x1 : \" + Data[m].x1);\n                                // console.log( \"x2 : \" + Data[m].x2);\n                                // console.log( \"y2 : \" + Data[m].y2);\n                                // console.log( \"y1 : \" + Data[m].y1);\n                                // console.log( (Data[m].x2-Data[m].x1)  / 15.36);\n                                // console.log( (Data[m].y2-Data[m].y1)  / 15.36);\n\n                                estimatess1total = estimatess1total + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\n                                estimatess2total = estimatess2total + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\n\n                            }\n\n                        }\n\n\n\n\n                        for(var i = 0; i < myArr.length ; i++)\n                        {\n                            // console.log( myArr[i].type);\n                            // console.log( myArr[i].x1);\n                            // console.log( myArr[i].x2);\n                            // console.log( myArr[i].y2);\n                            // console.log( myArr[i].y1);\n                            // console.log( (myArr[i].x2-myArr[i].x1)  / 15.36);\n                            // console.log( (myArr[i].y2-myArr[i].y1)  / 15.36);\n                            \n                            estimatess1 = estimatess1 + (Math.abs((myArr[i].x2-myArr[i].x1))  / 15.36);\n                            estimatess2 = estimatess2 + (Math.abs((myArr[i].y2-myArr[i].y1))  / 15.36);\n                           \n                            // myElement ++ ;\n\n                        }\n\n                        if(marla < ((estimatess1*estimatess2) / 270))\n                        {\n                            console.log(\"Total Area Created Feet  \" + (widthh*heightt));\n                            console.log(\"Total Area Created Marla \" + marla);\n                        }\n                        else{\n                        console.log(\"Total Area Created Feet  \" + (estimatess1*estimatess2));\n\n                        \n                        console.log(\"Total Area Created Marla \" + ((estimatess1*estimatess2) / 270)); \n                        }\n                        document.getElementById(\"myArea\").value = totalCost ;\n                        document.getElementById(\"eArea\").value = cost ;\n\n                        var totalEstCost = (estimatess1total*estimatess2total)\n\n                        document.getElementById(\"c2Area\").value =   totalEstCost * 150 ;\n                        setC2Area(estimatess1total*estimatess2total)\n                        \n                        if(marla < ((estimatess1*estimatess2) / 270))\n                        {\n                            var EstCost =  (widthh*heightt) \n                            document.getElementById(\"cArea\").value = EstCost * 150 ;\n                            setCArea(widthh*heightt);\n                        }\n                        else{\n                            var EstCost = (estimatess1*estimatess2)\n                            document.getElementById(\"cArea\").value =   EstCost * 150 ;\n                            setCArea(estimatess1*estimatess2)\n                        }\n                        \n                        \n\n                        // console.log(value)\n\n                        \n\n                    }\n\n\n                    const [anchorEl, setAnchorEl] = React.useState(null);\n                    const handleClick = (event) => {\n\n                        setAnchorEl(event.currentTarget);\n\n                    };\n\n                    const handleClose = () => {\n                        setAnchorEl(null);\n                    };\n                    \n                    const [view, setView] = React.useState('list');\n                    const handleChange = (event, nextView) => {\n                        setView(nextView);\n                    };\n\n\n\n\n                    let getJson = () => {\n                        let myJs = JSON.stringify(elements);\n                        setMyArr(JSON.parse(myJs))\n                        console.log( myArr );\n                    }\n                    \n                    let lessItem = () => {\n                        if(myVar[totalLayer] === undefined)\n                            {\n                                saveLayer()\n                            }\n                        if(item > 0) {\n                            item = item - 1;\n                            setElements(myVar[item])\n                            // myVar[item] = elements\n                            // saveLayer(item)\n                            \n                        }\n                        else {\n                            toast.success(\"Already on First\", {\n                                position: \"top-right\",\n                                autoClose: 5000,\n                                hideProgressBar: false,\n                                closeOnClick: true,\n                                pauseOnHover: true,\n                                draggable: true,\n                                progress: undefined,\n                            });\n                    }}\n\n                    let upItem = () => {\n                        if(item < totalLayer){\n                            item = item + 1;\n                            setElements(myVar[item])\n                            // myVar[item] = elements\n                            // saveLayer(item)\n                            \n                        }\n                        else {\n                            toast.success(\"Already on Last\", {\n                                position: \"top-right\",\n                                autoClose: 5000,\n                                hideProgressBar: false,\n                                closeOnClick: true,\n                                pauseOnHover: true,\n                                draggable: true,\n                                progress: undefined,\n                            });\n                        }\n                    }\n\n                    // var canvas = document.getElementById(\"canvas\"),\n                    //     ctx = canvas.getContext(\"2d\");\n                    // var b = ball[i];\n                    // b.draw(b.x, b.y, b.color ,b.radius);\n\n                    \n                    \n                    \n                    \n\n\n\n\n\n\n\n\n\n\n\n\n                    return (\n                        <div style={{overflow: overflow}}>\n\n                            <Toolbar>\n                                <Typography variant=\"h6\" noWrap className={classes.title} style={{color : \"#4E4141\"}}>\n\n                                    {['bottom'].map((anchor) => (\n                                        <React.Fragment key={anchor}>\n                                \n                                            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                                            <div className={classes.drawerHeader}>\n                                                <IconButton onClick={()=>{setState(\"bottom\",false)}}>\n                                                {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ExpandMore />}\n                                            </IconButton>\n                                            </div>\n\n                                            <Divider />\n                                                {list(anchor)}\n                                            </Drawer>\n                                        </React.Fragment>\n                                    ))}\n                                    {['right'].map((anchor) => (\n                                        <React.Fragment key={anchor}>\n                                \n                                            <Drawer anchor={anchor} open={state2[anchor]} onClose={toggleDrawer2(anchor, false)}>\n                                            <div className={classes.drawerHeader}>\n                                                <IconButton onClick={()=>{setState2(\"right\",false)}}>\n                                                {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ExpandMore />}\n                                            </IconButton>\n                                            </div>\n\n                                            <Divider />\n                                                {list2(anchor)}\n                                            </Drawer>\n                                        </React.Fragment>\n                                    ))}\n\n                                </Typography>\n                    \n                            </Toolbar>\n\n                            <div>\n      \n    </div>\n\n    {/* {['right'].map((anchor) => (\n                                        <React.Fragment key={anchor}>\n                                        <Button onClick={toggleDrawer2(anchor, true)}>{anchor}</Button>\n                                        <Drawer anchor={anchor} open={state2[anchor]} onClose={toggleDrawer2(anchor, false)}>\n                                            {list2(anchor)}\n                                        </Drawer>\n                                        </React.Fragment>\n                                    ))} */}\n\n\n            \n                            <Drawer\n                                className={classes.drawer}\n                                variant=\"persistent\"\n                                anchor=\"right\"\n                                open={open}\n                                classes={{\n                                    paper: classes.drawerPaper,\n                                }}\n                                >\n                                <div className={classes.drawerHeader}>\n                                    <IconButton onClick={handleDrawerClose}>\n                                        {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n                                    </IconButton>\n                                </div>\n\n                               <Divider />\n                                <List>\n                                    {[<div>\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Width (feet)</InputLabel>\n                                            <Input\n                                                id=\"width\"\n                                                type=\"number\"\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                        <SwapHorizontalCircleIcon />\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                                \n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Length (feet)</InputLabel>\n\n                                            <Input\n                                                id=\"height\"\n                                                type=\"number\"\n                                                startAdornment={\n                                                <InputAdornment position=\"start\">\n                                                    <SwapVerticalCircleIcon />\n                                                </InputAdornment>\n                                                }\n                                            />\n                                            <Button value=\"Submit\" onClick={handleSubmit}>\n                                                Submit\n                                            </Button>\n\n                                    </div>, <div>\n\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Your current Marla is : </InputLabel>\n                                            <Input\n                                                id=\"marla\"\n                                                type=\"number\"\n                                                step=\"any\"\n                                                readOnly\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                    </InputAdornment>\n                                                }\n                                            />\n\n                                    </div>,\n\n                                    <div>\n\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Text </InputLabel>\n                                            <Input\n\n                                                id=\"write\"\n                                                type=\"text\"\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                    </InputAdornment>\n                                                }\n                                            />\n\n                                            <Button onClick={handleWrite} >Write</Button>\n\n                                    </div>, <div>\n\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Area (Sq. feet)</InputLabel>\n                                            <Input\n                                                id=\"area\"\n                                                type=\"number\"\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                        <SwapHorizontalCircleIcon /> <h2>*</h2>\n                                                        <SwapVerticalCircleIcon />\n                                                    </InputAdornment>\n                                                }\n                                            />\n\n                                        \n\n                                    </div>,\n\n                                    <Button value=\"calculate\" onClick={scrapMe}>\n                                            Select Material\n                                        </Button>,\n\n                                        \n\n                                    <Button id = \"est\" \n                                        value=\"calculate\" \n                                        onClick={handleCalculate2}>\n                                        Estimate\n                                    </Button>\n,\n<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Bricks Count for Current Layer is : </InputLabel>\n    <Input\n        id=\"bricksCount\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,\n<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Bricks Count is : </InputLabel>\n    <Input\n        id=\"bricksCountTotal\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,\n\n<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement for this layer (Bags) Count is : </InputLabel>\n    <Input\n        id=\"cementCount\"\n        type=\"number\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement (Bags) Count is : </InputLabel>\n    <Input\n        id=\"cementCountTotal\"\n        type=\"number\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,\n\n<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Sand Count for this Layer (cubic ft) is : </InputLabel>\n    <Input\n        id=\"sandCount\"\n        type=\"number\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,\n<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Sand Count (cubic ft) is : </InputLabel>\n    <Input\n        id=\"sandCountTotal\"\n        type=\"number\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,\n<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement Count for this Layer ( Kg ) is : </InputLabel>\n    <Input\n        id=\"cementKg\"\n        type=\"number\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,<div>\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement Count ( Kg ) is : </InputLabel>\n    <Input\n        id=\"cementKgTotal\"\n        type=\"number\"\n        step=\"any\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n            </InputAdornment>\n        }\n    />\n\n</div>,\n                                        \n\n                                    ].map((text, index) => (\n                                        <ListItem button key={text}>\n                                            <ListItemIcon>{index % 2 === 0 ? < BuildIcon /> : <LandscapeIcon />}</ListItemIcon>\n                                            <ListItemText primary={text} />\n                                        </ListItem>\n                                    ))}\n\n                                </List>\n\n                                <List>\n\n                                    {[<div>\n\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Total Labour Cost of one floor area </InputLabel>\n\n                                            <Input\n                                                id=\"myArea\"\n                                                type=\"number\"\n                                                step=\"any\"\n                                                readOnly\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                    </InputAdornment>\n                                                }\n                        \n                                            />\n                                    </div>, <div>\n\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Total Cost of Entered Area </InputLabel>\n\n                                            <Input\n                                                id=\"eArea\"\n                                                type=\"number\"\n                                                step=\"any\"\n                                                readOnly\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                    </InputAdornment>\n                                                }\n                                            />\n                                     </div>, \n                                    <div>\n                                        <InputLabel \n                                        hidden\n                                        htmlFor=\"input-with-icon-adornment\">Total Labour Cost of Current Layer With Furnishing </InputLabel>\n                                            <Input\n                                                hidden\n                                                id=\"cArea\"\n                                                // value = {cArea}\n                                                step=\"any\"\n                                                readOnly\n                                                startAdornment={\n                                                    <InputAdornment position=\"start\">\n                                                    </InputAdornment>\n                                                }\n                                            />\n\n                                    </div>,\n                                    <div>\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">Total Labour Cost </InputLabel>\n                                        <Input\n                                            id=\"c2Area\"\n                                            // value = {cArea}\n                                            step=\"any\"\n                                            readOnly\n                                            startAdornment={\n                                                <InputAdornment position=\"start\">\n                                                </InputAdornment>\n                                            }\n                                        />\n\n                                </div>,\n                                    <div>\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\"> Total Material Cost (Without Steel)  </InputLabel>\n                                        <Input\n                                            id=\"cAreaMat\"\n                                            // value = {cArea}\n                                            step=\"any\"\n                                            readOnly\n                                            startAdornment={\n                                                <InputAdornment position=\"start\">\n                                                </InputAdornment>\n                                            }\n                                        />\n\n                                </div>,\n                                    <div>\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">Total Cost (Without Steel)</InputLabel>\n                                        <Input\n                                            id=\"c2AreaMat\"\n                                            // value = {cArea}\n                                            step=\"any\"\n                                            readOnly\n                                            startAdornment={\n                                                <InputAdornment position=\"start\">\n                                                </InputAdornment>\n                                            }\n                                        />\n\n                                </div>].map((text, index) => (\n\n                                        <ListItem button key={text}>\n                                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                                            <ListItemText primary={text} />\n                                        </ListItem>\n                                    ))}\n                                </List>\n                            </Drawer>\n\n\n{isMobile === 1 ? (<div className = \"row\">\n                                    <div className = \"col-xs-12\">\n\n                                    \n                                \n                                    <div className={classes.root}>\n                                        <ButtonGroup\n                                        \n                                            orientation=\"vertical\"\n                                            value={view}\n                                            exclusive\n                                            onChange={handleChange}\n                                            className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            >\n\n                                            <IconButton\n                                                color=\"#ffffff\"\n                                                aria-label=\"open drawer\"\n                                                edge=\"end\"\n                                                onClick={handleDrawerOpen}\n                                                className={clsx(open && classes.hide)}\n                                                className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            size = \"sm\"\n                                                >\n                                            \n                                               <MenuIcon />\n                                            </IconButton>\n\n                                            <input type=\"color\" id=\"c\" onChange={(e) => {\n                                                                         setBGColor(e.target.value);\n                                                                        }} \n                                                    style = {{\n                                                    position: \"absolute\",\n                                                    left: \"-10000px\",\n                                                    top: \" auto\",\n                                                    width: \"1px\",\n                                                    height: \"1px\",\n                                                    overflow: \"hidden\"\n                                                  \n                                            }}/>\n                                           \n\n                                            <Button\n                                            size = \"sm\"\n                                            id = \"colors\"\n                                            className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            onClick={ ()=> { \n\n                                                document.getElementById(\"c\").focus();\n                                                \n                                                document.getElementById(\"c\").click();\n                                                \n                                            }}\n                                            title = \"Set Background Color\">\n\n                                                    <FontAwesomeIcon icon={faPalette} />\n                                                   \n                                                \n                                                \n                                            </Button>\n\n                                            {UserServices.isLoggedin ?\n\n                                                (<>\n\n                                            <Button \n                                            size = \"sm\"\n                                            className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            onClick={getData} title = \"Get Data\">\n\n                                                    <FontAwesomeIcon icon={faGetPocket} />\n                                                   \n                                                \n                                                \n                                            </Button>\n\n                                                <Button\n                                                size = \"sm\" title=\"save sketch on server\"  onClick={(e) => {\n\n                                                    saveLayer();\n\n                                                     name = prompt(\"Please Enter name of your Sketch\")\n                                                    if(name){\n                                                    UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\n                                                    .then((data) => {\n                                                        console.log(data);\n                                                        toast.success(data, {\n                                                            position: \"bottom-right\",\n                                                            autoClose: 5000,\n                                                            hideProgressBar: false,\n                                                            closeOnClick: true,\n                                                            pauseOnHover: true,\n                                                            draggable: true,\n                                                            progress: undefined,\n                                                        });\n                                                    })\n                                                    .catch((err) => {\n                                                        toast.error(err.response.data, {\n                                                            position: \"bottom-right\",\n                                                            autoClose: 5000,\n                                                            hideProgressBar: false,\n                                                            closeOnClick: true,\n                                                            pauseOnHover: true,\n                                                            draggable: true,\n                                                            progress: undefined,\n                                                        });\n                                                    });\n                                                }}} className = \"btn\"  \n                                                style={{backgroundColor:\"none\"}} >\n                                                \n                                                <FontAwesomeIcon icon={faSave} />\n                                                \n                                                </Button>\n                                                <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={HandleSave} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                                                </>) : \n                                                (<>\n                                                    <Button \n                                                        size = \"sm\"\n                                                        className = \"btn\"  \n                                                        style={{backgroundColor:\"none\"}} \n                                                        onClick={()=> {\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                                                position: \"bottom-right\",\n                                                                autoClose: 5000,\n                                                                hideProgressBar: false,\n                                                                closeOnClick: true,\n                                                                pauseOnHover: true,\n                                                                draggable: true,\n                                                                progress: undefined,\n                                                                    });\n                                                        }} title = \"Get Data\">\n                                \n                                                        <FontAwesomeIcon icon={faGetPocket} />\n                                                   \n                                                    </Button>\n                                \n                                                    <Button\n                                                        size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                                                position: \"bottom-right\",\n                                                                autoClose: 5000,\n                                                                hideProgressBar: false,\n                                                                closeOnClick: true,\n                                                                pauseOnHover: true,\n                                                                draggable: true,\n                                                                progress: undefined,\n                                                                    });\n                                                        }} className = \"btn\"  \n                                                            style={{backgroundColor:\"none\"}} >\n                                                \n                                                                <FontAwesomeIcon icon={faSave} />\n                                                \n                                                        </Button>\n                                                        <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={()=> {\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                        });\n            }} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                                                        </>)\n                                            }  \n\n\n                                            \n\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                onClick={addLayer} title = \"Add Layer\">\n\n\n                                                <FontAwesomeIcon icon={faPlus} />\n\n                                            </Button>\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"selection\" \n                                                onClick={() => setTool(\"selection\")}   \n                                                aria-label=\"left aligned\"\n                                                title = \"Selection\">\n                                                \n\n                                                <FontAwesomeIcon icon={faVoteYea} />\n\n                                            </Button>\n    \n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"selection\" \n                                                onClick={() => setTool(\"sizes\")}   \n                                                aria-label=\"left aligned\"\n                                                title = \"Get Size\">\n                                            \n\n                                                <FontAwesomeIcon icon={faJoget} />\n                                                \n                                            </Button>\n                                            \n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"resize\" \n                                                onClick={() => setTool(\"resize\")}\n                                                title = \"Re - Factor\">\n\n                                                <FontAwesomeIcon icon={faIndustry} />\n\n                                            </Button>\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"line\" \n                                                onClick={() => {\n                                                    var myWall = prompt(\"Please Enter Width of Wall\")\n                                                    setWall(myWall)\n                                                    \n                                                    setTool(\"line\")}}\n                                                title = \"Wall\">\n                                                \n                                                <FontAwesomeIcon icon={faGripLinesVertical} />\n\n\n                                            </Button>\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"rectangle\" \n                                                onClick={() => {setTool(\"rectangle\")\n                                                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                                                setWall(myWall)\n                                                                }}\n                                                title = \"Room \">\n                                               \n\n                                                <FontAwesomeIcon icon={faSquare} />\n\n\n                                            </Button>\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"ellipse\" \n                                                onClick={() => {\n                                                setTool(\"ellipse\")\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                                setWall(myWall)}}\n                                                title = \"Ellipse Shape Room\">\n                                                \n\n                                                <FontAwesomeIcon icon={faCircleNotch} />\n\n                                            </Button>\n                                    \n\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                aria-controls=\"simple-menu\" \n                                                aria-haspopup=\"true\" \n                                                onClick={handleClick}\n                                                title = \"Door\">\n                                                \n\n                                                <FontAwesomeIcon icon={faDoorOpen} />\n\n                                            </Button>\n \n                                                <Menu\n                                                    id=\"simple-menu\"\n                                                    anchorEl={anchorEl}\n                                                    keepMounted\n                                                    open={Boolean(anchorEl)}\n                                                    onClose={handleClose}\n                                                    >\n             \n                                                    <MenuItem \n                                                        id = \"arcL\" \n                                                        onClick={() => {setTool(\"arcL\")\n                                                                        setAnchorEl(null);}  }>\n                                                        Door Left\n                                                    </MenuItem>\n                                                    <MenuItem \n                                                        id = \"arcR\" \n                                                        onClick={() => {setTool(\"arcR\") \n                                                                        setAnchorEl(null);} }>\n                                                        Door Right\n                                                    </MenuItem>\n                                                    <MenuItem \n                                                        id = \"arcR\" \n                                                        onClick={() => {setTool(\"arcLB\") \n                                                                        setAnchorEl(null);} }>\n                                                        Door Left Bottom\n                                                    </MenuItem>\n                                                    <MenuItem \n                                                        id = \"arcR\" \n                                                        onClick={() => {setTool(\"arcRB\") \n                                                                        setAnchorEl(null);} }>\n                                                        Door Right Bottom\n                                                    </MenuItem>\n\n                                                </Menu>\n\n\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"circle\" \n                                                onClick={() => {setTool(\"circle\")\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                                setWall(myWall)}}\n                                                title = \"Circular Room\">\n                                              \n                                                <FontAwesomeIcon icon={faCircle} />\n                                            </Button>\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"eraser\" \n                                                onClick={() => setTool(\"eraser\")}\n                                                title = \"Eraser\">\n                                    \n\n                                                <FontAwesomeIcon icon={faEraser} />\n\n\n                                            </Button>\n                                            <Button\n                                            size = \"sm\"  className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                onClick={lessItem} \n                                                title = \"Go lower Floor\">\n                                                <ExpandLessIcon/> \n                                            </Button>\n\n                                            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\n\n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                onClick={upItem} \n                                                title = \"Go Upper Floor\">\n                                                <ExpandMoreIcon/>\n                                            </Button>\n                                            <Button \n                                                onClick={saveLayer} \n                                                className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                title = \"Save Layer\">\n                                                \n                                                <FontAwesomeIcon icon={faLayerGroup} />\n                                            </Button>\n                                            {/* <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            onClick={HandleSave} title= \"Download File\">\n                                            \n\n                                            <FontAwesomeIcon icon={faFileDownload} />\n\n\n                                            </Button> */}\n                                           \n                    \n                                            <Button\n                                            size = \"sm\" className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}}  onClick={()=>{\n                                                if(widthh === null)\n                                                {\n                                                    alert(\"Please Enter Width and Length First\")\n                                                }\n                                                else{\n                                                const canv = document.getElementById(\"canvas\");\n                                                const ctx = canv.getContext('2d')\n                                                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                                                setElements([]);\n                                                setMyVar([]);\n                                                item = 0;\n                                                totalLayer = 0;\n                                                }}} \n                                                title = \"Clear All\">\n                                                \n                                                <FontAwesomeIcon icon={faTrashAlt}/>\n                                            </Button>\n                    \n                                            \n                                        </ButtonGroup>\n\n                                    </div>\n                                    </div>\n                                    </div>):\n                                    \n    isMobile === 2 ? ( \n        <div className=\"container\" ><center>\n            <div className = \"row\">\n            <div className = \"col-xs-12\">\n\n    \n\n                <div className={classes.root}>\n                    <ButtonGroup\n        \n                            orientation=\"vertical\"\n                            value={view}\n                            exclusive\n                            onChange={handleChange}\n                            className = \"btn\"  \n                        >\n\n                    <IconButton\n                        color=\"#ffffff\"\n                        aria-label=\"open drawer\"\n                        edge=\"end\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(open && classes.hide)}\n                        className = \"btn\"  \n                        style={{backgroundColor:\"none\"}} \n                        size = \"sm\"\n                        >\n            \n                                <MenuIcon />\n                    </IconButton>\n\n                    <input type=\"color\" id=\"c\" onChange={(e) => {\n                                                                setBGColor(e.target.value);\n                                                                    }} \n                            style = {{\n                                position: \"absolute\",\n                                left: \"-10000px\",\n                                top: \" auto\",\n                                width: \"1px\",\n                                height: \"1px\",\n                                overflow: \"hidden\"\n                  \n                            }}/>\n           \n\n                    <Button\n                        size = \"sm\"\n                        id = \"colors\"\n                        className = \"btn\"  \n                        style={{backgroundColor:\"none\"}} \n                            onClick={ ()=> { \n\n                                document.getElementById(\"c\").focus();\n                \n                                document.getElementById(\"c\").click();\n                \n                            }}\n                        title = \"Set Background Color\">\n\n                        <FontAwesomeIcon icon={faPalette} />\n                   \n                </Button>\n\n                {UserServices.isLoggedin ?\n\n                    (<>\n\n                    <Button \n                        size = \"sm\"\n                        className = \"btn\"  \n                        style={{backgroundColor:\"none\"}} \n                        onClick={getData} title = \"Get Data\">\n\n                        <FontAwesomeIcon icon={faGetPocket} />\n                   \n                    </Button>\n\n                    <Button\n                        size = \"sm\" title=\"save sketch on server\"  onClick={(e) => {\n                        name = prompt(\"Please Enter name of your Sketch\")\n                            if(name){\n                                UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\n                                .then((data) => {\n                                console.log(data);\n                                toast.success(data, {\n                                position: \"bottom-right\",\n                                autoClose: 5000,\n                                hideProgressBar: false,\n                                closeOnClick: true,\n                                pauseOnHover: true,\n                                draggable: true,\n                                progress: undefined,\n                                    });\n                                })\n                                .catch((err) => {\n                                    toast.error(err.response.data, {\n                                    position: \"bottom-right\",\n                                    autoClose: 5000,\n                                    hideProgressBar: false,\n                                    closeOnClick: true,\n                                    pauseOnHover: true,\n                                    draggable: true,\n                                    progress: undefined,\n                                    });\n                                });\n                            }}} className = \"btn\"  \n                            style={{backgroundColor:\"none\"}} >\n                \n                                <FontAwesomeIcon icon={faSave} />\n                \n                        </Button>\n                        <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={HandleSave} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                    </>) : \n                        (<>\n                            <Button \n                                size = \"sm\"\n                                className = \"btn\"  \n                                style={{backgroundColor:\"none\"}} \n                                onClick={()=> {\n                                    toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                        position: \"bottom-right\",\n                                        autoClose: 5000,\n                                        hideProgressBar: false,\n                                        closeOnClick: true,\n                                        pauseOnHover: true,\n                                        draggable: true,\n                                        progress: undefined,\n                                            });\n                                }} title = \"Get Data\">\n        \n                                <FontAwesomeIcon icon={faGetPocket} />\n                           \n                            </Button>\n        \n                            <Button\n                                size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\n                                    toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                        position: \"bottom-right\",\n                                        autoClose: 5000,\n                                        hideProgressBar: false,\n                                        closeOnClick: true,\n                                        pauseOnHover: true,\n                                        draggable: true,\n                                        progress: undefined,\n                                            });\n                                }} className = \"btn\"  \n                                    style={{backgroundColor:\"none\"}} >\n                        \n                                        <FontAwesomeIcon icon={faSave} />\n                        \n                                </Button>\n                                <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={()=> {\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                        });\n            }} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                                </>\n                                )\n                    }  \n\n            \n\n            \n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                onClick={addLayer} title = \"Add Layer\">\n\n\n                <FontAwesomeIcon icon={faPlus} />\n\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"selection\" \n                onClick={() => setTool(\"selection\")}   \n                aria-label=\"left aligned\"\n                title = \"Selection\">\n                \n\n                <FontAwesomeIcon icon={faVoteYea} />\n\n            </Button>\n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"selection\" \n                onClick={() => setTool(\"sizes\")}   \n                aria-label=\"left aligned\"\n                title = \"Get Size\">\n            \n\n                <FontAwesomeIcon icon={faJoget} />\n                \n            </Button>\n            \n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"resize\" \n                onClick={() => setTool(\"resize\")}\n                title = \"Re - Factor\">\n\n                <FontAwesomeIcon icon={faIndustry} />\n\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"line\" \n                onClick={() => {\n                    var myWall = prompt(\"Please Enter Width of Wall\")\n                    setWall(myWall)\n                    \n                    setTool(\"line\")}}\n                title = \"Wall\">\n                \n                <FontAwesomeIcon icon={faGripLinesVertical} />\n\n\n            </Button>\n            </ButtonGroup>\n            </div></div>                <div className={classes.root}>\n\n            <div className = \"row\">\n            <div className = \"col-xs-12\">\n                \n            <ButtonGroup\n            \n            orientation=\"vertical\"\n            value={view}\n            exclusive\n            onChange={handleChange}\n            className = \"btn\"  \n            style={{paddingRight : \"0.99em\"}} >\n            \n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"rectangle\" \n                onClick={() => {setTool(\"rectangle\")\n                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                setWall(myWall)\n                                }}\n                title = \"Room \">\n               \n\n                <FontAwesomeIcon icon={faSquare} />\n\n\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"ellipse\" \n                onClick={() => {\n                setTool(\"ellipse\")\n                var myWall = prompt(\"Please Enter Width of Wall\")\n                setWall(myWall)}}\n                title = \"Ellipse Shape Room\">\n                \n\n                <FontAwesomeIcon icon={faCircleNotch} />\n\n            </Button>\n    \n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                aria-controls=\"simple-menu\" \n                aria-haspopup=\"true\" \n                onClick={handleClick}\n                title = \"Door\">\n                \n\n                <FontAwesomeIcon icon={faDoorOpen} />\n\n            </Button>\n\n                <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                    >\n\n                    <MenuItem \n                        id = \"arcL\" \n                        onClick={() => {setTool(\"arcL\")\n                                        setAnchorEl(null);}  }>\n                        Door Left\n                    </MenuItem>\n                    <MenuItem \n                        id = \"arcR\" \n                        onClick={() => {setTool(\"arcR\") \n                                        setAnchorEl(null);} }>\n                        Door Right\n                    </MenuItem>\n                    <MenuItem \n                        id = \"arcR\" \n                        onClick={() => {setTool(\"arcLB\") \n                                        setAnchorEl(null);} }>\n                        Door Left Bottom\n                    </MenuItem>\n                    <MenuItem \n                        id = \"arcR\" \n                        onClick={() => {setTool(\"arcRB\") \n                                        setAnchorEl(null);} }>\n                        Door Right Bottom\n                    </MenuItem>\n\n                </Menu>\n\n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"circle\" \n                onClick={() => {setTool(\"circle\")\n                var myWall = prompt(\"Please Enter Width of Wall\")\n                setWall(myWall)}}\n                title = \"Circular Room\">\n              \n                <FontAwesomeIcon icon={faCircle} />\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"eraser\" \n                onClick={() => setTool(\"eraser\")}\n                title = \"Eraser\">\n    \n\n                <FontAwesomeIcon icon={faEraser} />\n\n\n            </Button>\n            <Button\n            size = \"sm\"  className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                onClick={lessItem} \n                title = \"Go lower Floor\">\n                <ExpandLessIcon/> \n            </Button>\n\n            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                onClick={upItem} \n                title = \"Go Upper Floor\">\n                <ExpandMoreIcon/>\n            </Button>\n            <Button \n                                                onClick={saveLayer} \n                                                className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                title = \"Save Layer\">\n                                                \n                                                <FontAwesomeIcon icon={faLayerGroup} />\n                                            </Button>\n            {/* <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={HandleSave} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button> */}\n           \n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}}  onClick={()=>{\n                if(widthh === null)\n                {\n                    alert(\"Please Enter Width and Length First\")\n                }\n                else{\n                const canv = document.getElementById(\"canvas\");\n                const ctx = canv.getContext('2d')\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                setElements([]);\n                setMyVar([]);\n                item = 0;\n                totalLayer = 0;\n                }}} \n                title = \"Clear All\">\n                \n                <FontAwesomeIcon icon={faTrashAlt}/>\n            </Button>\n\n            \n        </ButtonGroup>\n</div>\n    </div></div>\n    </div></center>\n    </div> ):\n    \n    \n    isMobile === 3 ? ( \n     \n        <div className=\"container\" ><center>\n            <div className = \"row\">\n            <div className = \"col-xs-12\">\n\n    \n\n                <div className={classes.root}>\n                    <ButtonGroup\n        \n                            orientation=\"vertical\"\n                            value={view}\n                            exclusive\n                            onChange={handleChange}\n                            className = \"btn\"  \n                            style={{paddingRight : \"2.5em\"}} \n                        >\n\n                    <IconButton\n                        color=\"#ffffff\"\n                        aria-label=\"open drawer\"\n                        edge=\"end\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(open && classes.hide)}\n                        className = \"btn\"  \n                        style={{backgroundColor:\"none\"}} \n                        size = \"sm\"\n                        >\n            \n                                <MenuIcon />\n                    </IconButton>\n\n                    <input type=\"color\" id=\"c\" onChange={(e) => {\n                                                                setBGColor(e.target.value);\n                                                                    }} \n                            style = {{\n                                position: \"absolute\",\n                                left: \"-10000px\",\n                                top: \" auto\",\n                                width: \"1px\",\n                                height: \"1px\",\n                                overflow: \"hidden\"\n                  \n                            }}/>\n           \n\n                    <Button\n                        size = \"sm\"\n                        id = \"colors\"\n                        className = \"btn\"  \n                        style={{backgroundColor:\"none\"}} \n                            onClick={ ()=> { \n\n                                document.getElementById(\"c\").focus();\n                \n                                document.getElementById(\"c\").click();\n                \n                            }}\n                        title = \"Set Background Color\">\n\n                        <FontAwesomeIcon icon={faPalette} />\n                   \n                </Button>\n\n                {UserServices.isLoggedin ?\n\n                    (<>\n\n                    <Button \n                        size = \"sm\"\n                        className = \"btn\"  \n                        style={{backgroundColor:\"none\"}} \n                        onClick={getData} title = \"Get Data\">\n\n                        <FontAwesomeIcon icon={faGetPocket} />\n                   \n                    </Button>\n\n                    <Button\n                        size = \"sm\" title=\"save sketch on server\"  onClick={(e) => {\n                        name = prompt(\"Please Enter name of your Sketch\")\n                            if(name){\n                                UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\n                                .then((data) => {\n                                console.log(data);\n                                toast.success(data, {\n                                position: \"bottom-right\",\n                                autoClose: 5000,\n                                hideProgressBar: false,\n                                closeOnClick: true,\n                                pauseOnHover: true,\n                                draggable: true,\n                                progress: undefined,\n                                    });\n                                })\n                                .catch((err) => {\n                                    toast.error(err.response.data, {\n                                    position: \"bottom-right\",\n                                    autoClose: 5000,\n                                    hideProgressBar: false,\n                                    closeOnClick: true,\n                                    pauseOnHover: true,\n                                    draggable: true,\n                                    progress: undefined,\n                                    });\n                                });\n                            }}} className = \"btn\"  \n                            style={{backgroundColor:\"none\"}} >\n                \n                                <FontAwesomeIcon icon={faSave} />\n                \n                        </Button>\n                        <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={HandleSave} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                    </>) : \n                        ( <>\n                        <Button \n                            size = \"sm\"\n                            className = \"btn\"  \n                            style={{backgroundColor:\"none\"}} \n                            onClick={()=> {\n                                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                    position: \"bottom-right\",\n                                    autoClose: 5000,\n                                    hideProgressBar: false,\n                                    closeOnClick: true,\n                                    pauseOnHover: true,\n                                    draggable: true,\n                                    progress: undefined,\n                                        });\n                            }} title = \"Get Data\">\n    \n                            <FontAwesomeIcon icon={faGetPocket} />\n                       \n                        </Button>\n    \n                        <Button\n                            size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\n                                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                    position: \"bottom-right\",\n                                    autoClose: 5000,\n                                    hideProgressBar: false,\n                                    closeOnClick: true,\n                                    pauseOnHover: true,\n                                    draggable: true,\n                                    progress: undefined,\n                                        });\n                            }} className = \"btn\"  \n                                style={{backgroundColor:\"none\"}} >\n                    \n                                    <FontAwesomeIcon icon={faSave} />\n                    \n                            </Button>\n                            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={()=> {\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                        });\n            }} className = \"btn\"  \n                style={{backgroundColor:\"none\"}} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                            </>)\n                    }  \n\n</ButtonGroup>\n            </div></div></div>\n            <div className = \"row\">\n            <div className = \"col-xs-12\">\n\n    \n\n                <div className={classes.root}>\n                    <ButtonGroup\n        \n                            orientation=\"vertical\"\n                            value={view}\n                            exclusive\n                            onChange={handleChange}\n                            className = \"btn\"  \n                            style={{backgroundColor:\"none\"}} \n                        >\n            \n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                onClick={addLayer} title = \"Add Layer\">\n\n\n                <FontAwesomeIcon icon={faPlus} />\n\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"selection\" \n                onClick={() => setTool(\"selection\")}   \n                aria-label=\"left aligned\"\n                title = \"Selection\">\n                \n\n                <FontAwesomeIcon icon={faVoteYea} />\n\n            </Button>\n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"selection\" \n                onClick={() => setTool(\"sizes\")}   \n                aria-label=\"left aligned\"\n                title = \"Get Size\">\n            \n\n                <FontAwesomeIcon icon={faJoget} />\n                \n            </Button>\n            \n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"resize\" \n                onClick={() => setTool(\"resize\")}\n                title = \"Re - Factor\">\n\n                <FontAwesomeIcon icon={faIndustry} />\n\n            </Button>\n            \n            \n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"line\" \n                onClick={() => {\n                    var myWall = prompt(\"Please Enter Width of Wall\")\n                    setWall(myWall)\n                    \n                    setTool(\"line\")}}\n                title = \"Wall\">\n                \n                <FontAwesomeIcon icon={faGripLinesVertical} />\n\n\n            </Button>\n</ButtonGroup>\n</div></div></div>\n            <div className = \"row\">\n            <div className = \"col-xs-12\">\n\n    \n\n                <div className={classes.root}>\n                    <ButtonGroup\n        \n                            orientation=\"vertical\"\n                            value={view}\n                            exclusive\n                            onChange={handleChange}\n                            className = \"btn\"  \n                            style={{backgroundColor:\"none\"}} \n                        >\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"rectangle\" \n                onClick={() => {setTool(\"rectangle\")\n                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                setWall(myWall)\n                                }}\n                title = \"Room \">\n               \n\n                <FontAwesomeIcon icon={faSquare} />\n\n\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"ellipse\" \n                onClick={() => {\n                setTool(\"ellipse\")\n                var myWall = prompt(\"Please Enter Width of Wall\")\n                setWall(myWall)}}\n                title = \"Ellipse Shape Room\">\n                \n\n                <FontAwesomeIcon icon={faCircleNotch} />\n\n            </Button>\n    \n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                aria-controls=\"simple-menu\" \n                aria-haspopup=\"true\" \n                onClick={handleClick}\n                title = \"Door\">\n                \n\n                <FontAwesomeIcon icon={faDoorOpen} />\n\n            </Button>\n\n                <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                    >\n\n                    <MenuItem \n                        id = \"arcL\" \n                        onClick={() => {setTool(\"arcL\")\n                                        setAnchorEl(null);}  }>\n                        Door Left\n                    </MenuItem>\n                    <MenuItem \n                        id = \"arcR\" \n                        onClick={() => {setTool(\"arcR\") \n                                        setAnchorEl(null);} }>\n                        Door Right\n                    </MenuItem>\n                    <MenuItem \n                        id = \"arcR\" \n                        onClick={() => {setTool(\"arcLB\") \n                                        setAnchorEl(null);} }>\n                        Door Left Bottom\n                    </MenuItem>\n                    <MenuItem \n                        id = \"arcR\" \n                        onClick={() => {setTool(\"arcRB\") \n                                        setAnchorEl(null);} }>\n                        Door Right Bottom\n                    </MenuItem>\n\n                </Menu>\n\n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"circle\" \n                onClick={() => {setTool(\"circle\")\n                var myWall = prompt(\"Please Enter Width of Wall\")\n                setWall(myWall)}}\n                title = \"Circular Room\">\n              \n                <FontAwesomeIcon icon={faCircle} />\n            </Button>\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                id = \"eraser\" \n                onClick={() => setTool(\"eraser\")}\n                title = \"Eraser\">\n    \n\n                <FontAwesomeIcon icon={faEraser} />\n\n\n            </Button>\n            </ButtonGroup>\n            </div></div></div>\n\n            <div className = \"row\">\n            <div className = \"col-xs-12\">\n\n    \n\n                <div className={classes.root}>\n                    <ButtonGroup\n        \n                            orientation=\"vertical\"\n                            value={view}\n                            exclusive\n                            onChange={handleChange}\n                            className = \"btn\"  \n                            style={{paddingRight : \"2.7em\"}} \n                        >\n            <Button\n            size = \"sm\"  className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                onClick={lessItem} \n                title = \"Go lower Floor\">\n                <ExpandLessIcon/> \n            </Button>\n\n            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n                onClick={upItem} \n                title = \"Go Upper Floor\">\n                <ExpandMoreIcon/>\n            </Button>\n            <Button \n                                                onClick={saveLayer} \n                                                className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                title = \"Save Layer\">\n                                                \n                                                <FontAwesomeIcon icon={faLayerGroup} />\n                                            </Button>\n            {/* <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={HandleSave} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button> */}\n           \n\n            <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}}  onClick={()=>{\n                if(widthh === null)\n                {\n                    alert(\"Please Enter Width and Length First\")\n                }\n                else{\n                const canv = document.getElementById(\"canvas\");\n                const ctx = canv.getContext('2d')\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                setElements([]);\n                setMyVar([]);\n                item = 0;\n                totalLayer = 0;\n                }}} \n                title = \"Clear All\">\n                \n                <FontAwesomeIcon icon={faTrashAlt}/>\n            </Button>\n\n            \n        </ButtonGroup>\n</div>\n    </div>\n    </div></center>\n    </div>):(\n\n                            \n                                <div className = \"row\" style={{paddingLeft : '5em'}}>\n                                    <div className = \"col-xs-12\" >\n\n                                    \n                                \n                                    <div className={classes.root} >\n                                        <ButtonGroup\n                                            orientation=\"vertical\"\n                                            value={view}\n                                            exclusive\n                                            onChange={handleChange}\n                                            className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            >\n\n                                            <IconButton\n                                                color=\"#ffffff\"\n                                                aria-label=\"open drawer\"\n                                                edge=\"end\"\n                                                onClick={handleDrawerOpen}\n                                                className={clsx(open && classes.hide)}\n                                                className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                >\n                                            \n                                               <MenuIcon />\n                                            </IconButton>\n\n                                            <input type=\"color\" id=\"c\" onChange={(e) => {\n                                                                         setBGColor(e.target.value);\n                                                                        }} \n                                                    style = {{\n                                                    position: \"absolute\",\n                                                    left: \"-10000px\",\n                                                    top: \" auto\",\n                                                    width: \"1px\",\n                                                    height: \"1px\",\n                                                    overflow: \"hidden\"\n                                                  \n                                            }}/>\n                                           \n\n                                            <Button\n                                            \n                                            id = \"colors\"\n                                            className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            onClick={ ()=> { \n\n                                                document.getElementById(\"c\").focus();\n                                                \n                                                document.getElementById(\"c\").click();\n                                                \n                                            }}\n                                            title = \"Set Background Color\">\n\n                                                    <FontAwesomeIcon icon={faPalette} />\n                                                   \n                                                \n                                                \n                                            </Button>\n\n                                            {UserServices.isLoggedin ?\n\n                                                (<>\n\n                                            <Button \n                                            \n                                            className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            onClick={getData} title = \"Get Data\">\n\n                                                    <FontAwesomeIcon icon={faGetPocket} />\n                                                   \n                                                \n                                                \n                                            </Button>\n\n                                                <Button title=\"save sketch on server\"  onClick={(e) => {\n                                                     name = prompt(\"Please Enter name of your Sketch\")\n                                                    if(name){\n                                                    UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\n                                                    .then((data) => {\n                                                        console.log(data);\n                                                        toast.success(data, {\n                                                            position: \"bottom-right\",\n                                                            autoClose: 5000,\n                                                            hideProgressBar: false,\n                                                            closeOnClick: true,\n                                                            pauseOnHover: true,\n                                                            draggable: true,\n                                                            progress: undefined,\n                                                        });\n                                                    })\n                                                    .catch((err) => {\n                                                        toast.error(err.response.data, {\n                                                            position: \"bottom-right\",\n                                                            autoClose: 5000,\n                                                            hideProgressBar: false,\n                                                            closeOnClick: true,\n                                                            pauseOnHover: true,\n                                                            draggable: true,\n                                                            progress: undefined,\n                                                        });\n                                                    });\n                                                }}} className = \"btn\"  \n                                                style={{backgroundColor:\"none\"}} >\n                                                \n                                                <FontAwesomeIcon icon={faSave} />\n                                                \n                                                </Button>\n                                                <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={HandleSave} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                                                </>) : \n                                                (<>\n                                                    <Button \n                                                        size = \"sm\"\n                                                        className = \"btn\"  \n                                                        style={{backgroundColor:\"none\"}} \n                                                        onClick={()=> {\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                                                position: \"bottom-right\",\n                                                                autoClose: 5000,\n                                                                hideProgressBar: false,\n                                                                closeOnClick: true,\n                                                                pauseOnHover: true,\n                                                                draggable: true,\n                                                                progress: undefined,\n                                                                    });\n                                                        }} title = \"Get Data\">\n                                \n                                                        <FontAwesomeIcon icon={faGetPocket} />\n                                                   \n                                                    </Button>\n                                \n                                                    <Button\n                                                        size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                                                                position: \"bottom-right\",\n                                                                autoClose: 5000,\n                                                                hideProgressBar: false,\n                                                                closeOnClick: true,\n                                                                pauseOnHover: true,\n                                                                draggable: true,\n                                                                progress: undefined,\n                                                                    });\n                                                        }} className = \"btn\"  \n                                                            style={{backgroundColor:\"none\"}} >\n                                                \n                                                                <FontAwesomeIcon icon={faSave} />\n                                                \n                                                        </Button>\n                                                        \n                                                        <Button\n            size = \"sm\" className = \"btn\"  \n            style={{backgroundColor:\"none\"}} \n            onClick={()=> {\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                        });\n            }} title= \"Download File\">\n            \n\n            <FontAwesomeIcon icon={faFileDownload} />\n\n\n            </Button>\n                                                        </>\n                                                        \n                                                        )\n                                            }  \n\n                                            \n\n                                            \n\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                onClick={addLayer} title = \"Add Layer\">\n\n\n                                                <FontAwesomeIcon icon={faPlus} />\n\n                                            </Button>\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"selection\" \n                                                onClick={() => setTool(\"selection\")}   \n                                                aria-label=\"left aligned\"\n                                                title = \"Selection\">\n                                                \n\n                                                <FontAwesomeIcon icon={faVoteYea} />\n\n                                            </Button>\n    \n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"selection\" \n                                                onClick={() => setTool(\"sizes\")}   \n                                                aria-label=\"left aligned\"\n                                                title = \"Get Size\">\n                                            \n\n                                                <FontAwesomeIcon icon={faJoget} />\n                                                \n                                            </Button>\n                                            \n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"resize\" \n                                                onClick={() => setTool(\"resize\")}\n                                                title = \"Re - Factor\">\n\n                                                <FontAwesomeIcon icon={faIndustry} />\n\n                                            </Button>\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"line\" \n                                                onClick={() => {\n                                                    var myWall = prompt(\"Please Enter Width of Wall\")\n                                                    setWall(myWall)\n                                                    \n                                                    setTool(\"line\")}}\n                                                title = \"Wall\">\n                                                \n                                                <FontAwesomeIcon icon={faGripLinesVertical} />\n\n\n                                            </Button>\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"rectangle\" \n                                                onClick={() => {setTool(\"rectangle\")\n                                                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                                                setWall(myWall)\n                                                                }}\n                                                title = \"Room \">\n                                               \n\n                                                <FontAwesomeIcon icon={faSquare} />\n\n\n                                            </Button>\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"ellipse\" \n                                                onClick={() => {\n                                                setTool(\"ellipse\")\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                                setWall(myWall)}}\n                                                title = \"Ellipse Shape Room\">\n                                                \n\n                                                <FontAwesomeIcon icon={faCircleNotch} />\n\n                                            </Button>\n                                    \n\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                aria-controls=\"simple-menu\" \n                                                aria-haspopup=\"true\" \n                                                onClick={handleClick}\n                                                title = \"Door\">\n                                                \n\n                                                <FontAwesomeIcon icon={faDoorOpen} />\n\n                                            </Button>\n \n                                                <Menu\n                                                    id=\"simple-menu\"\n                                                    anchorEl={anchorEl}\n                                                    keepMounted\n                                                    open={Boolean(anchorEl)}\n                                                    onClose={handleClose}\n                                                    >\n             \n                                                    <MenuItem \n                                                        id = \"arcL\" \n                                                        onClick={() => {setTool(\"arcL\")\n                                                                        setAnchorEl(null);}  }>\n                                                        Door Left\n                                                    </MenuItem>\n                                                    <MenuItem \n                                                        id = \"arcR\" \n                                                        onClick={() => {setTool(\"arcR\") \n                                                                        setAnchorEl(null);} }>\n                                                        Door Right\n                                                    </MenuItem>\n                                                    <MenuItem \n                                                        id = \"arcR\" \n                                                        onClick={() => {setTool(\"arcLB\") \n                                                                        setAnchorEl(null);} }>\n                                                        Door Left Bottom\n                                                    </MenuItem>\n                                                    <MenuItem \n                                                        id = \"arcR\" \n                                                        onClick={() => {setTool(\"arcRB\") \n                                                                        setAnchorEl(null);} }>\n                                                        Door Right Bottom\n                                                    </MenuItem>\n\n                                                </Menu>\n\n\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"circle\" \n                                                onClick={() => {setTool(\"circle\")\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\n                                                setWall(myWall)}}\n                                                title = \"Circular Room\">\n                                              \n                                                <FontAwesomeIcon icon={faCircle} />\n                                            </Button>\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                id = \"eraser\" \n                                                onClick={() => setTool(\"eraser\")}\n                                                title = \"Eraser\">\n                                    \n\n                                                <FontAwesomeIcon icon={faEraser} />\n\n\n                                            </Button>\n                                            <Button  className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                onClick={lessItem} \n                                                title = \"Go lower Floor\">\n                                                <ExpandLessIcon/> \n                                            </Button>\n\n                                            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\n\n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                onClick={upItem} \n                                                title = \"Go Upper Floor\">\n                                                <ExpandMoreIcon/>\n                                            </Button>\n                                            <Button \n                                                onClick={saveLayer} \n                                                className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                                title = \"Save Layer\">\n                                                \n                                                <FontAwesomeIcon icon={faLayerGroup} />\n                                            </Button>\n                                            {/* <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}} \n                                            onClick={HandleSave} title= \"Download File\">\n                                            \n\n                                            <FontAwesomeIcon icon={faFileDownload} />\n\n\n                                            </Button> */}\n                                           \n                    \n                                            <Button className = \"btn\"  \n                                            style={{backgroundColor:\"none\"}}  onClick={()=>{\n                                                if(widthh === null)\n                                                {\n                                                    alert(\"Please Enter Width and Length First\")\n                                                }\n                                                else{\n                                                const canv = document.getElementById(\"canvas\");\n                                                const ctx = canv.getContext('2d')\n                                                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                                                setElements([]);\n                                                setMyVar([]);\n                                                item = 0;\n                                                totalLayer = 0;\n                                                }}} \n                                                title = \"Clear All\">\n                                                \n                                                <FontAwesomeIcon icon={faTrashAlt}/>\n                                            </Button>\n                    \n                                            \n                                        </ButtonGroup>\n\n                                    </div>\n                                    </div>\n                                    </div>\n)}\n\n\n    <div className=\"row\">\n\n    <div class=\"col-md-4\" style ={{padding:\"2em\"}}>\n    \n\n        {selectedElement === null ? (\n\n            <div>\n                <InputLabel htmlFor=\"input-with-icon-adornment\">Current selected element is : </InputLabel>\n                    <Input\n                        value  = \"No element is selected\"\n                        readOnly\n                        startAdornment={\n                        <InputAdornment position=\"start\">\n                        </InputAdornment>\n                        }\n                        />\n            </div>\n    ) : \n\n    <div>\n        <InputLabel htmlFor=\"input-with-icon-adornment\">Current selected element is : </InputLabel>\n\n        <Input\n\n            value  =  {selectedElement.type === \"rectangle\" ? (\n                \"Room\"            \n                ) : \n            selectedElement.type === \"line\" ? (\n                \"Wall\"\n                ) : \n            selectedElement.type === \"ellipse\" ? (\n                \"Ellipse Shape Room\"\n                ) :\n            selectedElement.type === \"arcL\" ? (\n                \"Door Left\"\n                ) : \n            selectedElement.type === \"arcR\" ? (\n                \"Door Right\"\n                ) : \n            selectedElement.type === \"circle\" ? (\n                \"Circular Room\"\n                ) : (\"\")\n\n            }  \n            \n            readOnly\n            startAdornment={\n                <InputAdornment position=\"start\">\n\n                </InputAdornment>\n                }\n        />\n    </div>\n\n}\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Your current Width is : </InputLabel>\n    <Input\n        value  = {canvWidth / 15.36 } \n        type=\"number\"\n        step=\".01\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n\n            </InputAdornment>\n        }\n    />\n\n\n<InputLabel htmlFor=\"input-with-icon-adornment\">Your current Length is : </InputLabel>\n    <Input\n        value  = {canvHeight / 15.36 } \n        type=\"number\"\n        step=\".01\"\n        readOnly\n        startAdornment={\n            <InputAdornment position=\"start\">\n\n            </InputAdornment>\n        }\n    />\n\n\n<div>\n    <InputLabel htmlFor=\"input-with-icon-adornment\">Element current Width is : </InputLabel>\n        <Input\n            value  = {  Math.abs(ElementWidth)   / 15.36 } \n            type=\"number\"\n            step=\".01\"\n            readOnly\n            startAdornment={\n            <InputAdornment position=\"start\">\n\n            </InputAdornment>\n            }\n        />\n</div>\n\n\n\n<div>\n    <InputLabel htmlFor=\"input-with-icon-adornment\">Element current Length is : </InputLabel>\n        <Input\n            value  = {\n                (   Math.abs(ElementLength)   )   /   15.36 }\n                type=\"number\"\n                step=\".01\"\n                readOnly\n                startAdornment={\n                <InputAdornment position=\"start\">\n\n                </InputAdornment>\n                }\n        />\n</div>\n\n<div>\n    <InputLabel htmlFor=\"input-with-icon-adornment\">Element's Wall current width is : </InputLabel>\n        <Input\n            value  = {\n                (   Math.abs(ElementStrokeWidth)   )   }\n                type=\"number\"\n                step=\".01\"\n                readOnly\n                startAdornment={\n                <InputAdornment position=\"start\">\n\n                </InputAdornment>\n                }\n        />\n</div>\n\n\n\n{error ? (\n\n<div>\n   <h3>Values must be valid</h3>\n\n</div>\n) :  \n\n(\"\")\n\n}\n\n{/* <Button onClick={()=>setState2({ ...state2, [\"right\"]: true })}>Open</Button> */}\n\n\n{loading ? (\n\n<div className=\"container\">\n  \n   <Spin style={{width:'100%' , marginTop: '20%' , marginBottom:'20%'}} />\n\n</div>\n) :  \n\n(\"\")\n\n}        \n</div>\n\n\n\n\n                                \n                            <div className = \"col-md-8\">\n\n                                <div\n                                    >\n                                        \n                                        <canvas\n                                            style = {{\n                                                background:bgColor , \n                                                border : \"5px solid darkslategrey\" , \n                                                marginTop : \"3%\" , marginBottom : \"3%\"}}\n                    \n                                            width = {canvWidth}\n                                            height = {canvHeight}\n                                            id = \"canvas\"\n                                            onMouseDown={handleMouseDown}\n                                            onMouseUp={handleMouseUp}\n                                            onMouseMove={handleMouseMove}\n\n                                            onTouchStart={handleMouseDown}\n                                            onTouchEnd={handleMouseUp}\n                                            onTouchMove={handleMouseMove}\n\n                                            >\n                                            Canvas\n                                        </canvas>\n\n\n                                        <canvas\n                                        hidden\n                                            style = {{\n                                                background:bgColor , \n                                                border : \"5px solid darkslategrey\" , \n                                                marginTop : \"3%\" , marginBottom : \"3%\"}}\n                    \n                                            width = {canvWidth}\n                                            height = {canvHeight}\n                                            id = \"canvas2\"\n\n                                            >\n                                            Canvas\n                                        </canvas>\n                \n                                </div>\n                            </div>\n                            </div>\n                            </div>\n                            \n                    );\n            }\n\nexport default App;","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\responsive.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\nav.js",["385","386","387","388","389","390","391","392","393","394","395"],"\nimport { useHistory } from 'react-router'\nimport '../css/App.css';\nimport { Button, withStyles } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Badge from \"@material-ui/core/Badge\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\n// import Cookie from \"js-cookie\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport UserServices from \"../services/UserServices\";\n// import searchProduct from \"./actions/search\";\nimport logo from '../img/logo2.png'\n\n\n\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n        right: -3,\n        top: 13,\n\n        padding: \"0 4px\",\n    },\n}))(Badge);\n\nconst useStyles = makeStyles((theme) => ({\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        display: \"none\",\n        [theme.breakpoints.up(\"sm\")]: {\n            display: \"block\",\n        },\n    },\n\n    link: {\n        color: \"white\",\n        paddingRight: \"1rem\",\n\n        textDecoration: \"none\",\n        marginTop: \".5rem\",\n        fontFamily: \"ubuntu\",\n    },\n    search: {\n        position: \"relative\",\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        \"&:hover\": {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginRight: theme.spacing(2),\n        marginLeft: 0,\n        width: \"100%\",\n        [theme.breakpoints.up(\"sm\")]: {\n            marginLeft: theme.spacing(3),\n            width: \"auto\",\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: \"100%\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    inputRoot: {\n        color: \"inherit\",\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create(\"width\"),\n        width: \"100%\",\n        [theme.breakpoints.up(\"md\")]: {\n            width: \"20ch\",\n        },\n    },\n    sectionDesktop: {\n        display: \"none\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n        },\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    sectionMobile: {\n        display: \"flex\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"none\",\n        },\n    },\n}));\n\nexport default function TopMenu() {\n\n    \n    const history = useHistory();\n\n    const reRender = (e) => {\n\n        history.go(0);\n    }\n\n\n    const [search, setSearch] = React.useState(\"\");\n    // const cart = useSelector((state) => state.cart);\n    // const { cartItems } = cart;\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n    // const dispatch = useDispatch();\n\n    // const searchHandler = () => {\n    //     dispatch(searchProduct(search));\n    // };\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const [anchorE2, setAnchorE2] = React.useState(null);\n                    const handleClick = (event) => {\n\n                        setAnchorE2(event.currentTarget);\n\n                    };\n\n                    const handleClose = () => {\n                        setAnchorE2(null);\n                    };\n\n    const menuId = \"primary-search-account-menu\";\n\n    const mobileMenuId = \"primary-search-account-menu-mobile\";\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                {\" \"}\n                <Typography variant=\"h6\">\n                    <Link to=\"/\" className={classes.link} style={{ color: \"black\" }} onClick={reRender}>\n                        Home\n                    </Link>\n                </Typography>\n            </MenuItem>\n            <MenuItem>\n                <Typography variant=\"h6\">\n                    <Link\n                        to=\"/sketch\"\n                        className={classes.link}\n                        style={{ color: \"black\" }}\n                        // onClick={reRender} \n                        >\n                        Sketch App\n                    </Link>\n                </Typography>\n            </MenuItem>\n\n            <MenuItem>\n                {\" \"}\n                <Typography variant=\"h6\">\n                    <Link\n                        to=\"/contact-us\"\n                        className={classes.link}\n                        style={{ color: \"black\" }}\n                        // onClick={reRender}\n                        >\n                        Contact us\n                    </Link>\n                </Typography>\n            </MenuItem>\n\n            <MenuItem>\n                {\" \"}\n                <Typography variant=\"h6\">\n                    <Link\n                        to=\"/about\"\n                        className={classes.link}\n                        style={{ color: \"black\" }}\n                        // onClick={reRender}\n                        >\n                        About us\n                    </Link>\n                </Typography>\n            </MenuItem>\n\n           \n\n            {UserServices.isLoggedin\n                ? UserServices.getLoggedinfo().role === \"admin\" && (\n                <MenuItem>\n                    <Link to=\"/dashboardA\" className={classes.link}> \n                        <Button\n                            color=\"secondary\"\n                            style={{\n                                color: \"black\",\n                                backgroundColor: \"#FEBD69\",\n                                textDecoration: \"none\",\n                                paddingLeft: \"1rem\",\n                                paddingRight: \"1rem\",\n                            }}\n                        >\n                            Admin\n                        </Button>\n                    </Link>\n                </MenuItem>\n            )\n                : \"\"}\n\n            {!UserServices.isLoggedin ? (\n                <>\n                    <MenuItem>\n                        <Link to=\"/login\" className={classes.link}>\n                            <Button\n                                color=\"secondary\"\n                                style={{\n                                    color: \"black\",\n                                    backgroundColor: \"#FEBD69\",                                    textDecoration: \"none\",\n                                    paddingLeft: \"1rem\",\n                                    paddingRight: \"1rem\",\n                                }}\n                            >\n                                Login\n                            </Button>\n                        </Link>\n                    </MenuItem>\n                    <MenuItem>\n                        <Link to=\"/signup\" className={classes.link}>\n                            <Button\n                                color=\"secondary\"\n                                style={{\n                                    color: \"black\",\n                                    backgroundColor: \"#FEBD69\",\n                                    textDecoration: \"none\",\n                                    paddingLeft: \"1rem\",\n                                    paddingRight: \"1rem\",\n\n                                    marginLeft: \"0.1rem\",\n                                }}\n                            >\n                                Sign up\n                            </Button>\n                        </Link>\n                    </MenuItem>\n                </>\n            ) : (\n                <MenuItem>\n                    <Link className={classes.link}>\n                        <Button\n                            color=\"secondary\"\n                            style={{\n                                color: \"black\",\n                                backgroundColor: \"#FEBD69\",\n                                textDecoration: \"none\",\n                                paddingLeft: \"1rem\",\n                                paddingRight: \"1rem\",\n\n                                marginLeft: \"0.1rem\",\n                            }}\n                            onClick={UserServices.logout}\n                        >\n                            Logout\n                        </Button>\n                    </Link>\n                </MenuItem>\n            )}\n\n{UserServices.isLoggedin && ( \n                                <>\n                                {/*  */}\n                           \n                                <Button \n                                aria-controls=\"simple-menu\" \n                                aria-haspopup=\"true\" \n                                onClick={handleClick}>\n                                <Typography style = {{color : \"black\"}}> {UserServices.getLoggedinfo().name} <AccountCircle /> </Typography>\n                            </Button>\n\n                                <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    keepMounted\n                                    open={Boolean(anchorE2)}\n                                    onClose={handleClose}\n                                    >\n<Link to='/dashboardB' style={{ textDecoration: 'none' }}>\n                                    <MenuItem  \n                                        onClick={() => { \n                                                        setAnchorE2(null);} }\n                                        >\n                                        Dashboard\n                                    </MenuItem>\n                                    </Link>\n                                   \n\n                                    <MenuItem \n                                        onClick={UserServices.logout}>\n                                        Logout\n                                    </MenuItem>\n\n                                </Menu>\n                                </>\n                           ) }\n\n        </Menu>\n    );\n\n    return (\n        <div className={classes.grow}>\n\n            <AppBar\n                position=\"static\"\n                style={{\n                    backgroundColor: \"#232F3E\",\n                    textAlign: \"center\",\n                    justifyContent: \"center\",\n                }}\n            >\n                <Toolbar>\n                    {/*<Typography className={classes.title} variant=\"h6\" noWrap>*/}\n                    {/*    <Link className={classes.link} to=\"/\" style={{ color: \"#FEBD69\" }}>*/}\n                    {/*        Expotech*/}\n                    {/*    </Link>*/}\n                    {/*</Typography>*/}\n                    {/*<div className={classes.search}>*/}\n                    {/*    <InputBase*/}\n                    {/*        placeholder=\"Search the Store\"*/}\n                    {/*        classes={{*/}\n                    {/*            root: classes.inputRoot,*/}\n                    {/*            input: classes.inputInput,*/}\n                    {/*        }}*/}\n                    {/*        inputProps={{ \"aria-label\": \"search\" }}*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*            setSearch(e.target.value);*/}\n                    {/*        }}*/}\n                    {/*    />*/}\n                    {/*</div>*/}\n                    {/*/!*<Button*!/*/}\n                    {/*    style={{*/}\n                    {/*        backgroundColor: \"#FEBD69\",*/}\n                    {/*        borderRadius: \"0rem .5rem .5rem 0rem\",*/}\n                    {/*        padding: \".3rem\",*/}\n                    {/*        marginLeft: \"-15px\",*/}\n                    {/*    }}*/}\n                    {/*    onClick={() => {*/}\n                    {/*        searchHandler();*/}\n                    {/*    }}*/}\n                    {/*>*/}\n                    {/*    <SearchIcon />*/}\n                    {/*</Button>*/}\n                    <Link to=\"/\" className={classes.link}>\n                    <img src = {logo} width=\"auto\" height = \"5%\" className = \"App-logo\"/>\n                    </Link>\n                    <div className={classes.grow} />\n                    <div className={classes.sectionDesktop}>\n                        <Typography variant=\"h6\">\n                            <Link to=\"/\" className={classes.link}>\n                              Home\n                            </Link>\n                        </Typography>\n                        <Typography variant=\"h6\">\n                            <Link to=\"/sketch\" className={classes.link} \n                            // onClick={reRender}\n                            >\n                                Sketch App\n                            </Link>\n                        </Typography>\n\n                        <Typography variant=\"h6\">\n                            <Link to=\"/contact-us\" className={classes.link} \n                            // onClick={reRender}\n                            >\n                                Contact us\n                            </Link>\n                        </Typography>\n\n                        <Typography variant=\"h6\">\n                            <Link to=\"/about\" className={classes.link} \n                            // onClick={reRender}\n                            >\n                                About us\n                            </Link>\n                        </Typography>\n\n                        {UserServices.isLoggedin\n                            ? \n                            UserServices.getLoggedinfo().role === \"admin\" && \n                            (\n                            <Link to=\"/dashboardA\" className={classes.link}>\n                                <Button\n                                    color=\"secondary\"\n                                    style={{\n                                        color: \"black\",\n                                        backgroundColor: \"#C0C0C0\",\n                                        textDecoration: \"none\",\n                                        paddingLeft: \"1rem\",\n                                        paddingRight: \"1rem\",\n                                    }}\n                                >\n                                    Admin\n                                </Button>\n                            </Link>\n                        )\n                            : \"\"}\n\n                        {!UserServices.isLoggedin ? (\n                            <>\n                                <Link to=\"/login\" className={classes.link}>\n                                    <Button\n                                        color=\"secondary\"\n                                        style={{\n                                            color: \"black\",\n                                            backgroundColor: \"#C0C0C0\",\n                                            textDecoration: \"none\",\n                                            paddingLeft: \"1rem\",\n                                            paddingRight: \"1rem\",\n                                        }}\n                                    >\n                                        Login\n                                    </Button>\n                                </Link>\n\n                                <Link to=\"/signup\" className={classes.link}>\n                                    <Button\n                                        color=\"secondary\"\n                                        style={{\n                                            color: \"black\",\n                                            backgroundColor: \"#C0C0C0\",\n                                            textDecoration: \"none\",\n                                            paddingLeft: \"1rem\",\n                                            paddingRight: \"1rem\",\n\n                                            marginLeft: \"0.1rem\",\n                                        }}\n                                    >\n                                        Subscribe\n                                    </Button>\n                                </Link>\n                            </>\n                        ) : (\n                            <Link className={classes.link}>\n                                <Button\n                                    color=\"secondary\"\n                                    style={{\n                                        color: \"black\",\n                                        backgroundColor: \"#C0C0C0\",\n                                        textDecoration: \"none\",\n                                        paddingLeft: \"1rem\",\n                                        paddingRight: \"1rem\",\n                                        marginLeft: \"0.1rem\",\n\n                                    }}\n                                    onClick={UserServices.logout}\n                                    \n                                >\n                                    Logout\n                                </Button>\n                            </Link>\n                        )}\n\n                        {/* <IconButton\n                            aria-label=\"cart\"\n                            color=\"inherit\"\n                            onClick={() => {\n                                window.location.href = \"/cart/\";\n                            }}\n                        >\n                            <StyledBadge\n                                badgeContent={cartItems.reduce((a, c) => a + Number(c.qty), 0)}\n                                color=\"secondary\"\n                            >\n                                <ShoppingCartIcon />\n                            </StyledBadge>\n                        </IconButton> */}\n\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            {UserServices.isLoggedin && ( \n                                <>\n                                {/*  */}\n                           \n                                <Button \n                                aria-controls=\"simple-menu\" \n                                aria-haspopup=\"true\" \n                                onClick={handleClick}>\n                                <Typography> {UserServices.getLoggedinfo().name} <AccountCircle /> </Typography>\n                            </Button>\n\n                                <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    keepMounted\n                                    open={Boolean(anchorE2)}\n                                    onClose={handleClose}\n                                    >\n<Link to='/dashboardB' style={{ textDecoration: 'none' }}>\n                                    <MenuItem  \n                                        onClick={() => { \n                                                        setAnchorE2(null);} }\n                                        >\n                                        Dashboard\n                                    </MenuItem>\n                                    </Link>\n                                    \n\n                                    <MenuItem \n                                        onClick={UserServices.logout}>\n                                        Logout\n                                    </MenuItem>\n\n                                </Menu>\n                                </>\n                           ) }\n\n                             \n                        </IconButton> \n                    </div>\n\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                    </div>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu} \n        </div>\n\n    );\n}","F:\\Aoo-Ghr-Bnain-Client\\src\\auth\\addByAdmin.js",["396","397","398","399","400","401"],"import Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport UserServices from \"../services/UserServices\";\r\nimport PasswordStrengthBar from 'react-password-strength-bar';\r\nimport notAllowed from \"../img/not_allowed.jpg\"\r\nimport onlyAdmins from \"../img/only_admins.jpg\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n\r\n  return (\r\n    <>\r\n    {UserServices.isLoggedin\r\n                       ? UserServices.getLoggedinfo().role === \"admin\" && (\r\n    \r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n        Create Account\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"name\"\r\n                name=\"name\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"Full Name\"\r\n                autoFocus\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                value={email}\r\n                onChange={(e) => {\r\n                  setEmail(e.target.value);\r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={(e) => {\r\n                  setPassword(e.target.value);\r\n\r\n                  \r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n                  <br></br>\r\n          <PasswordStrengthBar password={password} />\r\n\r\n          <Button\r\n          id = \"save\"\r\n            fullWidth\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              UserServices.register(name, email, password , \"admin\")\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  toast.success(data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                  window.location.href = \"/login\";\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n            }}\r\n          >\r\n            Create Account\r\n          </Button>\r\n          \r\n        </form>\r\n      </div>\r\n      \r\n    </Container>\r\n\r\n)\r\n: \" \"}\r\n{UserServices.isLoggedin ? UserServices.getLoggedinfo().role === \"user\" && (\r\n   \r\n   <div className=\"container\">\r\n   <h1>Only Admins</h1>\r\n    <img src={onlyAdmins} width=\"100%\" height = \"auto\" style ={{marginBottom : '10%'}}/>\r\n    </div>\r\n) : (\r\n<div className=\"container\"> \r\n<h1>Please login first</h1>\r\n<img src={notAllowed} width=\"100%\" height = \"auto\" style = {{ marginBottom : '10%'}}/>\r\n</div>\r\n)}\r\n</>\r\n  );\r\n}\r\n","F:\\Aoo-Ghr-Bnain-Client\\src\\admin\\Dashboard.js",["402","403","404","405","406","407","408","409","410","411","412"],"import UserServices from \"../services/UserServices\";\nimport welcome from \"../img/welcome.jpg\"\nimport add from \"../img/add_user.png\"\nimport change from \"../img/change.jpg\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport notAllowed from \"../img/not_allowed.jpg\"\nimport onlyAdmins from \"../img/only_admins.jpg\"\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { toast } from \"react-toastify\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 345,\n    },\n  });\nexport default function Dashboard() {\n\n    const classes = useStyles();\n    \n    const [sub, setSub] = React.useState(\"\");\n\n    return (\n        <>\n         {UserServices.isLoggedin\n                            ? UserServices.getLoggedinfo().role === \"admin\" && (\n                            \n                                <div className=\"container\" style={{marginTop:\"10%\" , marginBottom:\"10%\"}}>\n\n<div className=\"row\">\n    {/* <div className=\"col-md-6\">\n<Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt=\"Change Subscription Charges\"\n          height=\"140\"\n          image={change}\n          title=\"Change Subscription Charges\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          Change Subscription Charges\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            The Admins can change Subscription Charges on their own will\n\n            <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"sub\"\n            label=\"Subscription Charges\"\n            name=\"sub\"\n            autoComplete=\"sub\"\n            autoFocus\n            value={sub}\n            onChange={(e) => {\n              setSub(e.target.value);\n            }}\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n            document.getElementById('change').click();\n              }\n          }}\n          />\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        \n        <Button size=\"small\" color=\"primary\"  id = \"change\"\n            \n            onClick={(e) => {\n\n                // console.log({userName}, {password})\n                UserServices.change( sub , UserServices.getLoggedinfo().role)\n                  .then((data) => {\n                    console.log(data);\n                    toast.success(data, {\n                        position: \"bottom-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                      });\n                    \n                  })\n                  .catch((err) => {\n                    toast.error(err.response.data, {\n                      position: \"bottom-right\",\n                      autoClose: 5000,\n                      hideProgressBar: false,\n                      closeOnClick: true,\n                      pauseOnHover: true,\n                      draggable: true,\n                      progress: undefined,\n                    });\n                  });\n              }}>\n       Change Subscription Charges\n        </Button>\n      </CardActions>\n    </Card>\n</div> */}\n<div className=\"col-md-12\">\n\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt=\"Add User\"\n          height=\"160\"\n          image={add}\n          title=\"Add user\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          Add User\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            The Admins can add user without subsciption charges\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        \n      <Link to=\"/addByAdmin\" style={{textDecoration: 'none' }} >\n        <Button size=\"small\" color=\"primary\">\n       Add User\n        </Button>\n        </Link>\n                 \n                         \n      </CardActions>\n    </Card>\n    </div>\n</div>\n                            </div>\n                            \n                        )\n                            : \" \"}\n                            {UserServices.isLoggedin ? UserServices.getLoggedinfo().role === \"user\" && (\n                               \n                               <div className=\"container\">\n                               <h1>Only Admins</h1>\n                                <img src={onlyAdmins} width=\"100%\" height = \"auto\" style ={{marginBottom : '10%'}}/>\n                                </div>\n                            ) : (\n                            <div className=\"container\"> \n                            <h1>Please login first</h1>\n                            <img src={notAllowed} width=\"100%\" height = \"auto\" style = {{ marginBottom : '10%'}}/>\n                            </div>\n                            )}\n        </>\n    )\n}","F:\\Aoo-Ghr-Bnain-Client\\src\\users\\userDashboard.js",["413","414","415","416","417","418","419","420","421","422","423","424","425"],"import UserServices from \"../services/UserServices\";\nimport welcome from \"../img/welcome.jpg\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport notAllowed from \"../img/not_allowed.jpg\"\nimport mySketch from \"../img/mySketch.jpg\"\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport PasswordStrengthBar from 'react-password-strength-bar';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import AnimatedButton from '../animatedButton/ButtonHover';\nimport {widthh , setWidthh} from '../sketch'\nimport {heightt , setHeightt} from '../sketch'\nimport setMyVar from '../sketch'\nimport totalLayer from '../sketch'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n    paper: {\n      marginTop: theme.spacing(8),\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: \"100%\", // Fix IE 11 issue.\n      marginTop: theme.spacing(3),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }));\n\n  let sketchData , setSketchData;\n\n  export {sketchData, setSketchData};\n \n\nexport default function Welcome(){\n\n    const classes = useStyles();\n\n    const [password, setPassword] = React.useState(\"\");\n\n    const [myData, setMyData] = React.useState([]);\n\n    [sketchData , setSketchData] = React.useState([]);\n\n    return(\n    \n        <>\n        \n        {UserServices.isLoggedin\n                            ? UserServices.getLoggedinfo().added_By === \"admin\" && (\n                            \n\n<Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Change Password\n        </Typography>\n        <p style={{color : 'blue'}}>\n          As you were registered by admin, please change your password\n        </p>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.target.value);\n\n                  \n                }}\n                onKeyPress={event => {\n                  if (event.key === 'Enter') {\n                document.getElementById('save').click();\n                  }\n              }}\n              />\n            </Grid>\n          </Grid>\n                  <br></br>\n          <PasswordStrengthBar password={password} />\n\n          <Button\n          id = \"save\"\n            fullWidth\n            className={classes.submit}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => {\n              UserServices.updatePass(UserServices.getLoggedinfo().email , password , \"user\")\n                .then((data) => {\n                  console.log(data);\n                  toast.success(data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                  window.location.href = \"/login\";\n                })\n                .catch((err) => {\n                  toast.error(err.response.data, {\n                    position: \"bottom-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                });\n            }}\n          >\nChange Password          </Button>\n          \n        </form>\n      </div>\n      \n    </Container>\n                            \n                        ) : (\"\")}\n                        \n                            {UserServices.isLoggedin ? UserServices.getLoggedinfo().added_By === \"user\" && (\n\n                            <div className=\"container\" style = {{margin : \"5%\"}}> \n                            <div className=\"row\">\n                              <div className=\"col-xs-12\">\n\n                              <Button style = {{margin : \"5%\"}}\n                              id = \"getData\"\n                              label = \"Get Data\"\n                               onClick={(e) => {\n                                        UserServices.getSketch(UserServices.getLoggedinfo().id)\n                                        .then((data) => {\n                                          \n                                        \n                                          setMyData(data);\n\n                                          \n                                        toast.success(\"Your Data is being Loaded\", { \n                                        position: \"bottom-right\",\n                                        autoClose: 5000,\n                                        hideProgressBar: false,\n                                        closeOnClick: true,\n                                        pauseOnHover: true,\n                                       draggable: true,\n                                       progress: undefined,\n                                        });\n                                     })\n                                      .catch((err) => {\n                                     toast.error(err.response.data, {\n                                     position: \"bottom-right\",\n                                     autoClose: 5000,\n                                     hideProgressBar: false,\n                                      closeOnClick: true,\n                                        pauseOnHover: true,\n                                        draggable: true,\n                                        progress: undefined,\n                                                        });\n                                                    });\n                                                }} >Get Data</Button>\n\n                                              \n                                </div>\n\n                                </div>\n                                <div className=\"row\" style={{margin : '3%'}}>\n      { myData.map ( data =>\n<>\n\n\n      <div className=\"col-md-4\">\n      <Card className={classes.root} style = {{marginTop : \"4%\"}}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={mySketch}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{textTransform: \"uppercase\"}}>\n          {data.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n           Select Appropriate option for your Sketch\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n      <Button size=\"small\" color=\"primary\" \n          \n          onClick={()=>{setSketchData(data)\n                        alert(\"Now click on edit for view or editing purpose\")}}>\n            Ready                                \n        </Button>\n\n        <Button size=\"small\" color=\"primary\" \n          \n          onClick={()=> {\n            \n            if(sketchData.id === undefined){\n              alert(\"It is recommended to click on ready first\")\n            }\n          else(\n            alert(\"Redirecting ...\")\n            \n          )}}\n                    >\n          \n          <Link to=\"/sketch\" style={{textDecoration: 'none' }} >                     \n            Edit                                \n               </Link>\n          \n        </Button>\n        <Button size=\"small\" color=\"primary\"\n        \n        onClick={(e) => {\n          var answer = window.confirm(\"Are you sure, You want to delete this sketch? \");\n          if (!answer) {\n            // Save it!\n            console.log('Thing was saved to the database.');\n          } else {\n            // Do nothing!\n            console.log('Thing was not saved to the database.');\n          \n          UserServices.delSketch(data.id)\n          .then((res) => {\n            \n          toast.success(\"Successfully Deleted\", { \n          position: \"bottom-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n         draggable: true,\n         progress: undefined,\n          });\n       })\n        .catch((err) => {\n       toast.error(err.response.data, {\n       position: \"bottom-right\",\n       autoClose: 5000,\n       hideProgressBar: false,\n        closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n                          });\n                      });\n                  }}}\n        >\n          Delete\n        </Button>\n      </CardActions>\n    </Card></div>\n\n\n   </> )}\n          </div>\n        </div>\n                            ): (\n                            <div className=\"container\"> \n                            <h1>Please Login first</h1> \n                            <img src={notAllowed} width=\"100%\" height = \"auto\" style = {{ marginBottom : '10%'}}/>\n                            </div>)}\n        </>\n    );\n    \n    }\n    ","F:\\Aoo-Ghr-Bnain-Client\\src\\services\\payment.js",["426","427"],"import React from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./styles.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"https://localhost:5000/\";\r\naxios.defaults.headers.common[\"x-auth-token\"] = localStorage.getItem(\"token\");\r\n\r\n\r\n\r\ntoast.configure();\r\n\r\nexport default function App() {\r\n  const [product] = React.useState({\r\n    name: \"Tesla Roadster\",\r\n    price: 64998.67,\r\n    description: \"Cool car\"\r\n  });\r\n\r\n  const [token , setToken] = React.useState([]);\r\n\r\n  function handleToken(token, addresses) {\r\n\r\n    new Promise((resolve, reject) => {\r\n\r\n      console.log(token)\r\n\r\n    axios.post(\r\n      \"https://aoo-ghr-bnain-fyp.herokuapp.com/mycheckout\",\r\n      { token, product }\r\n    ).then((res)=>{\r\n      resolve(res)\r\n    })\r\n    .catch((err)=>{\r\n      reject(err)\r\n    });\r\n  });\r\n    // this.post(\"http://localhost:5000/register\", { username, email, password , role})\r\n    //     .then((res) => {\r\n    //       resolve(res);\r\n    //     })  \r\n    //     .catch((err) => {\r\n    //       reject(err);\r\n    //     });\r\n\r\n    // console.log(handleToken)\r\n\r\n\r\n\r\n    // const { status } = response.data;\r\n    // console.log(\"Response:\", response.data);\r\n    // if (status === \"success\") {\r\n    //   toast(\"Success! Check email for details\", { type: \"success\" });\r\n    // } else {\r\n    //   toast(\"Something went wrong\", { type: \"error\" });\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"product\">\r\n        <h1>{product.name}</h1>\r\n        <h3>On Sale · ${product.price}</h3>\r\n      </div>\r\n      <StripeCheckout \r\n        stripeKey=\"pk_test_51IorIIJmpNZTNdrVSyS2DzXf6i1NSsowyVHM90rIurlyXK9SXfLKq8rMb4ppoc0zPhcnLff6kUKuOXB90Uy9FyG100kml35YcH\"\r\n        token={handleToken}\r\n        amount={product.price * 100}\r\n        name=\"Tesla Roadster\"\r\n        // billingAddress\r\n        // shippingAddress\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<App />, rootElement);\r\n","F:\\Aoo-Ghr-Bnain-Client\\src\\helper\\footer.jsx",["428","429","430","431","432","433","434"],"import {makeStyles} from \"@material-ui/core/styles\";\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\n// import AnimatedButton from '../animatedButton/ButtonHover';\nimport '../css/footer.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js'\nimport 'bootstrap/dist/js/bootstrap.min.js'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport {faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport {faInstagram } from \"@fortawesome/free-brands-svg-icons\";\nimport {faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport {faMap } from \"@fortawesome/free-solid-svg-icons\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ScrollToTop from \"react-scroll-up\"\n\n\nfunction Copyright() {\n    return (\n      <Typography variant=\"body2\" color=\"inherit\" align=\"center\">\n        {\"Copyright © \"}\n        <Link color=\"inherit\" to=\"https://uol.edu.pk/\">\n        Aoo Ghr Bnain (Built by Students of UOL)\n        </Link>{\" \"}\n        {new Date().getFullYear()}\n        {\".\"}\n      </Typography>\n    );\n  }\n\nfunction Footer (){\n\n\n    return(\n\n\n<footer id=\"dk-footer\" class=\"dk-footer\">\n\n{/* <script crossorigin src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> */}\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-md-12 col-lg-4\" style={{marginTop : \"15%\"}}>\n                    <div class=\"dk-footer-box-info\">\n                    <Link to=\"/\" style={{textDecoration: 'none' }} >\n                            <img src=\"https://cdn.pixabay.com/photo/2016/11/07/13/04/yoga-1805784_960_720.png\" alt=\"footer_logo\" class=\"img-fluid\"/>\n                        </Link>\n                        <p class=\"footer-info-text\">\n                        We are here for you 24/7 , 24 hours and 7 days a week.\n                        We will be glad to know from you about our product.\n                        Simply give us your feed back. \n                        </p>\n                        <div class=\"footer-social-link\">\n                            <h3 style={{textDecoration : 'underline'}}>Connect</h3>\n                            <ul>\n                                <li>\n                                    <a>\n                                        <FontAwesomeIcon icon={faFacebook} style={{fontSize:24 , margin : 10 , color: '#3B5998'}}\n                                        onClick={() =>    window.location.href = 'https://www.facebook.com/University.Lahore/'\n                                    }/>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a>\n                                    <FontAwesomeIcon icon={faTwitter} style={{fontSize:24, margin : 10 , color: '#55ACEE'}}\n                                    onClick={() =>    window.location.href = 'https://twitter.com/ULahore?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor'\n                                }/>\n                                    </a>\n                                </li>\n                                \n                                <li>\n                                    <a>\n                                    <FontAwesomeIcon icon={faInstagram} style={{fontSize:24, margin : 10 , color: '#B7242A' }}\n                                    onClick={() =>    window.location.href = 'https://www.instagram.com/ulahore/?hl=en'\n                                      }/>\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                        \n                    </div>\n                \n                    <div class=\"footer-awarad\">\n                        \n                        <p>The University of Lahore</p>\n                </div>\n                </div>\n                \n                <div class=\"col-md-12 col-lg-8\" style={{marginTop: '10%' }}>\n                    <div class=\"row\">\n                        <div class=\"col-md-8\">\n                            <div class=\"contact-us\">\n                                <div class=\"contact-icon\">\n                                    <FontAwesomeIcon icon={faMap} />\n                                </div>\n                            \n                                <div class=\"contact-info\">\n                                    <h3>The University of Lahore (Students)</h3>\n                                    <p>Defence Road Campus</p>\n                                </div>\n                                \n                            </div>\n                        \n                        </div>\n                        \n                        {/* <div class=\"col-md-6\">\n                            <div class=\"contact-us contact-us-last\">\n                                <div class=\"contact-icon\">                                   \n                                    <FontAwesomeIcon icon={faEnvelope}/>\n                                </div>\n                            \n                                <div class=\"contact-info\">\n                                    <h3>95 711 9 5353</h3>\n                                    <p>Give us a call</p>\n                                </div>\n                                \n                            </div>\n                        \n                        </div> */}\n                        \n                    </div>\n                    \n                    <div class=\"row\">\n                        <div class=\"col-md-12 col-lg-6\">\n                            <div class=\"footer-widget footer-left-widget\">\n                                <div class=\"section-heading\">\n                                    <h3>Useful Links</h3>\n                                    <span class=\"animate-border border-black\"></span>\n                                </div>\n                                <ul>\n                                    <li>\n                                    <Link to=\"/about\" style={{textDecoration: 'none' }} >About us</Link>\n                                    </li>\n                                    <li>\n                                    <Link to=\"/sketch\" style={{textDecoration: 'none' }} >Services</Link>\n                                    </li>\n                                   \n                                </ul>\n                                <ul>\n                                <li>\n                                    <Link to=\"/contact-us\" style={{textDecoration: 'none' }} >Contact Us</Link>\n                                    </li>\n                                    \n                                </ul>\n                            </div>\n                            \n                        </div>\n                        \n                        <div class=\"col-md-12 col-lg-6\">\n                            <div class=\"footer-widget\">\n                                <div class=\"section-heading\">\n                                    <h3>Subscribe</h3>\n                                    <span class=\"animate-border border-black\"></span>\n                                </div>\n                                <p>\n                                We are offering features which will be valuable to you. Please subscribe to enjoy them.</p>\n                                \n                                    <div class=\"form-row\">\n                                        <div class=\"col dk-footer-form\">\n                                            <Link to=\"/signup\" style={{textDecoration: 'none' }} >\n                                                {/* <Button style={{ marginTop: '20%' , align : 'center' }} label =    \"Subscribe\"/> */}\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n        \n\n\n        <div class=\"copyright\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <span><Copyright /></span>\n                    </div>\n                    \n                    <div class=\"col-md-6\">\n                        <div class=\"copyright-menu\">\n                            <ul>\n                                <li>\n                                <Link to=\"/\" style={{textDecoration: 'none' }} >Home</Link>\n                                </li>          \n                                <li>\n                                <Link to=\"/contact-us\" style={{textDecoration: 'none' }} >Contact</Link>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    \n                </div>\n                \n            </div>\n        \n        </div>\n\n        <ScrollToTop showUnder={200}>\n                \n        <div id=\"back-to-top\" class=\"back-to-top\">\n            <button class=\"btn btn-dark\" title=\"Back to Top\" style={{display: 'block'}}\n                  onClick={() =>    window.scroll({\n                    top: 0, \n                    left: 0, \n                    behavior: 'smooth'\n                  })\n                  }>\n                <FontAwesomeIcon icon={faAngleUp} />\n            </button>\n        </div>\n\n        </ScrollToTop>\n        \n</footer>\n\n\n\n)\n}\n\nexport default Footer;","F:\\Aoo-Ghr-Bnain-Client\\src\\services\\UserServices.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\components\\PaymentForm.js",["435","436"],"import React from \"react\";\r\nimport {CardElement , useElements , useStripe } from \"@stripe/react-stripe-js\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {ids , setId} from \"../auth/signup\"\r\n\r\n\r\nconst CARD_OPTIONS = {\r\n    iconStyle: \"solid\",\r\n    style: {\r\n      base: {\r\n        iconColor: \"#c4f0ff\",\r\n        color: \"#fff\",\r\n        fontWeight: 500,\r\n        fontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\r\n        fontSize: \"16px\",\r\n        fontSmoothing: \"antialiased\",\r\n        \":-webkit-autofill\" : {color : \"#fce883\"},\r\n        \"::placeholder\" : {color : \"#87bbfd\"}\r\n  \r\n       },\r\n       invalid: {\r\n         iconColor: \"#ffc7ee\",\r\n         color: \"#ffc7ee\"\r\n       }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  export default function PaymentForm(){\r\n    const [success , setSuccess] = React.useState(false);\r\n    \r\n\r\n    const stripe = useStripe();\r\n    const element = useElements();\r\n\r\n    const handleSubmit  = async (e) =>{\r\n        e.preventDefault();\r\n        const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n            type: \"card\",\r\n            card: element.getElement(CardElement)\r\n          })\r\n          \r\n        \r\n        \r\n      if(!error) {\r\n        try{\r\n          const {id} = paymentMethod\r\n          setId(id);\r\n           console.log(id)\r\n           console.log(ids)\r\n\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n      }\r\n    }\r\n        \r\nreturn (\r\n    <>\r\n    {!success ?\r\n    <form onSubmit={handleSubmit}>\r\n        <fieldset className=\"FormGroup\">\r\n    <div className=\"FormRow\">\r\n      <CardElement options={CARD_OPTIONS}/>\r\n\r\n    </div>\r\n\r\n</fieldset>\r\n\r\n<button onClick={handleSubmit}>PAY</button>\r\n</form> \r\n : \r\n\r\n    <div>\r\n        <>Subscribed</>\r\n        </div>} \r\n    </>\r\n)\r\n\r\n}\r\n","F:\\Aoo-Ghr-Bnain-Client\\src\\services\\GenericServices.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\toggleDrawer.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\isWithinElement.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\scrapMe.jsx",["437","438"],"import React from 'react';\nimport axios from 'axios';\nimport {state , \n        setState  , \n        setPrice , \n        setTitle ,\n        setImage ,\n        setPrice2 , \n        setTitle2 ,\n        setImage2 ,\n        setPrice3 , \n        setTitle3 ,\n        setImage3 ,\n        setSteelPrice , \n        setSteelTitle ,\n        setSteelImage ,\n        setSteelPrice2 , \n        setSteelTitle2 ,\n        setSteelImage2 ,\n        setSteelPrice3 , \n        setSteelTitle3 ,\n        setSteelImage3 ,\n        setLoading,\n         } from \"./sketch\"\n\nexport const scrapMe = () => {\n\n    setLoading(true);\n    \n\n        axios.get('https://aoo-ghr-bnain-fyp.herokuapp.com/scrap')\n            .then((res) => {\n\n                setLoading(false);\n                console.log(res.data)\n\n                setImage(res.data.products[0].image);\n                setPrice(res.data.products[0].price);\n                setTitle(res.data.products[0].title);\n\n                setImage2(res.data.products[1].image);\n                setPrice2(res.data.products[1].price);\n                setTitle2(res.data.products[1].title);\n\n                setImage3(res.data.products[2].image);\n                setPrice3(res.data.products[2].price);\n                setTitle3(res.data.products[2].title);\n\n            })\n                        \n            .catch(err => {\n                console.error(err.status);\n                alert(err.status);\n            },{\n                withCredentials: true,\n                headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'\n            }});\n\n            axios.get('https://aoo-ghr-bnain-fyp.herokuapp.com/scrapSteel')\n            .then((res) => {\n\n                // setLoading(false);\n                console.log(res)\n\n                setSteelImage(res.data.products[0].image);\n                setSteelPrice(res.data.products[0].price);\n                setSteelTitle(res.data.products[0].title);\n\n                setSteelImage2(res.data.products[1].image);\n                setSteelPrice2(res.data.products[1].price);\n                setSteelTitle2(res.data.products[1].title);\n\n                setSteelImage3(res.data.products[2].image);\n                setSteelPrice3(res.data.products[2].price);\n                setSteelTitle3(res.data.products[2].title);\n\n                console.log(res.data.products[0].image);\n                console.log(res.data.products[0].price);\n                console.log(res.data.products[0].title);\n\n                console.log(res.data.products[1].image);\n                console.log(res.data.products[1].price);\n                console.log(res.data.products[1].title);\n\n                console.log(res.data.products[2].image);\n                console.log(res.data.products[2].price);\n                console.log(res.data.products[2].title);\n\n            })\n                        \n            .catch(err => {\n                console.error(err.status);\n                alert(err.status);\n                \n            },{\n                withCredentials: true,\n                headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'\n            }});\n\n            setState({ ...state, [\"bottom\"]: true });\n            document.getElementById(\"est\").click() ;\n\n        }\n","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleSave.js",["439","440","441","442","443","444","445","446","447"],"import {saveAs} from 'file-saver';\nimport {saveLayer} from '../sketch';\nimport {myVar} from '../sketch'\nimport { jsPDF } from \"jspdf\";\nimport {marla , totalLayer} from \"../sketch\"\n\nimport {canvWidth , canvHeight} from \"../sketch\"\n\nimport rough from 'roughjs/bundled/rough.esm';\nimport 'jspdf-autotable'\nimport foundation from \"../img/1.jpg\";\n\n\n\nexport function HandleSave() {\n\n    saveLayer();\n\n    const canvas = document.getElementById(\"canvas\");\n    const context = canvas.getContext('2d');\n\n    const canvas2 = document.getElementById(\"canvas2\");\n    const ctx  = canvas2.getContext('2d');\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    ctx.fillStyle = \"black\";\n    ctx.font = \"bold 16px Arial\";\n    ctx.fillText(\"Aoo Ghr Bnain\" , (canvas2.width / 2) - 17, (canvas2.height / 2) + 8);\n\n    // canvas.toBlob(function (blob) {\n    //     saveAs(blob, \"pretty image.png\")\n\n    // });\n\n    console.log(myVar.length)\n\n    \n    var doc = new jsPDF('l', 'mm', [420, 297]);\n\n    var title = prompt(\"House Plot No.\").toString()\n    var title1 = prompt(\"Khasr No.\").toString()\n    var title2 = prompt(\"Khewat No.\").toString()\n    var title3 = prompt(\"Khatoni No.\").toString()\n    var title4 = prompt(\"Town\").toString()\n    var title5 = prompt(\"Address\").toString()\n    var title6 = prompt(\"Owner\").toString()\n    var title7 = prompt(\"S/O or D/O or W/O\").toString()\n    \n    var north = prompt(\"North... Only Enter U for upper, L for lower, R for right, Le for left\").toString()\n    \n    var title8 = \"Scale : 1\\\" = 15.32 ... This is computer generated Scale. Don't worry about it.\"\n    \n    doc.setFont(\"san-serif\", 'bold')\n    doc.setFont(\"san-serif\", 'underline')\n\n    doc.text(\"PROPOSED PLAN OF HOUSE PLOT NO. \" + title+ \"\\n\" +\"KHASR NO. \"+ title1+ \"\\n\" +\"KHEWAT NO. \"+ title2 + \"        KHATONI NO. \" +title3+ \"\\n\" + title4+ \"\\n\" + title5 + \"\\n\" + title6+ \"\\n\" +\"S/O OR D/O OR W/O \"+ title7+ \"\\n\" + title8+ \"\\n\" , 10, 10);\n    \n    if(north == \"U\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\" ^ North is Up ^ \",50, 70)\n\n    }\n    else if(north == \"L\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\" __ North is Down __ \",50, 70)\n    }\n    else if(north == \"R\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\"North is Right  -->\",50, 70)\n    }\n    else if(north == \"Le\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\"<-- North is Left\" ,50, 70)\n    }\n    \n   \n    \n    let estimatess1totall = 0;\n    let estimatess2totall = 0;\n\n    \n\n            for(var k = 0; k < myVar.length; k++) {\n\n                var Data = myVar[k];\n\n                // for(var m = 0; m < Data.length; m++) {\n\n                    // ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    ctx.beginPath();\n                    ctx.rect(0, 0, canvas2.width, canvas2.height);\n                    ctx.stroke();\n                \n                    const roughCanvas2 = rough.canvas(canvas2);\n                    Data.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n\n                    var imgData =  canvas2.toDataURL(\n                        'image/png');      \n                        \n                        canvas2.toBlob(function (blob) {\n                            saveAs(blob, \"pretty image.png\")\n    \n                        });\n                    \n                    doc.addImage(imgData, 'PNG', 10, 80);\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    doc.addPage();\n\n                    for(var m = 0; m < Data.length; m++) {\n\n                    estimatess1totall = estimatess1totall + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\n                    estimatess2totall = estimatess2totall + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\n\n                }\n\n            }\n\n            var myWid = (canvWidth / 15.36).toString();\n\n            var myHt = (canvHeight / 15.36).toString();\n            \n\n            // const roughCanvas2 = rough.canvas(canvas2);\n            // elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n\n            // var imgData =  canvas2.toDataURL(\n            //     'image/png');          \n            \n            // doc.addImage(imgData, 'PNG', 10, 10);\n\n            \n\n            var covered = estimatess2totall * estimatess1totall\n            var floor = totalLayer + 1;\n            var total = parseInt(myWid) * parseInt(myHt) * floor\n\n            console.log(total)\n\n            doc.text(\"Area Detail (As you have created \" + floor + \" Floors. The total area will be calculated as ...)\", 10, 10)\n\n            if(total - covered < 0){\n              var body = [[\"You\" , \"Have Created\" , \"Maximum\"]]\n            }\n            else{\n\n            var body = [[covered , total - covered , total]]\n            }\n            doc.autoTable({\n              margin : {\n                right : 200\n           }\t,\n              head: [['Covered Area Feet', 'Open Feet', 'Total Feet']],\n              body: \n                body  ,\n            \n            })\n            doc.text(\"Land : \", 250, 50)\n\n            var myMarla = marla.toString()\n            \n            // console.log(myMarla)\n\n            // myWid.toString();\n            // myHt.toString();\n\n            doc.text(myMarla + \"  Marla \" + myWid + \" * \" + myHt + \" Feet \", 270, 50)\n\n          //   doc.autoTable({\n\n             \n\n          //     margin : {\n          //       right : 100\n          //  }\t,\n              \n          //     body: [\n          //       ['Floor', '10', 'Sweden'],\n          //       ['Castille', '10', 'Spain'],\n                \n          //     ],\n          //   })\n\n\n            doc.text(\"Foundation\", 230, 210)\n\n            doc.addImage(foundation, 'JPEG', 230, 220, 150, 76);\n            \n            doc.save('sample-file.pdf');\n\n\n            // doc.text(\"Hello world!\", 10, 10);\n            // doc.save(\"a4.pdf\");\n\n    alert(\"File Save Successfully\");\n    // //\n    //\n    // const writeJsonFile = require('write-json-file');\n    // const jsonFile = \"/tmp/exampleFile.json\";\n    // writeJsonFile(jsonFile,{canvas:true}).catch(err => console.log(err));\n    //\n\n\n\n\n}\n","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleMouseMove.js",["448","449","450","451","452","453"],"import {action, \n        setAction ,\n        elements, \n        getElementAtPosition, \n        mouse, \n        selectedElement, \n        tool,\n        setElementWidth , \n        setElementLength ,\n        wall,\n        setElementStrokeWidth } from \"../sketch\";\nimport {updateElement} from \"./updateElement\";\n\nexport const handleMouseMove = (event) => {\n    // const {clientX, clientY} = event;\n\n    let bounds = event.target.getBoundingClientRect();\n    mouse.x = event.pageX - bounds.left - window.scrollX;  // is window.scrollX same for Y\n    mouse.y = event.pageY - bounds.top - window.scrollY;\n\n    if(tool === \"selection\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"move\" : \"default\";\n    }\n\n    if(tool === \"text\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"text\" : \"default\";\n    }\n\n    if(tool === \"eraser\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"move\" : \"default\";\n    }\n    if(tool === \"resize\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"resize\" : \"default\";\n    }\n    // if(tool === \"rectangle\" || tool ===\"circle\" || tool ===\"wall\" || tool ===\"arcL\" ||\n    //     tool ===\"arcR\" || tool ===\"ellipse\"){\n    //\n    //     event.target.style.cursor = getCvsAtPosition(canvas.getBoundingClientRect().width , canvas.getBoundingClientRect().height, elements)\n    //         ? \"crosshair\" : \"default\";\n    // }\n\n    if(action === \"drawing\") {\n        const index = elements.length - 1;\n        const {x1,y1} = elements[index];\n        const sWidth = wall\n        updateElement(index, x1 , y1 , mouse.x, mouse.y , tool , sWidth);\n\n    }\n    else if (action === \"moving\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const sWidth = selectedElement.roughElement.options.strokeWidth\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type , sWidth);\n        \n    }\n    else if (action === \"eraser\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, null);\n    }\n\n    else if (action === \"resize\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const sWidth = selectedElement.roughElement.options.strokeWidth\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        alert(\"Your previous Width was \" + width / 15.36)\n\n        alert(\"Your previous length was \" + height / 15.36)\n        \n        alert(\"Please Note that this will be your Internal Dimensions. We will minus walls area automatically. Thanks For your inconvenience !!!\")\n\n        const newx1 = prompt(\"Your previous x-axis was \" + x1 + \" Enter x-axis \")\n        // const newx2 = prompt(\"Your previous width was \" + x2 + \" Enter x2 \")\n        let newWidth = prompt(\"Your previous width was \" + width / 15.36 + \"Feet. Enter new Width in feet \")\n        newWidth = newWidth * 15.45\n        // newWidth = newWidth - newx1\n        \n        const newy1 = prompt(\"Your previous y-axis was \" + y1 + \" Enter y-axis \")\n        // const newy2 = prompt(\"Your previous y2 was \" + y2 + \" Enter y2 \")\n        let newHeight = prompt(\"Your previous height was \" + height / 15.36 + \"Feet. Enter new height in feet \")\n        newHeight = newHeight * 15.45\n        // newHeight = newHeight - newy1\n       \n        // type.scale(mouse.x , mouse.y);\n\n        if(newx1 && newWidth && newy1 && newHeight)\n        {\n        // updateElement(id, newx1, newy1, newx2, newy2, type, sWidth);\n        updateElement(id, newx1, newy1, newWidth , newHeight, type, sWidth);\n\n        }\n        else{\n            updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type, sWidth);\n        }\n        setAction(\"selection\")\n\n        alert(\"Now Consider clicking on selection tool and then the line which is shown to draw your re - factor sketch and think to move your cursor slightly\")\n    }\n\n    else if (action === \"sizes\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY, strokeWidth} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        setElementWidth(width);\n        setElementLength(height); \n        \n        // console.log(selectedElement)\n        setElementStrokeWidth(selectedElement.roughElement.options.strokeWidth)\n    }\n\n};","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleMouseUp.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\handleMouseDown.js",["454","455","456"],"import {    mouse ,\n            myArr ,\n            setMyArr , \n            elements , \n            setElements ,\n            getElementAtPosition , \n            setAction , \n            selectedElement,\n            setSelectedElement, \n            tool } \n        \n            from \"../sketch\";\n\n\nimport {createElement} from \"./createElement\";\n\nexport const handleMouseDown = (event) => {\n    // const { clientX , clientY} = event;\n    if (tool === \"selection\") {\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\n        if(element)\n        {\n            const offsetX = mouse.x - element.x1 ;\n            const offsetY = mouse.y - element.y1 ;\n\n            setSelectedElement({...element,offsetX,offsetY});\n            setAction(\"moving\");\n        }\n\n    }\n    else if(tool === \"eraser\")\n    {\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\n        if(element)\n        {\n            const offsetX = mouse.x - element.x1 ;\n            const offsetY = mouse.y - element.y1 ;\n            setSelectedElement({...element,offsetX,offsetY});\n            setAction(\"eraser\");\n        }\n    }\n\n    else if(tool === \"text\")\n    {\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\n        if(element)\n        {\n            const offsetX = mouse.x - element.x1 ;\n            const offsetY = mouse.y - element.y1 ;\n            setSelectedElement({...element,offsetX,offsetY});\n            setAction(\"text\");\n        }\n    }\n    else if(tool === \"resize\")\n    {\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\n        if(element)\n        {\n            const offsetX = mouse.x - element.x1 ;\n            const offsetY = mouse.y - element.y1 ;\n            setSelectedElement({...element,offsetX,offsetY});\n            setAction(\"resize\");\n        }\n    }\n\n    else if(tool === \"sizes\")\n    {\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\n        if(element)\n        {\n            const offsetX = mouse.x - element.x1 ;\n            const offsetY = mouse.y - element.y1 ;\n            setSelectedElement({...element,offsetX,offsetY});\n\n            setAction(\"sizes\")\n        }\n    }\n\n    else {\n        setAction(\"drawing\");\n        // const {clientX, clientY} = event;\n        const id = elements.length;\n        const element =  createElement(id, mouse.x, mouse.y, mouse.x, mouse.y, tool);\n        setElements(prevState => [...prevState, element]);\n\n\n    }\n};","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\useStyles.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\updateElement.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\createElement.js",["457"],"import rough from 'roughjs/bundled/rough.esm';\nimport {wall, setWall} from \"../sketch\";\n\nconst generator = rough.generator();\n\nexport function createElement(id, x1, y1, x2, y2 , type , sWidth){\n    const roughElement = type === \"line\"\n        ? generator.line(x1,y1,x2,y2, { roughness: 0 , strokeWidth: wall})\n\n        : type === \"rectangle\" ? generator.rectangle(x1, y1, x2-x1, y2-y1 , { roughness: 0 , strokeWidth: sWidth })\n\n            : type === \"ellipse\" ? generator.ellipse(x1, y1, x2-x1, y2-y1 , { roughness: 0 , strokeWidth: sWidth})\n\n                : type === \"arcL\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI , Math.PI * 1.5, true ,  { roughness: 0 , strokeWidth: 3})\n\n                    : type === \"arcLB\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI * 2.5 , Math.PI * 3.0 , true ,  { roughness: 0 , strokeWidth: 3})\n\n                        : type === \"arcR\" ? generator.arc(x1, y1, x2-x1, x2-x1 ,  Math.PI * 1.5 , Math.PI * 2.0, true ,  { roughness: 0 , strokeWidth: 3})\n\n                            : type === \"arcRB\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI * 2.0 , Math.PI * 2.5, true ,  { roughness: 0 , strokeWidth: 3})\n                            \n                                : type === \"circle\" ? generator.circle(x1, y1, x2-x1,   { roughness: 0 , strokeWidth: sWidth}) :\n\n                                    \"\" ;\n\n\n    return {id, x1, y1, x2, y2, type , roughElement};\n\n}","F:\\Aoo-Ghr-Bnain-Client\\src\\sketchHelper\\TabPanel.js",[],"F:\\Aoo-Ghr-Bnain-Client\\src\\animatedButton\\Button.js",[],"E:\\aoo-ghr-bnain-update\\src\\index.js",[],"E:\\aoo-ghr-bnain-update\\src\\App.js",["458","459","460"],"import './css/App.css';\r\nimport './helper/responsive';\r\nimport './css/Button.css';\r\nimport Nav from './helper/nav';\r\nimport PostForm from \"./postForm\";\r\nimport AnimatedCursor from \"react-animated-cursor\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    Redirect,\r\n    Route,\r\n    Switch,\r\n} from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport login from \"./auth/login.js\";\r\nimport signup from \"./auth/signup.js\";\r\n// import Cart from \"./components/Cart.jsx\";\r\nimport contactus from \"./contact\";\r\nimport Home from \"./home.jsx\";\r\nimport notfound from \"./helper/notfound.js\";\r\nimport sketch from \"./sketch\";\r\n// import Addproduct from \"./components/products/Addproduct.jsx\";\r\n// import Editproduct from \"./components/products/editProduct\";\r\nimport dashboardA from \"./admin/Dashboard\";\r\nimport about from \"./About\";\r\nimport TopMenu from \"./helper/nav\";\r\nimport submitted from \"./submitted\";\r\nimport addByAdmin from \"./auth/addByAdmin\";\r\nimport Footer from \"./helper/footer\"\r\nimport dashboardB from \"./users/userDashboard\";\r\nimport Payment from \"./services/payment\";\r\n\r\n// import Checkout from \"./components/checkout/Checkout.js\";\r\n function App() {\r\n    function forceUpdateHandler(){\r\n        window.location.reload(false);\r\n          }\r\n          \r\n\r\n     return (\r\n        <>\r\n\r\n            {/*<PostForm />*/}\r\n     {/*<Nav />*/}\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <Router>\r\n                <div>\r\n\r\n                <AnimatedCursor  \r\n                    innerSize={10}\r\n                    outerSize={10}\r\n                    color='193, 11, 111'\r\n                    outerAlpha={0.2}\r\n                    innerScale={0.7}\r\n                    outerScale={5}/>\r\n\r\n                    <ToastContainer />\r\n                    <TopMenu />\r\n                    <Switch>\r\n                        {/*<Route*/}\r\n                        {/*    path=\"/products/product_details/:id\"*/}\r\n                        {/*    component={ProductPage}*/}\r\n                        {/*></Route>*/}\r\n                        {/*<Route path=\"/cart/:id?\" component={Cart}></Route>*/}\r\n                        {/*<Route*/}\r\n                        {/*    path=\"/manageProducts/Addproduct\"*/}\r\n                        {/*    component={Addproduct}*/}\r\n                        {/*></Route>*/}\r\n                        {/*<Route*/}\r\n                        {/*    path=\"/manageProducts/Editproduct/:id\"*/}\r\n                        {/*    component={Editproduct}*/}\r\n                        {/*></Route>*/}\r\n\r\n                        <Route path=\"/dashboardA\" component={dashboardA}></Route>\r\n                        <Route path=\"/dashboardB\" component={dashboardB}></Route>\r\n\r\n                        <Route path=\"/payment\" component={Payment}></Route>\r\n\r\n                        {/*<Route path=\"/checkout\" component={Checkout}></Route>*/}\r\n\r\n                        {/*<Route path=\"/products\" component={products}></Route>*/}\r\n\r\n                        <Route path=\"/contact-us\" component={contactus} \r\n                        // onClick={forceUpdateHandler}\r\n                        />\r\n\r\n                        <Route path=\"/submitted\" component={submitted} \r\n                        // onClick={forceUpdateHandler}\r\n                        />\r\n                        <Route path=\"/notfound\" component={notfound}/>\r\n                        <Route path=\"/login\" component={login} \r\n                        // onClick={forceUpdateHandler}\r\n                        />\r\n                        <Route path=\"/signup\" component={signup}/>\r\n                        <Route path=\"/sketch\" component={sketch}/>\r\n                        <Route path=\"/about\" component={about}/>\r\n\r\n                       \r\n                        <Route path=\"/addByAdmin\" component={addByAdmin}/>\r\n                        <Route path=\"/\" exact component={Home}/>\r\n                        <Redirect to=\"/notfound\"/>\r\n                    </Switch>\r\n                    <Footer/>\r\n                </div>\r\n            </Router>\r\n\r\n        </>\r\n  )\r\n}\r\nexport default App;\r\n","E:\\aoo-ghr-bnain-update\\src\\reportWebVitals.js",[],"E:\\aoo-ghr-bnain-update\\src\\home.jsx",["461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480"],"import './css/App.css';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport front from './img/front.jpg';\r\n// import home1 from \"./img/home1.png\";\r\nimport home1 from \"./img/home1-removebg-preview (2).png\";\r\n// import home2 from \"./img/home2.png\";\r\nimport home2 from \"./img/home2-removebg-preview (2).png\";\r\n// import home3 from \"./img/home3.png\";\r\nimport home3 from \"./img/home3-removebg.png\";\r\n// import home4 from \"./img/home4.jpg\";\r\n// import home4 from \"./img/home4-removebg.png\";\r\n// import home4 from \"./img/home4-removebg-preview.png\";\r\n\r\nimport home4 from \"./img/home44.png\";\r\n\r\nimport home5 from \"./img/home5.png\";\r\nimport coffee from \"./img/coffee.jpg\"\r\nimport lightening from \"./img/lightening.png\";\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { Spin } from 'antd';\r\nimport { check } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\r\nimport MyEstimates from \"./sketch\";\r\nimport logo from \"./img/logoA.png\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { FaBeer } from 'react-icons/fa';\r\nimport { LogoNodejs } from 'react-ionicons'\r\nimport { Heart } from 'react-ionicons'  \r\nimport { Close } from 'react-ionicons'  \r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n// import AnimatedButton from 'animatedButton/ButtonHover';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    p: {\r\n            overflow: \"visible\",\r\n            letterSpacing: 0.5,\r\n            color: \"#433E69\",\r\n            fontSize: '20px',\r\n            fontWeight: 700,\r\n            fontStyle: \"italic\",\r\n            fontFamily: `\"Inter-ExtraBoldItalic\", \"Inter\", sans-serif`,\r\n            lineHeight: 2,\r\n            textAlign: \"center\",\r\n            top: '20%' ,\r\n            height: 'auto',\r\n            width : '100%'\r\n            \r\n        },\r\n    frame : {\r\n        width: '100%',\r\n        height: 'auto',\r\n    },\r\n\r\n    textframe:{\r\n    width: '100%',\r\n  height: 'auto',\r\n  overflow: \"hidden\",\r\n//   transform: \"translate('-50%' , -'50%' )\" ,\r\n  background: \"radial-gradient(92.10000000000001% 50% at 5.2% 52.7%, #2266ff 0%, hsl(222, 57%, 77%) 100%)\",\r\nborderRadius: \"5%\",   \r\n\r\n},\r\n\r\nframe1 : {\r\n\r\n    width: '100%',\r\n    height: 'auto',\r\n    overflow: 'visible',\r\n    background: \"radial-gradient(100% 50% at 0% 50%, #593b3b 0%, hsla(0, 71%, 76%, 0.66) 100%)\",\r\n\r\n},\r\n\r\nliText : {\r\n\r\n    width: '100%',\r\n    height: 'auto',\r\n    overflow: 'visible',\r\n    color: 'white',\r\n    textAlign: 'left',\r\n    lineHeight: '2.3',\r\n    fontWeight: '700',\r\n    fontStyle: 'italic',\r\n    fontFamily: \"Inter-Bold\" || \"Inter\" || \"sans-serif\",\r\n    fontSize: '14.3px',\r\n    letterSpacing: '0px',\r\n},\r\n\r\n    myStyle : {\r\n        position: 'absolute',\r\n        top: '20%' ,\r\n        left: '35%' ,\r\n        transform: \"translate('-50%' , -'50%' )\" ,\r\n        width: '30%',\r\n        height: 'auto',\r\n    }\r\n\r\n\r\n\r\n}));\r\n\r\nconst Sketch = () => <div> <MyEstimates/>     </div>;\r\n\r\nfunction Home() {\r\n\r\n    const width = '100%';\r\n    const height = 'auto';\r\n\r\n    const myClass = useStyles();\r\n\r\n    return (\r\n<div style={{overflow : 'hidden'}}>\r\n<img width = {width} height = {height}\r\n                     src = {front}\r\n                     alt=\"image\" \r\n                     style = {{  opacity:0.8 , borderBottomRightRadius : '20%' }}\r\n                     \r\n                     />\r\n                     \r\n\r\n                     <img src = {logo} className={myClass.myStyle}/>\r\n\r\n<div style={{paddingLeft : \"10px\" , paddingRight : \"10px\" }}>\r\n<div className=\"container\">\r\n<div className=\"row\" style={{marginTop:80}}>\r\n  <div className=\"col-md-3\"style={{marginTop:70}}>\r\n      <div className={myClass.textframe}>\r\n    <p  className={myClass.p} >\r\n     Here you can build your buildings ( architectural  designs layout)\r\n    and estimate  the results. You can also see the\r\n     trending materials in market and see their prices.</p>\r\n                </div>\r\n    </div>\r\n\r\n   \r\n\r\n<div className=\"col-md-4\">\r\n\r\n<p className={myClass.p} style ={{textAlign: \"left\" , marginTop: '20%' , fontSize : '15.5px'}}>\r\n                     Sketch with app estimate with </p>\r\n                     <div style={{marginTop: '10%'}}></div>\r\n                         <Link to=\"/sketch\" style={{textDecoration: 'none' }} >\r\n                             \r\n                                 <button class=\"glow-on-hover\" type=\"button\">Sketch App Estimate </button>\r\n                         \r\n                         </Link>\r\n<div style={{marginTop: '10%'}}></div>\r\n                         </div>\r\n<div className=\"col-md-4\">\r\n    <img className={myClass.frame}\r\n                     width={\"35%\"}\r\n                     src = {home2}\r\n                     alt=\"image\" />\r\n                     {/* </div>\r\n                     <div className=\"col-md-3\" style = {{marignTop : '5%'}}> */}\r\n                    <img className={myClass.frame}\r\n                     src = {home1}\r\n                     alt=\"image\" />\r\n    </div>\r\n\r\n</div>\r\n\r\n<div className=\"row\" style={{marginTop: '3%'}}>\r\n    <div className=\"col-md-12\">\r\n\r\n    <p className={myClass.p} >\r\n    Just two Steps For your results</p>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n<div className=\"row\" style={{marginTop : '3%'}}>\r\n    <div className=\"col-md-5\">\r\n\r\n    <p className={myClass.p} >\r\n                    Layout Design </p>\r\n                    <img style={{width:'50%' , height:'auto' ,  marginLeft: '25%' \r\n  , marginTop : '3%'}}\r\n                 src = {home4}\r\n                 alt=\"image\" />\r\n\r\n\r\n    </div>\r\n\r\n    <div className=\"col-md-2\">\r\n        \r\n        {/* <Spin style={{width:'100%' , marginTop: '20%' , marginBottom:'20%'}} /> */}\r\n\r\n        <img style={{width:'150%' , height:'auto' ,  marginLeft: '-25%' \r\n  , marginTop : '5%'}}\r\n                 src = {lightening}\r\n                 alt=\"image\" />\r\n    </div>\r\n\r\n    <div className=\"col-md-5\">\r\n\r\n    <p className={myClass.p} style={{marginTop:'3%'}}>\r\n    Estimate Design </p>\r\n\r\n    <img style={{width:'60%' , height:'auto' , marginLeft: '25%' }}\r\n                 src = {home3}\r\n                 alt=\"image\" />\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n<div className=\"row\">\r\n<img style={{width:'60%' , height:'auto' , marginLeft: '20%' }}\r\n                 src = {home5}\r\n                 alt=\"image\" />\r\n\r\n</div>\r\n<div className=\"row\">\r\n<p className={myClass.p} \r\nstyle={{\r\n    marginTop:'3%' , \r\n    fontStyle : 'normal' , \r\n    fontSize : '20px' ,\r\n    }}>\r\nBuy us a cup of Coffee and get\r\n\r\nyour Subscription today </p>\r\n\r\n</div>\r\n\r\n\r\n<div className=\"row\" style={{marginTop : '3%'}}>\r\n<div className=\"col-md-4\">\r\n\r\n\r\n\r\n<img style={{width:'80%' , height:'auto' , borderRadius : '10%' }}\r\n                 src = {coffee}\r\n                 alt=\"image\" />\r\n\r\n\r\n</div>\r\n\r\n\r\n<div className=\"col-md-4\">\r\n    <div className={myClass.frame1}>\r\n{/* <div style={{marginTop:\"12%\"}}></div> */}\r\n<Typography className={myClass.p} style = {{paddingTop : '20px' , fontSize : '20px'}}>Features</Typography>\r\n\r\n<ol className={myClass.liText}>\r\n<li>Build</li>\r\n<li>Estimate</li>\r\n<li>See Material From Other Sources</li>\r\n<li>Save Locally</li>\r\n<li>Save On Web App</li>\r\n<li>Save As pdf For Verification (NOC and print on A3)</li> \r\n<li>View From DB</li>\r\n</ol>\r\n<Link to=\"/signup\" style={{textDecoration: 'none' }} >\r\n                                                              \r\n                                 <button style = {{\r\n                                                width:'320px' , \r\n                                                }} class=\"glow-on-hover\" type=\"button\">\r\n                                     \r\n                                     We will be glad to see you\r\n                                     \r\n                                     </button>\r\n                         \r\n                         </Link>\r\n    </div>\r\n    </div>\r\n\r\n\r\n\r\n<div className=\"col-md-2\"><div className={myClass.frame1}\r\n\r\nstyle = {{background: \"radial-gradient(100% 50% at 0% 50%, #593b3b 0%, hsla(0, 71%, 76%, 0.66) 100%)\" }}>\r\n\r\n{/* <div style={{marginTop:\"25%\"}}></div> */}\r\n\r\n<Typography className={myClass.p} style = {{paddingTop : '20px', fontSize : '20px' }}>UnSubscribed</Typography>\r\n\r\n<ol className={myClass.liText} style = {{textAlign : 'center'}} >\r\n<li>  <Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/>  </li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Close\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.error('Service Not Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Close\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.error('Service Not Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li> \r\n<li><Close\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.error('Service Not Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n</ol>\r\n<Link to=\"/sketch\" style={{textDecoration: 'none' }} >\r\n                             \r\n                                 <button style = {{\r\n                                                width:'160px' , \r\n                                                }} class=\"glow-on-hover\" type=\"button\">Sketch App</button>\r\n                         \r\n                         </Link>\r\n\r\n    </div></div>\r\n\r\n\r\n<div className=\"col-md-2\"><div className={myClass.frame1} \r\n\r\nstyle = {{background: \"radial-gradient(100% 50% at 0% 50%, #593b3b 0%, hsla(0, 71%, 76%, 0.66) 100%)\" }}>\r\n\r\n{/* <div style={{marginTop:\"25%\"}}></div> */}\r\n\r\n\r\n<Typography className={myClass.p} style = {{paddingTop : '20px' , fontSize : '20px'}}>Subscribed</Typography>\r\n\r\n<ol className={myClass.liText} style = {{textAlign : 'center'}}>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li> \r\n<li><Heart\r\n  color={'#8B0000'}\r\n  beat\r\n  height=\"auto\"\r\n  width=\"18%\"\r\n  onClick={() => toast.success('Service Available', {\r\n    position: \"bottom-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  })}\r\n/></li>\r\n</ol>\r\n<Link to=\"/signup\" style={{textDecoration: 'none' }} >\r\n                             \r\n                                 <button style = {{\r\n                                                width:'160px' , \r\n                                                }} class=\"glow-on-hover\" type=\"button\">Subscribe</button>\r\n                         \r\n                         </Link>\r\n    </div></div>\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n</div>\r\n\r\n\r\n//             <Router>\r\n\r\n//                 <Switch>\r\n//                     <Route path=\"/sketch\" component={Sketch} />\r\n//                 </Switch>\r\n//             </Router>\r\n\r\n    )\r\n}\r\nexport default Home;\r\n","E:\\aoo-ghr-bnain-update\\src\\helper\\notfound.js",["481"],"import React from \"react\";\r\nimport notFound from \"../img/404-not-found.jpg\";\r\nimport 'bootstrap/dist/js/bootstrap.min.js'\r\n\r\nconst notfound = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <img src={notFound} width=\"100%\" height=\"auto\"  style = {{marginTop: '10%' , marginBottom: '10%'}}/>\r\n     </div>\r\n  );\r\n};\r\n\r\nexport default notfound;\r\n","E:\\aoo-ghr-bnain-update\\src\\auth\\login.js",["482","483","484","485","486"],"\r\n// import React, { Component } from 'react';\r\n// import axios from 'axios';\r\n\r\n// class Create extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             username: '',\r\n//             password: '',\r\n//             data:'',\r\n//         };\r\n//     }\r\n\r\n//     handleInputChange = e => {\r\n//         this.setState({\r\n//             [e.target.name]: e.target.value,\r\n//         });\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n\r\n//         // console.log(\"happy\")\r\n//         const { username , password } = this.state;\r\n\r\n\r\n//         const account = {\r\n//             username,\r\n//             password,\r\n//         };\r\n\r\n//         // console.log(account);\r\n\r\n    \r\n\r\n//         axios.post('http://localhost:5000/auth', account )\r\n//             .then((res) =>{ \r\n//                             // this.data = res.data\r\n//                             console.log(res.status);\r\n//                             console.log(res.isLoggedin);\r\n//                 if(res.isLoggedin){\r\n\r\n//                     window.location.href = '/welcome ';\r\n//                 }\r\n                            \r\n                            \r\n//                         })\r\n//             .catch(err => {\r\n//                 console.error(err.status);  \r\n//             },{\r\n//                 withCredentials: true,\r\n//                 headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'\r\n//             }});\r\n\r\n//         this.setState({ name: '', email: '' })\r\n\r\n//         document.forms['myform'].reset();\r\n\r\n\r\n//     };\r\n\r\n   \r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <br />\r\n//                 <div className=\"container\">\r\n\r\n//                         <div className=\"login-form\">\r\n//                             <h1>Login Form</h1>\r\n//                             <form onSubmit={this.handleSubmit} id=\"myform\">\r\n//                                 <input type=\"text\" name=\"username\" placeholder=\"Username\" required onChange={this.handleInputChange}/>\r\n//                                     <input type=\"password\" name=\"password\" placeholder=\"Password\" required onChange={this.handleInputChange}/>\r\n//                                         <input type=\"submit\"/>\r\n//                             </form>\r\n//                         </div>\r\n//                 </div>\r\n//                 <h1>{this.data}</h1>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Create;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport UserServices from \"../services/UserServices\";\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n\r\n  const [userName, setUserName] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"userName\"\r\n            label=\"email address\"\r\n            name=\"User Name\"\r\n            autoComplete=\"userName\"\r\n            autoFocus\r\n            value={userName}\r\n            onChange={(e) => {\r\n              setUserName(e.target.value);\r\n            }}\r\n            onKeyPress={event => {\r\n              if (event.key === 'Enter') {\r\n            document.getElementById('save').click();\r\n              }\r\n          }}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={password}\r\n            required\r\n            onChange={(e) => {\r\n              setPassword(e.target.value);\r\n            }}\r\n            onKeyPress={event => {\r\n              if (event.key === 'Enter') {\r\n            document.getElementById('save').click();\r\n              }\r\n          }}\r\n          />\r\n\r\n          <Button\r\n          id = \"save\"\r\n            className={classes.submit}\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n\r\n              // console.log({userName}, {password})\r\n              UserServices.login(userName, password)\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  window.location.href = \"/dashboardB\";\r\n\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n            }}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item>\r\n              <Link href=\"/signup\" variant=\"body2\">\r\n                Don't have an account? {\"Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      \r\n    </Container>\r\n  );\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\auth\\signup.js",["487","488","489","490","491","492"],"import Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport UserServices from \"../services/UserServices\";\r\nimport PasswordStrengthBar from 'react-password-strength-bar';\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport axios from \"axios\";\r\n\r\n\r\nimport { Elements } from '@stripe/react-stripe-js'\r\nimport { loadStripe } from \"@stripe/stripe-js\"\r\n\r\nimport PaymentForm from \"../components/PaymentForm\"\r\n\r\nlet ids, setId;\r\n\r\nexport {ids , setId};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\nconst PUBLIC_KEY = \"pk_test_51IorIIJmpNZTNdrVSyS2DzXf6i1NSsowyVHM90rIurlyXK9SXfLKq8rMb4ppoc0zPhcnLff6kUKuOXB90Uy9FyG100kml35YcH\"\r\nconst stripeTestPromise = loadStripe(PUBLIC_KEY)\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  [ids, setId] = React.useState(null)\r\n\r\n\r\n\r\n\r\n\r\n  const [token , setToken] = React.useState(false);\r\n\r\n  \r\n  \r\n  \r\n \r\n\r\n\r\n\r\n\r\n\r\n  function handleToken(token, addresses) {\r\n\r\n      toast.error(\"This Function will work properly on online server\", {\r\n      position: \"bottom-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n          });\r\n\r\n\r\n      setToken(true)\r\n\r\n    new Promise((resolve, reject) => {\r\n\r\n      console.log(token)\r\n\r\n    axios.post(\r\n      \"https://aoo-ghr-bnain-fyp.herokuapp.com/mycheckout\",\r\n      { token }\r\n    ).then((res)=>{\r\n      resolve(res)\r\n    })\r\n    .catch((err)=>{\r\n      reject(err)\r\n    });\r\n  });\r\n\r\n\r\n\r\n    // this.post(\"http://localhost:5000/register\", { username, email, password , role})\r\n    //     .then((res) => {\r\n    //       resolve(res);\r\n    //     })  \r\n    //     .catch((err) => {\r\n    //       reject(err);\r\n    //     });\r\n\r\n    // console.log(handleToken)\r\n\r\n\r\n\r\n    // const { status } = response.data;\r\n    // console.log(\"Response:\", response.data);\r\n    // if (status === \"success\") {\r\n    //   toast(\"Success! Check email for details\", { type: \"success\" });\r\n    // } else {\r\n    //   toast(\"Something went wrong\", { type: \"error\" });\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"name\"\r\n                name=\"name\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"Full Name\"\r\n                autoFocus\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                value={email}\r\n                onChange={(e) => {\r\n                  setEmail(e.target.value);\r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={(e) => {\r\n                  setPassword(e.target.value);\r\n\r\n                  \r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n                  <br></br>\r\n          <PasswordStrengthBar password={password} />\r\n<Grid>\r\n\r\n\r\n  <Elements stripe = {stripeTestPromise}>\r\n    \r\n              <PaymentForm/>\r\n  </Elements>\r\n  \r\n\r\n</Grid>\r\n          \r\n\r\n        {ids == null ? ( \r\n        \r\n        <Button\r\n            disabled\r\n          id = \"save\"\r\n            fullWidth\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              UserServices.register(name, email, password , \"user\")\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  toast.success(data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                  window.location.href = \"/login\";\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n            }}\r\n          >\r\n            Sign Up\r\n          </Button>) : ( \r\n          \r\n          <Button\r\n          \r\n          id = \"save\"\r\n            fullWidth\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              UserServices.register(name, email, password , \"user\" , 100, ids)\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  toast.success(data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                  window.location.href = \"/login\";\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n            }}\r\n          >\r\n            Sign Up\r\n          </Button>) }\r\n\r\n          {/* <Button\r\n          \r\n          id = \"save\"\r\n            fullWidth\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n\r\n                UserServices.register(name, email, password , \"user\")\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  toast.success(data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                  window.location.href = \"/login\";\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n               \r\n              }}\r\n          >\r\n            Sign Up\r\n          </Button> */}\r\n        <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"/login\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n  \r\n    </Container>\r\n  );\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\postForm.js",[],"E:\\aoo-ghr-bnain-update\\src\\contact.js",["493","494","495","496","497","498"],"import Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport UserServices from \"./services/UserServices\";\r\nimport avatar from \"./img/contactAvatar.jpg\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const [name, setName] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [query, setQuery] = React.useState(\"\");\r\n  \r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <img src={avatar} width=\"100%\" height = \"auto\"/>\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          We Want To Listen From You\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"name\"\r\n                name=\"name\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"Full Name\"\r\n                autoFocus\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                  document.getElementById('save').click();\r\n                    }\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                value={email}\r\n                onChange={(e) => {\r\n                  setEmail(e.target.value);\r\n                }}\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                  document.getElementById('save').click();\r\n                    }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                onKeyPress={event => {\r\n                    if (event.key === 'Enter') {\r\n                  document.getElementById('save').click();\r\n                    }\r\n                }}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                fullHeight\r\n                name=\"query\"\r\n                label=\"Query\"\r\n                type=\"query\"\r\n                id=\"query\"\r\n                value={query}\r\n                onChange={(e) => {\r\n                  setQuery(e.target.value);\r\n\r\n                  \r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n          \r\n          id = \"save\"\r\n            fullWidth\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              UserServices.contact(name, email, query)\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  toast.success(data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n\r\n                setName(\"\"); setEmail(\"\"); setQuery(\"\");\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      \r\n    </Container>\r\n  );\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\About.js",["499","500","501","502","503","504","505","506"],"import { Typography } from '@material-ui/core';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport about from './img/about.jpg'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport home1 from './img/home1.png'\r\nimport about111 from './img/about111.jpeg'\r\nimport about222 from './img/about222.jpg'\r\nimport { useState, useEffect } from 'react';\r\nimport { Icon } from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/map-marker'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n    h:{\r\n        marginTop : '20%',\r\n        color: \"green\"\r\n    },\r\n\r\n    text : {\r\n           fontSize : '15px',\r\n           overflow: \"visible\",\r\n           fontWeight: 800,\r\n           fontStyle: \"italic\",\r\n           fontFamily: `\"Inter-ExtraBoldItalic\", \"Inter\", sans-serif`,\r\n           color: \"#433E69\",\r\n           letterSpacing: 1,\r\n           lineHeight: 1.5,\r\n    },\r\n\r\n    frame : {\r\n        height: \"auto\",\r\n        overflow: \"visible\",\r\n        display: 'block',\r\n        marginTop : '10%',\r\n        marginBottom: '10%',\r\n      },\r\n\r\n      frame2 : {\r\n        width: \"85%\",\r\n        height: 'auto',\r\n        background: \"radial-gradient(100% 50% at 0% 46.6%, #33aaff 0%, hsl(0, 0%, 66%) 100%)\",\r\n        overflow: \"visible\",\r\n      }\r\n\r\n}));\r\n\r\nfunction getWindowDimensions() {\r\n    const width = window.innerWidth;\r\n    return width\r\n    \r\n  }\r\n\r\nexport default function About() {\r\n\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n    const [fontSize, setFontSize] = useState(25);\r\n    const [widthh , setWidthh] = useState(750);\r\nuseEffect(() => {\r\n\r\n    setWindowDimensions(getWindowDimensions());\r\n\r\n    if(windowDimensions < 1024){ \r\n        setFontSize(12);\r\n        setWidthh(280);\r\n    }\r\n})\r\n    \r\n    const myClass = useStyles();\r\n\r\n    return(\r\n\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <img src={about} width = '100%' height = 'auto' style = {{marginTop: '10%'}}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-xs-12\" style = {{padding : 15}}>\r\n                    <h4 className={myClass.h}>Who We Are</h4>\r\n                    <Typography className={myClass.text}>We are Students in UOL. We have made this project as FYP</Typography>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n            <div className=\"col-xs-12\">\r\n                    <div className={myClass.frame}>\r\n                        <div style = {{marginLeft:'10%'}}>    \r\n                        <img src={about111} width=\"35%\" height = \"auto\"/>\r\n                        <img src={about222} width = \"50%\" height = \"auto\"/>\r\n\r\n                            <div className = {myClass.frame2}>\r\n            <Typography className = {myClass.text} style = {{fontSize : fontSize , marginLeft : '12%'}}>\r\n            Designed By: UOL Students <br/>\r\n            Supervisor: Sir Hassan Bajwa <br/>\r\n            Ehtisham ur Rehman (70069403@student.uol.edu.pk) <br/>\r\n            Saad Qadeer (70069780@student.uol.edu.pk) <br/> </Typography>\r\n\r\n                            </div>\r\n                            \r\n\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"row\">\r\n            <div className=\"col-xs-12\" style = {{padding : 15}}>\r\n                    <h4 className={myClass.h}>Where to Find us</h4>\r\n                    <Typography className={myClass.text}>The University of Lahore, Defence Road Campus</Typography>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            <div className=\"row\">\r\n            <div className=\"col-xs-12\" style = {{marginLeft:'10%'  }} >\r\n            <iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3405.82331630059!2d74.23897181549792!3d31.39143496063751!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3919018a8ea548c1%3A0x4a52db69c2c814f!2sThe%20University%20of%20Lahore!5e0!3m2!1sen!2s!4v1615126762811!5m2!1sen!2s\" \r\n            width={widthh} height=\"auto\" style={{border:1}} allowfullscreen=\"yes\" loading=\"eager\"></iframe>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n\r\n        </div>\r\n    )\r\n}","E:\\aoo-ghr-bnain-update\\src\\sketch.js",["507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533"],"import './css/App.css';\r\nimport React, {useLayoutEffect,useEffect, useState} from 'react';\r\nimport rough from 'roughjs/bundled/rough.esm';\r\nimport Button from '@material-ui/core/Button';\r\nimport clsx from 'clsx';\r\nimport TabPanel from \"./sketchHelper/TabPanel\";\r\nimport PropTypes from 'prop-types';\r\nimport {useTheme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport {Avatar,  Input, InputAdornment, InputLabel, Menu, MenuItem} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport {ButtonGroup as MaterialButtonGroup}  from \"@material-ui/core\";\r\n\r\nimport SwapHorizontalCircleIcon from '@material-ui/icons/SwapHorizontalCircle';\r\nimport BuildIcon from '@material-ui/icons/Build';\r\nimport LandscapeIcon from '@material-ui/icons/Landscape';\r\nimport SwapVerticalCircleIcon from '@material-ui/icons/SwapVerticalCircle';\r\nimport useStyles from \"./sketchHelper/useStyles\"; \r\nimport {handleMouseDown} from \"./sketchHelper/handleMouseDown\";\r\nimport {handleMouseUp} from \"./sketchHelper/handleMouseUp\";\r\nimport {handleMouseMove} from \"./sketchHelper/handleMouseMove\";\r\nimport {HandleSave} from \"./sketchHelper/handleSave\";\r\nimport {isWithinElement} from \"./sketchHelper/isWithinElement\";\r\nimport {toggleDrawer , toggleDrawer2} from \"./sketchHelper/toggleDrawer\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {scrapMe} from './scrapMe'\r\nimport { toast } from \"react-toastify\";\r\nimport UserServices from \"./services/UserServices\";\r\nimport { Spin } from 'antd';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport surface from './img/surface.jpg'; \r\nimport steel from './img/steel.jpg'; \r\nimport brick from './img/brick.jpg'; \r\nimport sand from './img/sand.jpg';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faSave} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faVoteYea} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faIndustry} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faGripLinesVertical} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faSquare} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faCircleNotch} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faDoorOpen} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faEraser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faFileDownload} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faLayerGroup} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faTrashAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faPalette} from  \"@fortawesome/free-solid-svg-icons\";\r\nimport {faGetPocket} from  \"@fortawesome/free-brands-svg-icons\";\r\nimport {faJoget} from  \"@fortawesome/free-brands-svg-icons\";\r\n\r\n\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\n\r\nimport {sketchData} from './users/userDashboard'\r\nimport { custom } from 'joi';\r\n\r\n        let heightt ;\r\n        let widthh ;\r\n        let item = 0;\r\n        let canv = null;\r\n        let canvWidth , setCanvWidth = null;\r\n        let canvHeight , setCanvHeight = null;\r\n        let ElementWidth , setElementWidth = null;\r\n        let ElementLength , setElementLength = null;\r\n        let ElementStrokeWidth , setElementStrokeWidth = null;\r\n        let error , setError ;\r\n        let canvas = null;\r\n        let totalLayer = 0;\r\n        let  tool , setTool ;\r\n        let elements, setElements;\r\n        let myElements, setMyElements;\r\n        let myVar, setMyVar;\r\n        let estimateArr, setEstimateArr;\r\n        let selectedElement , setSelectedElement ;\r\n        let action , setAction ;\r\n        let state , setState;\r\n        let state2 , setState2;\r\n        let open , setOpen ;\r\n        let myArr , setMyArr ;\r\n        let price , setPrice ;\r\n        let title , setTitle ;\r\n        let image , setImage ;\r\n        let price2 , setPrice2 ;\r\n        let title2 , setTitle2 ;\r\n        let image2 , setImage2 ;\r\n        let price3 , setPrice3 ;\r\n        let title3 , setTitle3 ;\r\n        let image3 , setImage3 ;\r\n        let steelPrice , setSteelPrice ;\r\n        let steelTitle , setSteelTitle ;\r\n        let steelImage , setSteelImage ;\r\n        let steelPrice2 , setSteelPrice2 ;\r\n        let steelTitle2 , setSteelTitle2 ;\r\n        let steelImage2 , setSteelImage2 ;\r\n        let steelPrice3 , setSteelPrice3 ;\r\n        let steelTitle3 , setSteelTitle3 ;\r\n        let steelImage3 , setSteelImage3 ;\r\n        let loading , setLoading ;\r\n        let value, setValue;\r\n        let steelValue, setSteelValue;\r\n        let bricksValue, setBricksValue;\r\n        let sandValue, setSandValue;\r\n        let heightValue, setHeightValue;\r\n        let ccRatio, setCcRatio;\r\n        let ssRatio, setSsRatio;\r\n        let plasterValue, setPlasterValue;\r\n        let marla = 0;\r\n        let wall , setWall ;\r\n        let bgColor , setBGColor ;\r\n        let customCement , setCustomCement ;\r\n        let customSteel , setCustomSteel ;\r\n        let customBricks , setCustomBricks ;\r\n        let customSand , setCustomSand ;\r\n        let customHeight , setCustomHeight ;\r\n        let customCRatio , setCustomCRatio ;\r\n        let customSRatio , setCustomSRatio ;\r\n        let customPlaster , setCustomPlaster ;\r\n        let cArea , setCArea ;\r\n        let c2Area , setC2Area ;\r\n\r\n        export {totalLayer};\r\n        export {widthh};\r\n        export {heightt};\r\n        export {marla};\r\n        export {canvWidth , canvHeight};\r\n        export {ElementWidth , ElementLength ,ElementStrokeWidth,\r\n                setElementStrokeWidth, setElementLength  , setElementWidth};\r\n        export {error , setError };\r\n        export {canvas};\r\n        export {tool , setTool};\r\n        export {elements , setElements };\r\n        export {selectedElement , setSelectedElement};\r\n        export {action , setAction};\r\n        export {state , setState};\r\n        export {state2 , setState2};\r\n        export {open , setOpen};        \r\n        export {myArr , setMyArr};\r\n        export {price , setPrice};\r\n        export {title , setTitle};\r\n        export {image , setImage};\r\n        export {price2 , setPrice2};\r\n        export {title2 , setTitle2};\r\n        export {image2 , setImage2};\r\n        export {price3 , setPrice3};\r\n        export {title3 , setTitle3};\r\n        export {image3 , setImage3};\r\n        export {steelPrice , setSteelPrice};\r\n        export {steelTitle , setSteelTitle};\r\n        export {steelImage , setSteelImage};\r\n        export {steelPrice2 , setSteelPrice2};\r\n        export {steelTitle2 , setSteelTitle2};\r\n        export {steelImage2 , setSteelImage2};\r\n        export {steelPrice3 , setSteelPrice3};\r\n        export {steelTitle3 , setSteelTitle3};\r\n        export {steelImage3 , setSteelImage3};\r\n        export {loading , setLoading};\r\n        export {value, setValue}; \r\n        export {steelValue, setSteelValue};\r\n        export {bricksValue, setBricksValue};\r\n        export {sandValue, setSandValue};\r\n        export {heightValue, setHeightValue};\r\n        export {plasterValue, setPlasterValue};\r\n        export {wall , setWall}\r\n        export {bgColor , setBGColor}\r\n        export {customCement , setCustomCement}\r\n        export {customSteel , setCustomSteel };\r\n        export {customBricks , setCustomBricks };\r\n        export {customSand , setCustomSand };\r\n        export {customHeight , setCustomHeight };\r\n        export {customPlaster , setCustomPlaster };\r\n        export {myVar, setMyVar};\r\n\r\n\r\n\r\n        export let mouse = {x : 0, y : 0, events : \"mousemove,mousedown,mouseup\"};\r\n\r\n        function myColorPicker(){\r\n            return  <ColorPicker\r\n            name=\"color\"\r\n            defaultValue=\"#000\"\r\n            // value={this.state.color} - for controlled component\r\n            onChange={color => console.log(color)}\r\n          />\r\n        }\r\n            \r\n        export const list = (anchor) => (\r\n        \r\n            <div\r\n                className={clsx(useStyles.list, {\r\n                    [useStyles.fullList]: anchor === 'top' || anchor === 'bottom',\r\n                })}\r\n                role=\"presentation\"\r\n                // onClick={toggleDrawer(anchor, false)}\r\n                // onKeyDown={toggleDrawer(anchor, false)}\r\n            >\r\n\r\n                {loading ? (\r\n                               \r\n                               <List\r\n                               style={{display: 'flex' , flexDirection : 'row'}}\r\n                   \r\n                           >\r\n                   \r\n                               {[<Spin style={{width:'100%' , marginTop: '20%' , marginBottom:'20%'}} />\r\n                                   ].map((text, index) => (\r\n                                   <ListItem button key={text}>\r\n                                       <ListItemIcon></ListItemIcon>\r\n                                       <ListItemText primary={text} />\r\n                                   </ListItem>\r\n                               ))}\r\n                           </List>\r\n                    ) :  \r\n\r\n                    <List \r\n                    style={{display: 'flex' , flexDirection : 'column'}}\r\n        \r\n                >\r\n        \r\n                    {[\r\n                  \r\n\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Cement</FormLabel>\r\n                            <RadioGroup aria-label=\"cement\" name=\"cement\" value={value} \r\n                            onChange={(event) => setValue(event.target.value)}\r\n                            >\r\n                                <FormControlLabel value={price} control={<Radio />} label={title} /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>{price}</Typography>\r\n                                <FormControlLabel value={price2} control={<Radio />} label={title2} />  <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>{price2}</Typography>\r\n                                 <FormControlLabel value={price3} control={<Radio />} label={title3} /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>{price3}</Typography>\r\n                                <FormControlLabel value={customCement} control={<Radio />} label=\"Your Desired Price per bag\" /> <TextField\r\n                                                                                                                            autoComplete=\"price\"\r\n                                                                                                                            name=\"Price\"\r\n                                                                                                                            variant=\"outlined\"\r\n                                                                                                                            required\r\n                                                                                                                            fullWidth\r\n                                                                                                                            id=\"priceCement\"\r\n                                                                                                                            label=\"Enter Price\"\r\n                                                                                                                            autoFocus\r\n                                                                                                                            value={customCement}\r\n                                                                                                                            onChange={(e) => {\r\n                                                                                                                                setCustomCement(e.target.value);\r\n                                                                                                                             }}\r\n                                                                                                                            />\r\n                            </RadioGroup>\r\n                         \r\n                        </FormControl>\r\n                        ,\r\n<FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Steel</FormLabel>\r\n                            <RadioGroup aria-label=\"steel\" name=\"steel\" value={steelValue} \r\n                            onChange={(event) => setSteelValue(event.target.value)}\r\n                            >\r\n                                <FormControlLabel value=\"136.9\" control={<Radio />} label={steelTitle} /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>{steelPrice}</Typography>\r\n                                <FormControlLabel value=\"137\" control={<Radio />} label={steelTitle2} />  <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>{steelPrice2}</Typography>\r\n                                 <FormControlLabel value=\"137.1\" control={<Radio />} label={steelTitle3} /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>{steelPrice3}</Typography>\r\n                                <FormControlLabel value={customSteel} control={<Radio />} label=\"Your Desired Price per Kg\" /> <TextField\r\n                                                                                                                            autoComplete=\"price\"\r\n                                                                                                                            name=\"Price\"\r\n                                                                                                                            variant=\"outlined\"\r\n                                                                                                                            required\r\n                                                                                                                            fullWidth\r\n                                                                                                                            id=\"priceSteel\"\r\n                                                                                                                            label=\"Enter Price\"\r\n                                                                                                                            autoFocus\r\n                                                                                                                            value={customSteel}\r\n                                                                                                                            onChange={(e) => {\r\n                                                                                                                                setCustomSteel(e.target.value);\r\n                                                                                                                             }}\r\n                                                                                                                            />\r\n                            </RadioGroup>\r\n                         \r\n                        </FormControl>\r\n                        ,\r\n                        <FormControl component=\"fieldset\">\r\n                                <FormLabel component=\"legend\">Bricks</FormLabel>\r\n                                    <RadioGroup aria-label=\"bricks\" name=\"bricks\" value={bricksValue} \r\n                                        onChange={(event) => setBricksValue(event.target.value)}\r\n                                        >\r\n                                        <FormControlLabel value=\"13.2\" control={<Radio />} label=\"level 1 Bricks (Awwal A+)\" /> <Typography\r\n                                                                                                                                style = {{color: 'black',\r\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 13,200</Typography>\r\n                                            <FormControlLabel value=\"12.8\" control={<Radio />} label=\"level 1- Bricks (Awwal A)\" />  <Typography\r\n                                                                                                                                style = {{color: 'black',\r\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 12,800</Typography>\r\n                                             <FormControlLabel value=\"9.2\" control={<Radio />} label=\"level 2 Bricks (Doam)\" /> <Typography\r\n                                                                                                                                style = {{color: 'black',\r\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 9,200</Typography>\r\n                                             <FormControlLabel value=\"8.8\" control={<Radio />} label=\"level 3 Bricks (Khangar)\" /> <Typography\r\n                                                                                                                                style = {{color: 'black',\r\n                                                                                                                                marginLeft: '25%'}}>Per 1000 ... PKR 8,800</Typography>\r\n\r\n                                            <FormControlLabel value={customBricks} control={<Radio />} label=\"Your Desired Price per 1 piece\" /> <TextField\r\n                                                                                                                            autoComplete=\"price\"\r\n                                                                                                                            name=\"Price\"\r\n                                                                                                                            variant=\"outlined\"\r\n                                                                                                                            required\r\n                                                                                                                            fullWidth\r\n                                                                                                                            id=\"priceBricks\"\r\n                                                                                                                            label=\"Enter Price\"\r\n                                                                                                                            autoFocus\r\n                                                                                                                            value={customBricks}\r\n                                                                                                                            onChange={(e) => {\r\n                                                                                                                                setCustomBricks(e.target.value);\r\n                                                                                                                             }}\r\n                                                                                                                            />\r\n                                                    \r\n                                        </RadioGroup>\r\n                                                 \r\n                                     </FormControl>\r\n                        ,\r\n                        <FormControl component=\"fieldset\">\r\n                            <FormLabel component=\"legend\">Sand (Construction)</FormLabel>\r\n                            <RadioGroup aria-label=\"gender\" name=\"steel\" value={sandValue} \r\n                            onChange={(event) => setSandValue(event.target.value)}\r\n                            >\r\n                                <FormControlLabel value=\"42.14\" control={<Radio />} label=\"Chanab Sand A+\" /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 29,500</Typography>\r\n                                <FormControlLabel value=\"40\" control={<Radio />} label=\"Chanab Sand B\" />  <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 28,000</Typography>\r\n                                 <FormControlLabel value=\"34.28\" control={<Radio />} label=\"Chanab Sand C\" /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 24,000</Typography>\r\n                               <FormControlLabel value=\"17.14\" control={<Radio />} label=\"Ravi Sand\" /> <Typography\r\n                                                                                                        style = {{color: 'black',\r\n                                                                                                        marginLeft: '25%'}}>Per Trolly 700 CFT ... PKR 12,000</Typography>\r\n                               <FormControlLabel value={customSand} control={<Radio />} label=\"Your Desired Price per Trolly 700 CFT\" /> <TextField\r\n                                                                                                                            autoComplete=\"price\"\r\n                                                                                                                            name=\"Price\"\r\n                                                                                                                            variant=\"outlined\"\r\n                                                                                                                            required\r\n                                                                                                                            fullWidth\r\n                                                                                                                            id=\"priceSand\"\r\n                                                                                                                            label=\"Enter Price\"\r\n                                                                                                                            autoFocus\r\n                                                                                                                            value={customSand}\r\n                                                                                                                            onChange={(e) => {\r\n                                                                                                                                setCustomSand(e.target.value);\r\n                                                                                                                             }}\r\n                                                                                                                            />\r\n                            </RadioGroup>\r\n                         \r\n                        </FormControl>\r\n                        ,\r\n                        <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Height of Building</FormLabel>\r\n                        <RadioGroup aria-label=\"gender\" name=\"heightValue\" value={heightValue} \r\n                        onChange={(event) => setHeightValue(event.target.value)}\r\n                        >\r\n                            <FormControlLabel value=\"12\" control={<Radio />} label=\"12 ft\" /> \r\n                            <FormControlLabel value=\"11\" control={<Radio />} label=\"11 ft\" />  \r\n                             <FormControlLabel value=\"10\" control={<Radio />} label=\"10 ft\" />\r\n                           <FormControlLabel value={customHeight} control={<Radio />} label=\"Your Desired Height\" /> <TextField\r\n                                                                                                                        autoComplete=\"price\"\r\n                                                                                                                        name=\"Price\"\r\n                                                                                                                        variant=\"outlined\"\r\n                                                                                                                        required\r\n                                                                                                                        fullWidth\r\n                                                                                                                        id=\"priceSand\"\r\n                                                                                                                        label=\"Enter Price\"\r\n                                                                                                                        autoFocus\r\n                                                                                                                        value={customHeight}\r\n                                                                                                                        onChange={(e) => {\r\n                                                                                                                            setCustomHeight(e.target.value);\r\n                                                                                                                         }}\r\n                                                                                                                        />\r\n                        </RadioGroup>\r\n                     \r\n                    </FormControl>,\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Enter ratio of cement <span style={{color : \"blue\"}}>\r\n                                                                                (If you want 1:4 select 1)</span></FormLabel>\r\n                        <RadioGroup aria-label=\"gender\" name=\"ccRatio\" value={ccRatio} \r\n                        onChange={(event) => setCcRatio(event.target.value)}\r\n                        >\r\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" /> \r\n                            \r\n                           <FormControlLabel value={customCRatio} control={<Radio />} label=\"Your Desired cement ratio\" /> <TextField\r\n                                                                                                                        autoComplete=\"price\"\r\n                                                                                                                        name=\"Price\"\r\n                                                                                                                        variant=\"outlined\"\r\n                                                                                                                        required\r\n                                                                                                                        fullWidth\r\n                                                                                                                        id=\"cRatio\"\r\n                                                                                                                        label=\"Enter Cement Ratio\"\r\n                                                                                                                        autoFocus\r\n                                                                                                                        value={customCRatio}\r\n                                                                                                                        onChange={(e) => {\r\n                                                                                                                            setCustomCRatio(e.target.value);\r\n                                                                                                                         }}\r\n                                                                                                                        />\r\n                        </RadioGroup>\r\n                     \r\n                    </FormControl>,\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Enter ratio of sand <span style={{color : \"blue\"}}>\r\n                                                                                (If you want 1:4 select 4)</span></FormLabel>\r\n                        <RadioGroup aria-label=\"gender\" name=\"ssRatio\" value={ssRatio} \r\n                        onChange={(event) => setSsRatio(event.target.value)}\r\n                        >\r\n                            <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" /> \r\n                            <FormControlLabel value=\"6\" control={<Radio />} label=\"6\" />\r\n                           <FormControlLabel value={customSRatio} control={<Radio />} label=\"Your Desired sand ratio\" /> <TextField\r\n                                                                                                                        autoComplete=\"price\"\r\n                                                                                                                        name=\"Price\"\r\n                                                                                                                        variant=\"outlined\"\r\n                                                                                                                        required\r\n                                                                                                                        fullWidth\r\n                                                                                                                        id=\"cRatio\"\r\n                                                                                                                        label=\"Enter Sand Ratio\"\r\n                                                                                                                        autoFocus\r\n                                                                                                                        value={customSRatio}\r\n                                                                                                                        onChange={(e) => {\r\n                                                                                                                            setCustomSRatio(e.target.value);\r\n                                                                                                                         }}\r\n                                                                                                                        />\r\n                        </RadioGroup>\r\n                     \r\n                    </FormControl>,\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Plastering Depth in inches</FormLabel>\r\n                        <RadioGroup aria-label=\"gender\" name=\"plasterValue\" value={plasterValue} \r\n                        onChange={(event) => setPlasterValue(event.target.value)}\r\n                        >\r\n                            <FormControlLabel value=\"0.5\" control={<Radio />} label=\"0.5 inches\" /> \r\n                            <FormControlLabel value=\"1\" control={<Radio />} label=\"1 inches\" />  \r\n                            \r\n                           <FormControlLabel value={customPlaster} control={<Radio />} label=\"Your Depth for Plastering\" /> <TextField\r\n                                                                                                                        autoComplete=\"price\"\r\n                                                                                                                        name=\"Depth of Plsater\"\r\n                                                                                                                        variant=\"outlined\"\r\n                                                                                                                        required\r\n                                                                                                                        fullWidth\r\n                                                                                                                        id=\"plaster\"\r\n                                                                                                                        label=\"Enter Depth of Plsater\"\r\n                                                                                                                        autoFocus\r\n                                                                                                                        value={customPlaster}\r\n                                                                                                                        onChange={(e) => {\r\n                                                                                                                            setCustomPlaster(e.target.value);\r\n                                                                                                                         }}\r\n                                                                                                                        />\r\n                        </RadioGroup>\r\n                     \r\n                    </FormControl>,\r\n                        <Button onClick={()=>{\r\n                            // setState(\"bottom\" , false)\r\n\r\n                            var price = value;\r\n                            console.log(parseFloat(price.replace( /\\D/g, \"\")));\r\n                            \r\n                            console.log(steelValue)\r\n                            console.log(bricksValue)\r\n                            console.log(sandValue)\r\n                            console.log(heightValue)\r\n\r\n                            let estimatess1 = 0;\r\n                            let estimatess2 = 0;\r\n                            let estimatess1total = 0;\r\n                            let estimatess2total = 0;\r\n\r\n                            let strokeWidth = 0;\r\n\r\n                            for(var k = 0; k < myVar.length; k++) {\r\n\r\n                                var Data = myVar[k];\r\n    \r\n                                for(var m = 0; m < Data.length; m++) {\r\n    \r\n                                    estimatess1total = estimatess1total + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\r\n                                    estimatess2total = estimatess2total + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\r\n    \r\n                                }\r\n    \r\n                            }\r\n                            \r\n\r\n                        for(var i = 0; i < myArr.length ; i++)\r\n                        {\r\n                            // console.log( myArr[i].type);\r\n                            // console.log( myArr[i].x1);\r\n                            // console.log( myArr[i].x2);\r\n                            // console.log( myArr[i].y2);\r\n                            // console.log( myArr[i].y1);\r\n                            // console.log( (myArr[i].x2-myArr[i].x1)  / 15.36);\r\n                            // console.log( (myArr[i].y2-myArr[i].y1)  / 15.36);\r\n     \r\n                            estimatess1 = estimatess1 + (Math.abs(myArr[i].x2-myArr[i].x1)  / 15.36);\r\n                            estimatess2 = estimatess2 + (Math.abs(myArr[i].y2-myArr[i].y1) / 15.36);\r\n                            strokeWidth = myArr[i].roughElement.options.strokeWidth\r\n                           \r\n                        }   \r\n\r\n                            var brickArea = Math.abs(heightValue) * Math.abs((estimatess1  + estimatess2) * 144 ) * strokeWidth\r\n\r\n                            var nuOfBrick = brickArea / 166.25\r\n\r\n                            var mortar = nuOfBrick * 0.10\r\n                            \r\n                            nuOfBrick = nuOfBrick - mortar\r\n                            \r\n                            var waste = nuOfBrick * 0.04\r\n\r\n                            var getTotalBrick = nuOfBrick + waste;\r\n                        \r\n                            var totalBricks = Math.abs(heightValue) * Math.abs((((estimatess1 *2 ) + (estimatess2*2))*144)/32)\r\n                            // var totalBricks = Math.abs((estimatess1 * 2 )+( estimatess2*2)) \r\n   \r\n\r\n                            console.log(\"arr length   :   \" + myArr.length)\r\n                            console.log(\"Height  :   \" + heightValue)\r\n                            console.log(\"ElementStrokeWidth   :   \" + strokeWidth)\r\n                            console.log(\"estimate1   :    \" + estimatess1 * 2 )\r\n                            console.log(\"estimate2   :    \" + estimatess2 * 2 )\r\n                            console.log(\"Total Bricks  :  \" + getTotalBrick )\r\n                            console.log(\"mortar of Bricks  :    \" + mortar * 0.0254 * 0.012 )\r\n\r\n                            document.getElementById(\"bricksCount\").value = getTotalBrick ;\r\n\r\n                            var Hplaster = Math.abs(heightValue * 0.3048)\r\n\r\n                            var Wplaster = Math.abs(estimatess1 * 0.3048 + estimatess2  * 0.3048)\r\n\r\n                            var Dplaster = Math.abs(strokeWidth * 0.0254)\r\n\r\n                            var currentPlasterValue = plasterValue * 0.0254\r\n\r\n                            var plasterVolume =   Hplaster *  Wplaster * currentPlasterValue\r\n\r\n                            var plasterDryVolume = plasterVolume * 1.35\r\n\r\n                            var cRatio = Math.abs(ccRatio) \r\n                            var sRatio = Math.abs(ssRatio)\r\n                            \r\n                            \r\n                            // var cRatio = Math.abs(1) \r\n                            // var sRatio = Math.abs(6)\r\n\r\n                            var tRatio = Math.abs(cRatio + sRatio)\r\n\r\n                            var cCum = ( cRatio / tRatio ) * plasterDryVolume\r\n\r\n                            var cKg = cCum * 1440\r\n\r\n                            var cBags = cKg / 50\r\n\r\n                            var sCum = (sRatio / tRatio) * plasterDryVolume\r\n                            \r\n                            var sCFT = sCum * 35.31\r\n\r\n                            console.log(\"H  :   \" +  Hplaster)\r\n                            console.log(\"W  :   \" +  Wplaster)\r\n                            console.log(\"D  :   \" + currentPlasterValue)\r\n                            \r\n                            console.log(\"plasterVolume  :   \" + plasterVolume )\r\n                            console.log(\"plasterDryVolume  :   \" + plasterDryVolume)\r\n                            console.log(\"cRatio   :   \" + cRatio)\r\n                            console.log(\"sRatio   :    \" + sRatio )\r\n                            console.log(\"tRatio   :    \" + tRatio )\r\n                            console.log(\"cCum  :  \" + cCum)\r\n                            console.log(\"cKg  :   \" + cKg )\r\n                            console.log(\"cBags  :   \" + cBags)\r\n                            console.log(\"sCum   :   \" + sCum)\r\n                            console.log(\"sCFT   :    \" + sCFT )\r\n                            console.log(\"mortar of Plaster  :    \" + (Hplaster * Wplaster * currentPlasterValue) )\r\n\r\n                            document.getElementById(\"cementCount\").value = cBags\r\n                            document.getElementById(\"sandCount\").value = sCFT\r\n                            document.getElementById(\"cementKg\").value = cKg\r\n\r\n                            var brickAreaTotal = Math.abs(heightValue) * Math.abs((estimatess1total  + estimatess2total) * 144 ) * strokeWidth\r\n\r\n                            var nuOfBrickTotal = brickAreaTotal / 166.25\r\n\r\n                            var mortarTotal = nuOfBrickTotal * 0.10\r\n                            \r\n                            nuOfBrickTotal = nuOfBrickTotal - mortarTotal\r\n                            \r\n                            var wasteTotal = nuOfBrickTotal * 0.04\r\n\r\n                            var getTotalBrickTotal = nuOfBrickTotal + wasteTotal;\r\n                        \r\n                            var totalBricksTotal = Math.abs(heightValue) * Math.abs((((estimatess1total *2 ) + (estimatess2total*2))*144)/32)\r\n                            // var totalBricks = Math.abs((estimatess1 * 2 )+( estimatess2*2)) \r\n                            \r\n                            console.log(\"arr length   :   \" + myArr.length)\r\n                            console.log(\"Height  :   \" + heightValue)\r\n                            console.log(\"ElementStrokeWidth   :   \" + strokeWidth)\r\n                            console.log(\"estimate1   :    \" + estimatess1total * 2 )\r\n                            console.log(\"estimate2   :    \" + estimatess2total * 2 )\r\n                            console.log(\"Total Bricks  :  \" + getTotalBrick )\r\n                            console.log(\"mortar of Bricks  :    \" + mortar * 0.0254 * 0.012 )\r\n\r\n                            document.getElementById(\"bricksCountTotal\").value = getTotalBrickTotal ;\r\n\r\n                            var HplasterTotal = Math.abs(heightValue * 0.3048)\r\n\r\n                            var WplasterTotal = Math.abs(estimatess1total * 0.3048 + estimatess2total  * 0.3048)\r\n\r\n                            var DplasterTotal = Math.abs(strokeWidth * 0.0254)\r\n\r\n                            var totalPlasterValue = plasterValue * 0.0254\r\n\r\n                            var plasterVolumeTotal =   HplasterTotal *  WplasterTotal * totalPlasterValue\r\n\r\n                            var plasterDryVolumeTotal = plasterVolumeTotal * 1.35\r\n\r\n                            var cRatioTotal = Math.abs(ccRatio) \r\n                            var sRatioTotal = Math.abs(ssRatio)\r\n\r\n                            var tRatioTotal = Math.abs(cRatioTotal + sRatioTotal)\r\n\r\n                            var cCumTotal = ( cRatioTotal / tRatioTotal ) * plasterDryVolumeTotal\r\n\r\n                            var cKgTotal = cCumTotal * 1440\r\n\r\n                            var cBagsTotal = cKgTotal / 50\r\n\r\n                            var sCumTotal = (sRatioTotal / tRatioTotal) * plasterDryVolumeTotal\r\n                            \r\n                            var sCFTTotal = sCumTotal * 35.31\r\n\r\n                            console.log(\"H  :   \" +  Hplaster)\r\n                            console.log(\"W  :   \" +  Wplaster)\r\n                            console.log(\"D  :   \" + totalPlasterValue)\r\n                            \r\n                            console.log(\"plasterVolumeTotal  :   \" + plasterVolumeTotal )\r\n                            console.log(\"plasterDryVolumeTotal  :   \" + plasterDryVolumeTotal)\r\n                            console.log(\"cRatioTotal   :   \" + cRatioTotal)\r\n                            console.log(\"sRatioTotal   :    \" + sRatioTotal )\r\n                            console.log(\"tRatioTotal   :    \" + tRatioTotal )\r\n                            console.log(\"cCumTotal  :  \" + cCumTotal)\r\n                            console.log(\"cKgTotal  :   \" + cKgTotal )\r\n                            console.log(\"cBagsTotal  :   \" + cBagsTotal)\r\n                            console.log(\"sCumTotal   :   \" + sCumTotal)\r\n                            console.log(\"sCFTTotal   :    \" + sCFTTotal )\r\n                            console.log(\"mortar of Plaster Total :    \" + (HplasterTotal * WplasterTotal * totalPlasterValue) )\r\n\r\n                            document.getElementById(\"cementCountTotal\").value = cBagsTotal\r\n                            document.getElementById(\"sandCountTotal\").value = sCFTTotal\r\n                            document.getElementById(\"cementKgTotal\").value = cKgTotal\r\n\r\n                            var myArea = document.getElementById(\"cArea\").value;\r\n                            console.log(\"Area 1 : : : \" + myArea)\r\n                            console.log(\"Area 2 : : : \" +c2Area)\r\n\r\n                            var cBagCost =  (cBags * parseFloat(price.replace( /\\D/g, \"\")))\r\n                            var sCFTCost =  (sCFT * sandValue)\r\n                            var brickCost = (getTotalBrick * bricksValue)\r\n\r\n                            var cBagCostTotal = (cBagsTotal * parseFloat(price.replace( /\\D/g, \"\")))\r\n                            var sCFTCostTotal =  (sCFTTotal * sandValue)\r\n                            var brickCostTotal = (getTotalBrickTotal * bricksValue)\r\n\r\n                            console.log(\"cBagCostTotal  \" +cBagCostTotal )\r\n                            console.log(\"sCFTCostTotal  \" +sCFTCostTotal )\r\n                            console.log(\"brickCostTotal \" +brickCostTotal )\r\n\r\n                            document.getElementById(\"cAreaMat\").value = (cArea * 150) + cBagCost + sCFTCost + brickCost\r\n                            document.getElementById(\"c2AreaMat\").value = (c2Area * 150) + cBagCostTotal + sCFTCostTotal + brickCostTotal\r\n\r\n                        }}>Apply</Button>\r\n\r\n                ].map((text, index) => (\r\n                        <ListItem button key={text}>\r\n                            <ListItemIcon>{index  === 0 ? <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={surface}/> :\r\n                                            index === 1 ? <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={steel}/> :\r\n                                            index === 2 ? <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={brick}/> :\r\n                                            <Avatar alt=\"Remy Sharp\" variant=\"rounded\" src={sand}/>  }</ListItemIcon>\r\n                            <ListItemText primary={text} />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n\r\n\r\n\r\n                            \r\n                }\r\n        \r\n        \r\n            </div>\r\n        );\r\n\r\n        export const list2 = (anchor) => (\r\n            <div\r\n              className={clsx(useStyles.list, {\r\n                [useStyles.fullList]: anchor === 'top' || anchor === 'bottom',\r\n              })}\r\n              role=\"presentation\"\r\n              onClick={toggleDrawer2(anchor, false)}\r\n              onKeyDown={toggleDrawer2(anchor, false)}\r\n            >\r\n              <List>\r\n                {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n                  <ListItem button key={text}>\r\n                    <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                    <ListItemText primary={text} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n              <Divider />\r\n              <List>\r\n                {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                  <ListItem button key={text}>\r\n                    <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                    <ListItemText primary={text} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </div>\r\n          );\r\n        \r\n        export const distance = (a,b) => Math.sqrt(Math.pow(a.x - b.x , 2) + Math.pow(a.y - b.y, 2));\r\n        \r\n        export const getElementAtPosition = (x,y, elements) => {\r\n            return elements.find(element => isWithinElement(x,y,element));\r\n        }\r\n\r\n\r\n        function getWindowDimensions() {\r\n            const width = window.innerWidth;\r\n            return width\r\n            \r\n          }\r\n        \r\n        export const handleDrawerOpen = () => {\r\n            setOpen(true);\r\n        };\r\n        \r\n        export const handleDrawerClose = () => {\r\n            setOpen(false);\r\n        }; \r\n        \r\n        export const handleError = () => {\r\n            setError(false);\r\n        }; \r\n        \r\n        \r\n            // const isWithinCanvas = (x,y, element) => {\r\n            //     const {x1, y1, x2, y2} = element;\r\n            //\r\n            //         const minX = Math.min(x1, x2);\r\n            //         const maxX = Math.max(x1, x2);\r\n            //         const minY = Math.min(y1, y2);\r\n            //         const maxy = Math.max(y1, y2);\r\n            //         return x >= minX && x <= maxX && y <= maxy && y >= minY;\r\n            //\r\n            // }\r\n\r\n\r\n            // export function putCanvs() {\r\n\r\n\r\n            //     // for (let item = 0; item < 20; item++) {\r\n            //     //     if (count !== 0 && count%5 === 0) {\r\n            //     //         document.write(\" ||| \");\r\n            //     //     }\r\n\r\n\r\n            //     // canv.setAttribute('width', window.innerWidth);\r\n            //     if (widthh !== null) {\r\n\r\n            //         item = item + 1;\r\n            //         totalLayer = totalLayer + 1;\r\n\r\n\r\n            //         const texta = document.createElement(\"input\");\r\n\r\n            //         texta.setAttribute('id', 'itemNo'\r\n            //         + item\r\n            //         );\r\n\r\n\r\n            //         texta.textContent = '111';\r\n\r\n            //         canv = document.createElement(\"canvas\");\r\n\r\n            //         canv.width = canvas.width;\r\n            //         // canv.setAttribute('height', window.innerHeight * heightt/100);\r\n            //         canv.height = canvas.height;\r\n            //         canv.setAttribute('id', 'canv'\r\n            //         + item\r\n            //         );\r\n\r\n\r\n\r\n            //         alert(totalLayer);\r\n            //         canv.style.background = \"#c0c6c5\";\r\n\r\n            //         canv.style.border = \"5px solid darkslategrey\";\r\n\r\n            //         canv.style.margin = \"14.4%\";\r\n\r\n            //         document.body.appendChild(canv);\r\n\r\n            //         canv.addEventListener('mousedown' , handleMouseDown , true);\r\n            //         canv.addEventListener('mouseup' , handleMouseUp , true);\r\n            //         canv.addEventListener('mousemove' , handleMouseMove , true);\r\n\r\n            //         canv.onmousedown = handleMouseDown;\r\n            //         canv.onmouseup = handleMouseUp;\r\n            //         canv.onmousemove = handleMouseMove;\r\n            //         const C = document.getElementById(canv.getAttribute('id'));\r\n            //         if (C.getContext) {\r\n            //             if (C.getContext) {\r\n            //                 makePlot(C);\r\n            //             }\r\n            //         }\r\n            //     }\r\n            //     else {\r\n            //         alert(\"Please Enter Width and Length First\");\r\n            //         setOpen(true);\r\n            //     }\r\n            // }\r\n\r\n            // function makePlot(elem) {\r\n\r\n            //     const ctx = elem.getContext(\"2d\");\r\n            //     ctx.fillStyle   = '#00f';\r\n            //     ctx.strokeStyle = 'black';\r\n            //     ctx.lineWidth   = 5;\r\n            //     ctx.borderBlock = 1;\r\n\r\n            // }\r\n            export function saveLayer(){\r\n                \r\n\r\n                console.log(elements)\r\n\r\n                setMyElements(elements)\r\n\r\n                // myVar[totalLayer] = elements\r\n\r\n                myVar[item] = elements\r\n\r\n                console.log(myElements)\r\n\r\n            }\r\n\r\n            function addLayer(){\r\n                \r\n\r\n                console.log(elements)\r\n\r\n                setMyElements(elements)\r\n\r\n                myVar[totalLayer] = elements\r\n\r\n                console.log(myElements)\r\n\r\n                setElements([])\r\n\r\n                item = item + 1;\r\n                totalLayer = totalLayer + 1;\r\n\r\n                // alert(\"Your Current Layer: \" + totalLayer);\r\n                // alert(\"Your Current Element: \" + item);\r\n\r\n            }\r\n\r\n            function App() \r\n            \r\n            {\r\n\r\n                [tool, setTool] = useState(\"selection\");\r\n                [elements, setElements] = useState([]);\r\n                [action , setAction] = useState('none');\r\n                [canvWidth, setCanvWidth] = useState(null);\r\n                [canvHeight, setCanvHeight] = useState(null);\r\n                [myArr , setMyArr] = useState([]);\r\n                [ElementWidth , setElementWidth] = useState(null);\r\n                [ElementLength , setElementLength] = useState(null);\r\n                [ElementStrokeWidth , setElementStrokeWidth] = useState(null);\r\n                [selectedElement , setSelectedElement] = useState(null);\r\n                [error , setError] = useState(false);\r\n                [price , setPrice] = useState(null);\r\n                [title , setTitle] = useState(null);\r\n                [image , setImage] = useState(null);\r\n                [price2 , setPrice2] = useState(null);\r\n                [title2 , setTitle2] = useState(null);\r\n                [image2 , setImage2] = useState(null);\r\n                [price3 , setPrice3] = useState(null);\r\n                [title3 , setTitle3] = useState(null);\r\n                [image3 , setImage3] = useState(null);\r\n                [steelPrice , setSteelPrice] = useState(null);\r\n                [steelTitle , setSteelTitle] = useState(null);\r\n                [steelImage , setSteelImage] = useState(null);\r\n                [steelPrice2 , setSteelPrice2] = useState(null);\r\n                [steelTitle2 , setSteelTitle2] = useState(null);\r\n                [steelImage2 , setSteelImage2] = useState(null);\r\n                [steelPrice3 , setSteelPrice3] = useState(null);\r\n                [steelTitle3 , setSteelTitle3] = useState(null);\r\n                [steelImage3 , setSteelImage3] = useState(null);\r\n                [loading , setLoading] = useState(false);\r\n                [value, setValue] = React.useState(null);\r\n                [steelValue, setSteelValue] = React.useState(null);\r\n                [bricksValue, setBricksValue] = React.useState(null);\r\n                [sandValue, setSandValue] = React.useState(null);\r\n                [heightValue, setHeightValue] = React.useState(null);\r\n                [ccRatio, setCcRatio] = React.useState(null);\r\n                [ssRatio, setSsRatio] = React.useState(null);\r\n                [plasterValue, setPlasterValue] = React.useState(null);\r\n                [myElements , setMyElements] = useState([]);\r\n                [myVar , setMyVar] = useState([]);\r\n                [estimateArr , setEstimateArr] = React.useState([]);\r\n                [wall , setWall] = React.useState(null);\r\n                [bgColor , setBGColor] = React.useState(null);\r\n                [customCement , setCustomCement] = React.useState(null);\r\n                [customSteel , setCustomSteel ] = React.useState(null);\r\n                [customBricks , setCustomBricks ] = React.useState(null);\r\n                [customSand , setCustomSand ] = React.useState(null);\r\n                [customHeight , setCustomHeight ] = React.useState(null);\r\n                [customCRatio , setCustomCRatio ] = React.useState(null);\r\n                [customSRatio , setCustomSRatio ] = React.useState(null);\r\n                [customPlaster , setCustomPlaster ] = React.useState(null);\r\n\r\n                let [name , setName] = useState(undefined);\r\n                const [id, setId] = useState(null);\r\n                [cArea , setCArea] = useState(null);\r\n                [c2Area , setC2Area] = useState(null);\r\n\r\n                const [devWidth, setDevWidth] = useState(null);\r\n                const [devHeight, setDevHeight] = useState(null);\r\n\r\n                const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n                const [isMobile, setMobile] = useState(0);\r\n\r\n                const [overflow, setOverflow] = useState(\"hidden\")\r\n\r\n                // const [widthh , setWidthh] = useState(750);\r\n                \r\n                useEffect(() => {\r\n\r\n                    setWindowDimensions(getWindowDimensions());\r\n\r\n                    if(windowDimensions < 1440 && windowDimensions >= 1200 ){ \r\n                        setMobile(1);\r\n                        console.log(isMobile)\r\n                    }\r\n                    else if(windowDimensions < 1200 && windowDimensions >= 700){ \r\n                        setMobile(2);\r\n                        console.log(isMobile)\r\n                        \r\n                    }\r\n                    else if(windowDimensions < 700){\r\n                        setMobile(3);\r\n                        console.log(isMobile)\r\n\r\n                    }\r\n                    \r\n                    if(canvWidth > windowDimensions){\r\n                            setOverflow(\"visible\")\r\n                    }\r\n                \r\n                })\r\n\r\n                const getData = () => {\r\n                    \r\n                    if(sketchData)\r\n                    {\r\n                        setId( sketchData.id )\r\n                        setName( sketchData.name )\r\n                        alert(sketchData.width)\r\n                        widthh = sketchData.width \r\n                        // setWidthh( sketchData.width ) \r\n                        heightt = sketchData.height\r\n                        totalLayer = sketchData.layer\r\n                        setMyVar( JSON.parse(sketchData.sketch))\r\n\r\n                        canvas = document.getElementById(\"canvas\");\r\n                        setCanvWidth( 1536 * widthh/100 );\r\n                        setCanvHeight(1536 * heightt/100);\r\n                        canvas.width = canvWidth ;\r\n                        canvas.height = canvHeight;\r\n\r\n                        marla = (widthh * heightt)/270;\r\n\r\n                        document.getElementById(\"marla\").value = marla ;\r\n                        document.getElementById(\"height\").value = heightt;\r\n                        document.getElementById(\"width\").value = widthh;\r\n    \r\n                    }\r\n    \r\n                    else{\r\n\r\n                        alert(\"No Data Found\")\r\n    \r\n                    }\r\n                  }\r\n\r\n                \r\n\r\n\r\n                // let canv = null;\r\n    \r\n                // }\r\n\r\n                useLayoutEffect(() => {\r\n\r\n                    if(widthh !== null)\r\n                    {\r\n\r\n                        canvas = document.getElementById('canvas');\r\n                        const context = canvas.getContext('2d');\r\n                        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n                        const roughCanvas = rough.canvas(canvas);\r\n                        elements.forEach(({roughElement}) => roughCanvas.draw(roughElement));\r\n\r\n\r\n                        // const roughCanvas222 = rough.canvas(canvas2);\r\n                        // elements.forEach(({roughElement}) => roughCanvas222.draw(roughElement));\r\n                        //\r\n                        //      canv = document.getElementById('canv' + 1);\r\n                        //     const ctx = canv.getContext('2d');\r\n                        //     ctx.clearRect(0,0,canvas.width, canvas.height);\r\n                        //\r\n                        //     const roughCanvas2 = rough.canvas(canv);\r\n                        //     elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\r\n\r\n\r\n                        // for(let i = 1 ; i <= item ; i ++) {\r\n                        //     const cnv = document.getElementById('canv' + item);\r\n                        //     const ctx = cnv.getContext('2d');\r\n\r\n                        //     ctx.clearRect(0,0,cnv.width, cnv.height);\r\n                        //     const roughCanvas2 = rough.canvas(cnv);\r\n                        //     // let element+item;\r\n                        //     // let\r\n                        //     elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\r\n                        // }\r\n\r\n                    }\r\n                            \r\n                    else {\r\n                        alert(\"Please Enter Width and Length First\");\r\n                        setOpen(true);\r\n                    }\r\n                }\r\n                    // ,\r\n                    // [\r\n                    //     elements , canvas , item\r\n                    // ]\r\n    \r\n                    );\r\n\r\n                    function handleWrite(){\r\n\r\n                        const context = canvas.getContext('2d');\r\n\r\n                        const wrt = document.getElementById(\"write\").value;\r\n                        context.fillStyle = \"white\";\r\n                        context.font = \"bold 16px Arial\";\r\n                        context.fillText(wrt , (canvas.width / 2) - 17, (canvas.height / 2) + 8);\r\n\r\n                    }\r\n\r\n                    const classes = useStyles();\r\n                    const theme = useTheme();\r\n                    [open, setOpen] = React.useState(false);\r\n                    \r\n                    [state, setState] = React.useState({\r\n                        bottom: false,\r\n           \r\n                    });\r\n\r\n                    [state2, setState2] = React.useState({\r\n                        // top: false,\r\n                        left: false,\r\n                        // bottom: false,\r\n                        // right: false,\r\n                      });\r\n\r\n                    TabPanel.propTypes = {\r\n                        children: PropTypes.node,\r\n                        index: PropTypes.any.isRequired,\r\n                        value: PropTypes.any.isRequired,\r\n                    };\r\n\r\n                    const handleSubmit = () => {\r\n                        heightt = document.getElementById(\"height\").value;\r\n                        widthh = document.getElementById(\"width\").value;\r\n                        alert(\" Length  \" + heightt + \"   width  \" + widthh + \"   was submitted\");\r\n                        canvas = document.getElementById(\"canvas\");\r\n                        setCanvWidth( 1536 * widthh/100 );\r\n                        setCanvHeight(1536 * heightt/100);\r\n                        canvas.width = canvWidth ;\r\n                        canvas.height = canvHeight;\r\n\r\n                        marla = (widthh * heightt)/270;\r\n\r\n                        document.getElementById(\"marla\").value = marla ;\r\n\r\n                    }\r\n\r\n\r\n\r\n                    const handleCalculate = () => {\r\n\r\n                        const totalArea = widthh * heightt;\r\n                        const enteredArea = document.getElementById(\"area\").value ;\r\n                        let myElement = 0;\r\n\r\n                        \r\n                        const totalCost = totalArea * 150;\r\n                        const cost = enteredArea * 150;\r\n                        let myJs = JSON.stringify(elements);\r\n                        setMyArr(JSON.parse(myJs))\r\n                        let estimatess1 = 0;\r\n                        let estimatess2 = 0;\r\n\r\n\r\n\r\n                        for(var i = 0; i < myArr.length ; i++)\r\n                        {\r\n                            // console.log( myArr[i].type);\r\n                            // console.log( myArr[i].x1);\r\n                            // console.log( myArr[i].x2);\r\n                            // console.log( myArr[i].y2);\r\n                            // console.log( myArr[i].y1);\r\n                            // console.log( (myArr[i].x2-myArr[i].x1)  / 15.36);\r\n                            // console.log( (myArr[i].y2-myArr[i].y1)  / 15.36);\r\n                            \r\n                            estimatess1 = estimatess1 + (Math.abs((myArr[i].x2-myArr[i].x1))  / 15.36);\r\n                            estimatess2 = estimatess2 + (Math.abs((myArr[i].y2-myArr[i].y1))  / 15.36);\r\n                           \r\n                            // myElement ++ ;\r\n\r\n                        }\r\n\r\n                        if(marla < ((estimatess1*estimatess2) / 270))\r\n                        {\r\n                            console.log(\"Total Area Created Feet  \" + (widthh*heightt));\r\n                            console.log(\"Total Area Created Marla \" + marla);\r\n                        }\r\n                        else{\r\n                        console.log(\"Total Area Created Feet  \" + (estimatess1*estimatess2));\r\n\r\n                        \r\n                        console.log(\"Total Area Created Marla \" + ((estimatess1*estimatess2) / 270)); \r\n                        }\r\n                        document.getElementById(\"myArea\").value = totalCost ;\r\n                        document.getElementById(\"eArea\").value = cost ;\r\n\r\n                        if(marla < ((estimatess1*estimatess2) / 270))\r\n                        {\r\n                            document.getElementById(\"cArea\").value =  (widthh*heightt) * 150 ;\r\n                            setCArea(widthh*heightt);\r\n                        }\r\n                        else{\r\n                            document.getElementById(\"cArea\").value =  (estimatess1*estimatess2) * 150 ;\r\n                            setCArea(estimatess1*estimatess2)\r\n                        }\r\n                        \r\n\r\n                        // console.log(value)\r\n\r\n                        \r\n\r\n                    }\r\n\r\n                    const handleCalculate2 = () => {\r\n\r\n                        alert(\"We are calculating labour cost at the price of 150 RS per feet\")\r\n                        \r\n                        saveLayer()\r\n\r\n                        const totalArea = widthh * heightt;\r\n                        const enteredArea = document.getElementById(\"area\").value ;\r\n                        let myElement = 0;\r\n\r\n                        \r\n                        const totalCost = totalArea * 150;\r\n                        const cost = enteredArea * 150;\r\n                        let myJs = JSON.stringify(elements);\r\n                        setMyArr(JSON.parse(myJs))\r\n                        let estimatess1 = 0;\r\n                        let estimatess2 = 0;\r\n\r\n                        let estimatess1total = 0;\r\n                        let estimatess2total = 0;\r\n\r\n                        console.log(myVar.length)\r\n\r\n                        for(var k = 0; k < myVar.length; k++) {\r\n\r\n                            var Data = myVar[k];\r\n\r\n                            console.log(Data);\r\n\r\n                            for(var m = 0; m < Data.length; m++) {\r\n\r\n                                // console.log( \"Type : \" + Data[m].type);\r\n                                // console.log( \"x1 : \" + Data[m].x1);\r\n                                // console.log( \"x2 : \" + Data[m].x2);\r\n                                // console.log( \"y2 : \" + Data[m].y2);\r\n                                // console.log( \"y1 : \" + Data[m].y1);\r\n                                // console.log( (Data[m].x2-Data[m].x1)  / 15.36);\r\n                                // console.log( (Data[m].y2-Data[m].y1)  / 15.36);\r\n\r\n                                estimatess1total = estimatess1total + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\r\n                                estimatess2total = estimatess2total + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n                        for(var i = 0; i < myArr.length ; i++)\r\n                        {\r\n                            // console.log( myArr[i].type);\r\n                            // console.log( myArr[i].x1);\r\n                            // console.log( myArr[i].x2);\r\n                            // console.log( myArr[i].y2);\r\n                            // console.log( myArr[i].y1);\r\n                            // console.log( (myArr[i].x2-myArr[i].x1)  / 15.36);\r\n                            // console.log( (myArr[i].y2-myArr[i].y1)  / 15.36);\r\n                            \r\n                            estimatess1 = estimatess1 + (Math.abs((myArr[i].x2-myArr[i].x1))  / 15.36);\r\n                            estimatess2 = estimatess2 + (Math.abs((myArr[i].y2-myArr[i].y1))  / 15.36);\r\n                           \r\n                            // myElement ++ ;\r\n\r\n                        }\r\n\r\n                        if(marla < ((estimatess1*estimatess2) / 270))\r\n                        {\r\n                            console.log(\"Total Area Created Feet  \" + (widthh*heightt));\r\n                            console.log(\"Total Area Created Marla \" + marla);\r\n                        }\r\n                        else{\r\n                        console.log(\"Total Area Created Feet  \" + (estimatess1*estimatess2));\r\n\r\n                        \r\n                        console.log(\"Total Area Created Marla \" + ((estimatess1*estimatess2) / 270)); \r\n                        }\r\n                        document.getElementById(\"myArea\").value = totalCost ;\r\n                        document.getElementById(\"eArea\").value = cost ;\r\n\r\n                        var totalEstCost = (estimatess1total*estimatess2total)\r\n\r\n                        document.getElementById(\"c2Area\").value =   totalEstCost * 150 ;\r\n                        setC2Area(estimatess1total*estimatess2total)\r\n                        \r\n                        if(marla < ((estimatess1*estimatess2) / 270))\r\n                        {\r\n                            var EstCost =  (widthh*heightt) \r\n                            document.getElementById(\"cArea\").value = EstCost * 150 ;\r\n                            setCArea(widthh*heightt);\r\n                        }\r\n                        else{\r\n                            var EstCost = (estimatess1*estimatess2)\r\n                            document.getElementById(\"cArea\").value =   EstCost * 150 ;\r\n                            setCArea(estimatess1*estimatess2)\r\n                        }\r\n                        \r\n                        \r\n\r\n                        // console.log(value)\r\n\r\n                        \r\n\r\n                    }\r\n\r\n\r\n                    const [anchorEl, setAnchorEl] = React.useState(null);\r\n                    const handleClick = (event) => {\r\n\r\n                        setAnchorEl(event.currentTarget);\r\n\r\n                    };\r\n\r\n                    const handleClose = () => {\r\n                        setAnchorEl(null);\r\n                    };\r\n                    \r\n                    const [view, setView] = React.useState('list');\r\n                    const handleChange = (event, nextView) => {\r\n                        setView(nextView);\r\n                    };\r\n\r\n\r\n\r\n\r\n                    let getJson = () => {\r\n                        let myJs = JSON.stringify(elements);\r\n                        setMyArr(JSON.parse(myJs))\r\n                        console.log( myArr );\r\n                    }\r\n                    \r\n                    let lessItem = () => {\r\n                        if(myVar[totalLayer] === undefined)\r\n                            {\r\n                                saveLayer()\r\n                            }\r\n                        if(item > 0) {\r\n                            item = item - 1;\r\n                            setElements(myVar[item])\r\n                            // myVar[item] = elements\r\n                            // saveLayer(item)\r\n                            \r\n                        }\r\n                        else {\r\n                            toast.success(\"Already on First\", {\r\n                                position: \"top-right\",\r\n                                autoClose: 5000,\r\n                                hideProgressBar: false,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                            });\r\n                    }}\r\n\r\n                    let upItem = () => {\r\n                        if(item < totalLayer){\r\n                            item = item + 1;\r\n                            setElements(myVar[item])\r\n                            // myVar[item] = elements\r\n                            // saveLayer(item)\r\n                            \r\n                        }\r\n                        else {\r\n                            toast.success(\"Already on Last\", {\r\n                                position: \"top-right\",\r\n                                autoClose: 5000,\r\n                                hideProgressBar: false,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // var canvas = document.getElementById(\"canvas\"),\r\n                    //     ctx = canvas.getContext(\"2d\");\r\n                    // var b = ball[i];\r\n                    // b.draw(b.x, b.y, b.color ,b.radius);\r\n\r\n                    \r\n                    \r\n                    \r\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    return (\r\n                        <div style={{overflow: overflow}}>\r\n\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" noWrap className={classes.title} style={{color : \"#4E4141\"}}>\r\n\r\n                                    {['bottom'].map((anchor) => (\r\n                                        <React.Fragment key={anchor}>\r\n                                \r\n                                            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\r\n                                            <div className={classes.drawerHeader}>\r\n                                                <IconButton onClick={()=>{setState(\"bottom\",false)}}>\r\n                                                {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ExpandMore />}\r\n                                            </IconButton>\r\n                                            </div>\r\n\r\n                                            <Divider />\r\n                                                {list(anchor)}\r\n                                            </Drawer>\r\n                                        </React.Fragment>\r\n                                    ))}\r\n                                    {['right'].map((anchor) => (\r\n                                        <React.Fragment key={anchor}>\r\n                                \r\n                                            <Drawer anchor={anchor} open={state2[anchor]} onClose={toggleDrawer2(anchor, false)}>\r\n                                            <div className={classes.drawerHeader}>\r\n                                                <IconButton onClick={()=>{setState2(\"right\",false)}}>\r\n                                                {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ExpandMore />}\r\n                                            </IconButton>\r\n                                            </div>\r\n\r\n                                            <Divider />\r\n                                                {list2(anchor)}\r\n                                            </Drawer>\r\n                                        </React.Fragment>\r\n                                    ))}\r\n\r\n                                </Typography>\r\n                    \r\n                            </Toolbar>\r\n\r\n                            <div>\r\n      \r\n    </div>\r\n\r\n    {/* {['right'].map((anchor) => (\r\n                                        <React.Fragment key={anchor}>\r\n                                        <Button onClick={toggleDrawer2(anchor, true)}>{anchor}</Button>\r\n                                        <Drawer anchor={anchor} open={state2[anchor]} onClose={toggleDrawer2(anchor, false)}>\r\n                                            {list2(anchor)}\r\n                                        </Drawer>\r\n                                        </React.Fragment>\r\n                                    ))} */}\r\n\r\n\r\n            \r\n                            <Drawer\r\n                                className={classes.drawer}\r\n                                variant=\"persistent\"\r\n                                anchor=\"right\"\r\n                                open={open}\r\n                                classes={{\r\n                                    paper: classes.drawerPaper,\r\n                                }}\r\n                                >\r\n                                <div className={classes.drawerHeader}>\r\n                                    <IconButton onClick={handleDrawerClose}>\r\n                                        {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                                    </IconButton>\r\n                                </div>\r\n\r\n                               <Divider />\r\n                                <List>\r\n                                    {[<div>\r\n                                            <Button onClick={()=> {\r\n                                                if(sketchData && id){\r\n                                                    setElements(myVar[0])}   \r\n                                                \r\n                                                else{\r\n                                                    alert(\"Please Select a Sketch From Dashboard\")\r\n                                                }}}>\r\n                                                Draw</Button>\r\n                                        </div>     ,\r\n                                     \r\n                                     <div>\r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Width (feet)</InputLabel>\r\n                                            <Input\r\n                                                id=\"width\"\r\n                                                type=\"number\"\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                        <SwapHorizontalCircleIcon />\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                                \r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Length (feet)</InputLabel>\r\n\r\n                                            <Input\r\n                                                id=\"height\"\r\n                                                type=\"number\"\r\n                                                startAdornment={\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <SwapVerticalCircleIcon />\r\n                                                </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                            <Button value=\"Submit\" onClick={handleSubmit}>\r\n                                                Submit\r\n                                            </Button>\r\n\r\n                                    </div>, <div>\r\n\r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Your current Marla is : </InputLabel>\r\n                                            <Input\r\n                                                id=\"marla\"\r\n                                                type=\"number\"\r\n                                                step=\"any\"\r\n                                                readOnly\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n\r\n                                    </div>,\r\n\r\n                                    <div>\r\n\r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Text </InputLabel>\r\n                                            <Input\r\n\r\n                                                id=\"write\"\r\n                                                type=\"text\"\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n\r\n                                            <Button onClick={handleWrite} >Write</Button>\r\n\r\n                                    </div>, <div>\r\n\r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Enter Area (Sq. feet)</InputLabel>\r\n                                            <Input\r\n                                                id=\"area\"\r\n                                                type=\"number\"\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                        <SwapHorizontalCircleIcon /> <h2>*</h2>\r\n                                                        <SwapVerticalCircleIcon />\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n\r\n                                        \r\n\r\n                                    </div>,\r\n\r\n                                    <Button value=\"calculate\" onClick={scrapMe}>\r\n                                            Select Material\r\n                                        </Button>,\r\n\r\n                                        \r\n\r\n                                    <Button id = \"est\" \r\n                                        value=\"calculate\" \r\n                                        onClick={handleCalculate2}>\r\n                                        Estimate\r\n                                    </Button>\r\n,\r\n<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Bricks Count for Current Layer is : </InputLabel>\r\n    <Input\r\n        id=\"bricksCount\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,\r\n<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Bricks Count is : </InputLabel>\r\n    <Input\r\n        id=\"bricksCountTotal\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,\r\n\r\n<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement for this layer (Bags) Count is : </InputLabel>\r\n    <Input\r\n        id=\"cementCount\"\r\n        type=\"number\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement (Bags) Count is : </InputLabel>\r\n    <Input\r\n        id=\"cementCountTotal\"\r\n        type=\"number\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,\r\n\r\n<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Sand Count for this Layer (cubic ft) is : </InputLabel>\r\n    <Input\r\n        id=\"sandCount\"\r\n        type=\"number\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,\r\n<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Sand Count (cubic ft) is : </InputLabel>\r\n    <Input\r\n        id=\"sandCountTotal\"\r\n        type=\"number\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,\r\n<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement Count for this Layer ( Kg ) is : </InputLabel>\r\n    <Input\r\n        id=\"cementKg\"\r\n        type=\"number\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,<div>\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Total Cement Count ( Kg ) is : </InputLabel>\r\n    <Input\r\n        id=\"cementKgTotal\"\r\n        type=\"number\"\r\n        step=\"any\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n</div>,\r\n                                        \r\n\r\n                                    ].map((text, index) => (\r\n                                        <ListItem button key={text}>\r\n                                            <ListItemIcon>{index % 2 === 0 ? < BuildIcon /> : <LandscapeIcon />}</ListItemIcon>\r\n                                            <ListItemText primary={text} />\r\n                                        </ListItem>\r\n                                    ))}\r\n\r\n                                </List>\r\n\r\n                                <List>\r\n\r\n                                    {[<div>\r\n\r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Total Labour Cost of one floor area </InputLabel>\r\n\r\n                                            <Input\r\n                                                id=\"myArea\"\r\n                                                type=\"number\"\r\n                                                step=\"any\"\r\n                                                readOnly\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                    </InputAdornment>\r\n                                                }\r\n                        \r\n                                            />\r\n                                    </div>, <div>\r\n\r\n                                        <InputLabel htmlFor=\"input-with-icon-adornment\">Total Cost of Entered Area </InputLabel>\r\n\r\n                                            <Input\r\n                                                id=\"eArea\"\r\n                                                type=\"number\"\r\n                                                step=\"any\"\r\n                                                readOnly\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n                                     </div>, \r\n                                    <div>\r\n                                        <InputLabel \r\n                                        hidden\r\n                                        htmlFor=\"input-with-icon-adornment\">Total Labour Cost of Current Layer With Furnishing </InputLabel>\r\n                                            <Input\r\n                                                hidden\r\n                                                id=\"cArea\"\r\n                                                // value = {cArea}\r\n                                                step=\"any\"\r\n                                                readOnly\r\n                                                startAdornment={\r\n                                                    <InputAdornment position=\"start\">\r\n                                                    </InputAdornment>\r\n                                                }\r\n                                            />\r\n\r\n                                    </div>,\r\n                                    <div>\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">Total Labour Cost </InputLabel>\r\n                                        <Input\r\n                                            id=\"c2Area\"\r\n                                            // value = {cArea}\r\n                                            step=\"any\"\r\n                                            readOnly\r\n                                            startAdornment={\r\n                                                <InputAdornment position=\"start\">\r\n                                                </InputAdornment>\r\n                                            }\r\n                                        />\r\n\r\n                                </div>,\r\n                                    <div>\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\"> Total Material Cost (Without Steel)  </InputLabel>\r\n                                        <Input\r\n                                            id=\"cAreaMat\"\r\n                                            // value = {cArea}\r\n                                            step=\"any\"\r\n                                            readOnly\r\n                                            startAdornment={\r\n                                                <InputAdornment position=\"start\">\r\n                                                </InputAdornment>\r\n                                            }\r\n                                        />\r\n\r\n                                </div>,\r\n                                    <div>\r\n                                    <InputLabel htmlFor=\"input-with-icon-adornment\">Total Cost (Without Steel)</InputLabel>\r\n                                        <Input\r\n                                            id=\"c2AreaMat\"\r\n                                            // value = {cArea}\r\n                                            step=\"any\"\r\n                                            readOnly\r\n                                            startAdornment={\r\n                                                <InputAdornment position=\"start\">\r\n                                                </InputAdornment>\r\n                                            }\r\n                                        />\r\n\r\n                                </div>].map((text, index) => (\r\n\r\n                                        <ListItem button key={text}>\r\n                                            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                            <ListItemText primary={text} />\r\n                                        </ListItem>\r\n                                    ))}\r\n                                </List>\r\n                            </Drawer>\r\n\r\n\r\n{isMobile === 1 ? (<div className = \"row\">\r\n                                    <div className = \"col-xs-12\">\r\n\r\n                                    \r\n                                \r\n                                    <div className={classes.root}>\r\n                                        <ButtonGroup\r\n                                        \r\n                                            orientation=\"vertical\"\r\n                                            value={view}\r\n                                            exclusive\r\n                                            onChange={handleChange}\r\n                                            className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            >\r\n\r\n                                            <IconButton\r\n                                                color=\"#ffffff\"\r\n                                                aria-label=\"open drawer\"\r\n                                                edge=\"end\"\r\n                                                onClick={handleDrawerOpen}\r\n                                                className={clsx(open && classes.hide)}\r\n                                                className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            size = \"sm\"\r\n                                                >\r\n                                            \r\n                                               <MenuIcon />\r\n                                            </IconButton>\r\n\r\n                                            <input type=\"color\" id=\"c\" onChange={(e) => {\r\n                                                                         setBGColor(e.target.value);\r\n                                                                        }} \r\n                                                    style = {{\r\n                                                    position: \"absolute\",\r\n                                                    left: \"-10000px\",\r\n                                                    top: \" auto\",\r\n                                                    width: \"1px\",\r\n                                                    height: \"1px\",\r\n                                                    overflow: \"hidden\"\r\n                                                  \r\n                                            }}/>\r\n                                           \r\n\r\n                                            <Button\r\n                                            size = \"sm\"\r\n                                            id = \"colors\"\r\n                                            className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            onClick={ ()=> { \r\n\r\n                                                document.getElementById(\"c\").focus();\r\n                                                \r\n                                                document.getElementById(\"c\").click();\r\n                                                \r\n                                            }}\r\n                                            title = \"Set Background Color\">\r\n\r\n                                                    <FontAwesomeIcon icon={faPalette} />\r\n                                                   \r\n                                                \r\n                                                \r\n                                            </Button>\r\n\r\n                                            {UserServices.isLoggedin ?\r\n\r\n                                                (<>\r\n\r\n                                            <Button \r\n                                            size = \"sm\"\r\n                                            className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            onClick={getData} title = \"Get Data\">\r\n\r\n                                                    <FontAwesomeIcon icon={faGetPocket} />\r\n                                                   \r\n                                                \r\n                                                \r\n                                            </Button>\r\n\r\n                                                <Button\r\n                                                size = \"sm\" title=\"save sketch on server\"  onClick={(e) => {\r\n\r\n                                                    saveLayer();\r\n\r\n                                                     name = prompt(\"Please Enter name of your Sketch\")\r\n                                                    if(name){\r\n                                                    UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\r\n                                                    .then((data) => {\r\n                                                        console.log(data);\r\n                                                        toast.success(data, {\r\n                                                            position: \"bottom-right\",\r\n                                                            autoClose: 5000,\r\n                                                            hideProgressBar: false,\r\n                                                            closeOnClick: true,\r\n                                                            pauseOnHover: true,\r\n                                                            draggable: true,\r\n                                                            progress: undefined,\r\n                                                        });\r\n                                                    })\r\n                                                    .catch((err) => {\r\n                                                        toast.error(err.response.data, {\r\n                                                            position: \"bottom-right\",\r\n                                                            autoClose: 5000,\r\n                                                            hideProgressBar: false,\r\n                                                            closeOnClick: true,\r\n                                                            pauseOnHover: true,\r\n                                                            draggable: true,\r\n                                                            progress: undefined,\r\n                                                        });\r\n                                                    });\r\n                                                }}} className = \"btn\"  \r\n                                                style={{backgroundColor:\"none\"}} >\r\n                                                \r\n                                                <FontAwesomeIcon icon={faSave} />\r\n                                                \r\n                                                </Button>\r\n                                                <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={HandleSave} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                                                </>) : \r\n                                                (<>\r\n                                                    <Button \r\n                                                        size = \"sm\"\r\n                                                        className = \"btn\"  \r\n                                                        style={{backgroundColor:\"none\"}} \r\n                                                        onClick={()=> {\r\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                                                position: \"bottom-right\",\r\n                                                                autoClose: 5000,\r\n                                                                hideProgressBar: false,\r\n                                                                closeOnClick: true,\r\n                                                                pauseOnHover: true,\r\n                                                                draggable: true,\r\n                                                                progress: undefined,\r\n                                                                    });\r\n                                                        }} title = \"Get Data\">\r\n                                \r\n                                                        <FontAwesomeIcon icon={faGetPocket} />\r\n                                                   \r\n                                                    </Button>\r\n                                \r\n                                                    <Button\r\n                                                        size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\r\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                                                position: \"bottom-right\",\r\n                                                                autoClose: 5000,\r\n                                                                hideProgressBar: false,\r\n                                                                closeOnClick: true,\r\n                                                                pauseOnHover: true,\r\n                                                                draggable: true,\r\n                                                                progress: undefined,\r\n                                                                    });\r\n                                                        }} className = \"btn\"  \r\n                                                            style={{backgroundColor:\"none\"}} >\r\n                                                \r\n                                                                <FontAwesomeIcon icon={faSave} />\r\n                                                \r\n                                                        </Button>\r\n                                                        <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={()=> {\r\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                        });\r\n            }} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                                                        </>)\r\n                                            }  \r\n\r\n\r\n                                            \r\n\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                onClick={addLayer} title = \"Add Layer\">\r\n\r\n\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n\r\n                                            </Button>\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"selection\" \r\n                                                onClick={() => setTool(\"selection\")}   \r\n                                                aria-label=\"left aligned\"\r\n                                                title = \"Selection\">\r\n                                                \r\n\r\n                                                <FontAwesomeIcon icon={faVoteYea} />\r\n\r\n                                            </Button>\r\n    \r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"selection\" \r\n                                                onClick={() => setTool(\"sizes\")}   \r\n                                                aria-label=\"left aligned\"\r\n                                                title = \"Get Size\">\r\n                                            \r\n\r\n                                                <FontAwesomeIcon icon={faJoget} />\r\n                                                \r\n                                            </Button>\r\n                                            \r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"resize\" \r\n                                                onClick={() => setTool(\"resize\")}\r\n                                                title = \"Re - Factor\">\r\n\r\n                                                <FontAwesomeIcon icon={faIndustry} />\r\n\r\n                                            </Button>\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"line\" \r\n                                                onClick={() => {\r\n                                                    var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                    setWall(myWall)\r\n                                                    \r\n                                                    setTool(\"line\")}}\r\n                                                title = \"Wall\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faGripLinesVertical} />\r\n\r\n\r\n                                            </Button>\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"rectangle\" \r\n                                                onClick={() => {setTool(\"rectangle\")\r\n                                                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                                setWall(myWall)\r\n                                                                }}\r\n                                                title = \"Room \">\r\n                                               \r\n\r\n                                                <FontAwesomeIcon icon={faSquare} />\r\n\r\n\r\n                                            </Button>\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"ellipse\" \r\n                                                onClick={() => {\r\n                                                setTool(\"ellipse\")\r\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                setWall(myWall)}}\r\n                                                title = \"Ellipse Shape Room\">\r\n                                                \r\n\r\n                                                <FontAwesomeIcon icon={faCircleNotch} />\r\n\r\n                                            </Button>\r\n                                    \r\n\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                aria-controls=\"simple-menu\" \r\n                                                aria-haspopup=\"true\" \r\n                                                onClick={handleClick}\r\n                                                title = \"Door\">\r\n                                                \r\n\r\n                                                <FontAwesomeIcon icon={faDoorOpen} />\r\n\r\n                                            </Button>\r\n \r\n                                                <Menu\r\n                                                    id=\"simple-menu\"\r\n                                                    anchorEl={anchorEl}\r\n                                                    keepMounted\r\n                                                    open={Boolean(anchorEl)}\r\n                                                    onClose={handleClose}\r\n                                                    >\r\n             \r\n                                                    <MenuItem \r\n                                                        id = \"arcL\" \r\n                                                        onClick={() => {setTool(\"arcL\")\r\n                                                                        setAnchorEl(null);}  }>\r\n                                                        Door Left\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        id = \"arcR\" \r\n                                                        onClick={() => {setTool(\"arcR\") \r\n                                                                        setAnchorEl(null);} }>\r\n                                                        Door Right\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        id = \"arcR\" \r\n                                                        onClick={() => {setTool(\"arcLB\") \r\n                                                                        setAnchorEl(null);} }>\r\n                                                        Door Left Bottom\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        id = \"arcR\" \r\n                                                        onClick={() => {setTool(\"arcRB\") \r\n                                                                        setAnchorEl(null);} }>\r\n                                                        Door Right Bottom\r\n                                                    </MenuItem>\r\n\r\n                                                </Menu>\r\n\r\n\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"circle\" \r\n                                                onClick={() => {setTool(\"circle\")\r\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                setWall(myWall)}}\r\n                                                title = \"Circular Room\">\r\n                                              \r\n                                                <FontAwesomeIcon icon={faCircle} />\r\n                                            </Button>\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"eraser\" \r\n                                                onClick={() => setTool(\"eraser\")}\r\n                                                title = \"Eraser\">\r\n                                    \r\n\r\n                                                <FontAwesomeIcon icon={faEraser} />\r\n\r\n\r\n                                            </Button>\r\n                                            <Button\r\n                                            size = \"sm\"  className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                onClick={lessItem} \r\n                                                title = \"Go lower Floor\">\r\n                                                <ExpandLessIcon/> \r\n                                            </Button>\r\n\r\n                                            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\r\n\r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                onClick={upItem} \r\n                                                title = \"Go Upper Floor\">\r\n                                                <ExpandMoreIcon/>\r\n                                            </Button>\r\n                                            <Button \r\n                                                onClick={saveLayer} \r\n                                                className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                title = \"Save Layer\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faLayerGroup} />\r\n                                            </Button>\r\n                                            {/* <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            onClick={HandleSave} title= \"Download File\">\r\n                                            \r\n\r\n                                            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n                                            </Button> */}\r\n                                           \r\n                    \r\n                                            <Button\r\n                                            size = \"sm\" className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}}  onClick={()=>{\r\n                                                if(widthh === null)\r\n                                                {\r\n                                                    alert(\"Please Enter Width and Length First\")\r\n                                                }\r\n                                                else{\r\n                                                const canv = document.getElementById(\"canvas\");\r\n                                                const ctx = canv.getContext('2d')\r\n                                                ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                                                setElements([]);\r\n                                                setMyVar([]);\r\n                                                item = 0;\r\n                                                totalLayer = 0;\r\n                                                }}} \r\n                                                title = \"Clear All\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faTrashAlt}/>\r\n                                            </Button>\r\n                    \r\n                                            \r\n                                        </ButtonGroup>\r\n\r\n                                    </div>\r\n                                    </div>\r\n                                    </div>):\r\n                                    \r\n    isMobile === 2 ? ( \r\n        <div className=\"container\" ><center>\r\n            <div className = \"row\">\r\n            <div className = \"col-xs-12\">\r\n\r\n    \r\n\r\n                <div className={classes.root}>\r\n                    <ButtonGroup\r\n        \r\n                            orientation=\"vertical\"\r\n                            value={view}\r\n                            exclusive\r\n                            onChange={handleChange}\r\n                            className = \"btn\"  \r\n                        >\r\n\r\n                    <IconButton\r\n                        color=\"#ffffff\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"end\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(open && classes.hide)}\r\n                        className = \"btn\"  \r\n                        style={{backgroundColor:\"none\"}} \r\n                        size = \"sm\"\r\n                        >\r\n            \r\n                                <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <input type=\"color\" id=\"c\" onChange={(e) => {\r\n                                                                setBGColor(e.target.value);\r\n                                                                    }} \r\n                            style = {{\r\n                                position: \"absolute\",\r\n                                left: \"-10000px\",\r\n                                top: \" auto\",\r\n                                width: \"1px\",\r\n                                height: \"1px\",\r\n                                overflow: \"hidden\"\r\n                  \r\n                            }}/>\r\n           \r\n\r\n                    <Button\r\n                        size = \"sm\"\r\n                        id = \"colors\"\r\n                        className = \"btn\"  \r\n                        style={{backgroundColor:\"none\"}} \r\n                            onClick={ ()=> { \r\n\r\n                                document.getElementById(\"c\").focus();\r\n                \r\n                                document.getElementById(\"c\").click();\r\n                \r\n                            }}\r\n                        title = \"Set Background Color\">\r\n\r\n                        <FontAwesomeIcon icon={faPalette} />\r\n                   \r\n                </Button>\r\n\r\n                {UserServices.isLoggedin ?\r\n\r\n                    (<>\r\n\r\n                    <Button \r\n                        size = \"sm\"\r\n                        className = \"btn\"  \r\n                        style={{backgroundColor:\"none\"}} \r\n                        onClick={getData} title = \"Get Data\">\r\n\r\n                        <FontAwesomeIcon icon={faGetPocket} />\r\n                   \r\n                    </Button>\r\n\r\n                    <Button\r\n                        size = \"sm\" title=\"save sketch on server\"  onClick={(e) => {\r\n                        name = prompt(\"Please Enter name of your Sketch\")\r\n                            if(name){\r\n                                UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\r\n                                .then((data) => {\r\n                                console.log(data);\r\n                                toast.success(data, {\r\n                                position: \"bottom-right\",\r\n                                autoClose: 5000,\r\n                                hideProgressBar: false,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                                    });\r\n                                })\r\n                                .catch((err) => {\r\n                                    toast.error(err.response.data, {\r\n                                    position: \"bottom-right\",\r\n                                    autoClose: 5000,\r\n                                    hideProgressBar: false,\r\n                                    closeOnClick: true,\r\n                                    pauseOnHover: true,\r\n                                    draggable: true,\r\n                                    progress: undefined,\r\n                                    });\r\n                                });\r\n                            }}} className = \"btn\"  \r\n                            style={{backgroundColor:\"none\"}} >\r\n                \r\n                                <FontAwesomeIcon icon={faSave} />\r\n                \r\n                        </Button>\r\n                        <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={HandleSave} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                    </>) : \r\n                        (<>\r\n                            <Button \r\n                                size = \"sm\"\r\n                                className = \"btn\"  \r\n                                style={{backgroundColor:\"none\"}} \r\n                                onClick={()=> {\r\n                                    toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                        position: \"bottom-right\",\r\n                                        autoClose: 5000,\r\n                                        hideProgressBar: false,\r\n                                        closeOnClick: true,\r\n                                        pauseOnHover: true,\r\n                                        draggable: true,\r\n                                        progress: undefined,\r\n                                            });\r\n                                }} title = \"Get Data\">\r\n        \r\n                                <FontAwesomeIcon icon={faGetPocket} />\r\n                           \r\n                            </Button>\r\n        \r\n                            <Button\r\n                                size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\r\n                                    toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                        position: \"bottom-right\",\r\n                                        autoClose: 5000,\r\n                                        hideProgressBar: false,\r\n                                        closeOnClick: true,\r\n                                        pauseOnHover: true,\r\n                                        draggable: true,\r\n                                        progress: undefined,\r\n                                            });\r\n                                }} className = \"btn\"  \r\n                                    style={{backgroundColor:\"none\"}} >\r\n                        \r\n                                        <FontAwesomeIcon icon={faSave} />\r\n                        \r\n                                </Button>\r\n                                <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={()=> {\r\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                        });\r\n            }} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                                </>\r\n                                )\r\n                    }  \r\n\r\n            \r\n\r\n            \r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                onClick={addLayer} title = \"Add Layer\">\r\n\r\n\r\n                <FontAwesomeIcon icon={faPlus} />\r\n\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"selection\" \r\n                onClick={() => setTool(\"selection\")}   \r\n                aria-label=\"left aligned\"\r\n                title = \"Selection\">\r\n                \r\n\r\n                <FontAwesomeIcon icon={faVoteYea} />\r\n\r\n            </Button>\r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"selection\" \r\n                onClick={() => setTool(\"sizes\")}   \r\n                aria-label=\"left aligned\"\r\n                title = \"Get Size\">\r\n            \r\n\r\n                <FontAwesomeIcon icon={faJoget} />\r\n                \r\n            </Button>\r\n            \r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"resize\" \r\n                onClick={() => setTool(\"resize\")}\r\n                title = \"Re - Factor\">\r\n\r\n                <FontAwesomeIcon icon={faIndustry} />\r\n\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"line\" \r\n                onClick={() => {\r\n                    var myWall = prompt(\"Please Enter Width of Wall\")\r\n                    setWall(myWall)\r\n                    \r\n                    setTool(\"line\")}}\r\n                title = \"Wall\">\r\n                \r\n                <FontAwesomeIcon icon={faGripLinesVertical} />\r\n\r\n\r\n            </Button>\r\n            </ButtonGroup>\r\n            </div></div>                <div className={classes.root}>\r\n\r\n            <div className = \"row\">\r\n            <div className = \"col-xs-12\">\r\n                \r\n            <ButtonGroup\r\n            \r\n            orientation=\"vertical\"\r\n            value={view}\r\n            exclusive\r\n            onChange={handleChange}\r\n            className = \"btn\"  \r\n            style={{paddingRight : \"0.99em\"}} >\r\n            \r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"rectangle\" \r\n                onClick={() => {setTool(\"rectangle\")\r\n                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                setWall(myWall)\r\n                                }}\r\n                title = \"Room \">\r\n               \r\n\r\n                <FontAwesomeIcon icon={faSquare} />\r\n\r\n\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"ellipse\" \r\n                onClick={() => {\r\n                setTool(\"ellipse\")\r\n                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                setWall(myWall)}}\r\n                title = \"Ellipse Shape Room\">\r\n                \r\n\r\n                <FontAwesomeIcon icon={faCircleNotch} />\r\n\r\n            </Button>\r\n    \r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                aria-controls=\"simple-menu\" \r\n                aria-haspopup=\"true\" \r\n                onClick={handleClick}\r\n                title = \"Door\">\r\n                \r\n\r\n                <FontAwesomeIcon icon={faDoorOpen} />\r\n\r\n            </Button>\r\n\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                    >\r\n\r\n                    <MenuItem \r\n                        id = \"arcL\" \r\n                        onClick={() => {setTool(\"arcL\")\r\n                                        setAnchorEl(null);}  }>\r\n                        Door Left\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                        id = \"arcR\" \r\n                        onClick={() => {setTool(\"arcR\") \r\n                                        setAnchorEl(null);} }>\r\n                        Door Right\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                        id = \"arcR\" \r\n                        onClick={() => {setTool(\"arcLB\") \r\n                                        setAnchorEl(null);} }>\r\n                        Door Left Bottom\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                        id = \"arcR\" \r\n                        onClick={() => {setTool(\"arcRB\") \r\n                                        setAnchorEl(null);} }>\r\n                        Door Right Bottom\r\n                    </MenuItem>\r\n\r\n                </Menu>\r\n\r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"circle\" \r\n                onClick={() => {setTool(\"circle\")\r\n                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                setWall(myWall)}}\r\n                title = \"Circular Room\">\r\n              \r\n                <FontAwesomeIcon icon={faCircle} />\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"eraser\" \r\n                onClick={() => setTool(\"eraser\")}\r\n                title = \"Eraser\">\r\n    \r\n\r\n                <FontAwesomeIcon icon={faEraser} />\r\n\r\n\r\n            </Button>\r\n            <Button\r\n            size = \"sm\"  className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                onClick={lessItem} \r\n                title = \"Go lower Floor\">\r\n                <ExpandLessIcon/> \r\n            </Button>\r\n\r\n            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                onClick={upItem} \r\n                title = \"Go Upper Floor\">\r\n                <ExpandMoreIcon/>\r\n            </Button>\r\n            <Button \r\n                                                onClick={saveLayer} \r\n                                                className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                title = \"Save Layer\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faLayerGroup} />\r\n                                            </Button>\r\n            {/* <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={HandleSave} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button> */}\r\n           \r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}}  onClick={()=>{\r\n                if(widthh === null)\r\n                {\r\n                    alert(\"Please Enter Width and Length First\")\r\n                }\r\n                else{\r\n                const canv = document.getElementById(\"canvas\");\r\n                const ctx = canv.getContext('2d')\r\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                setElements([]);\r\n                setMyVar([]);\r\n                item = 0;\r\n                totalLayer = 0;\r\n                }}} \r\n                title = \"Clear All\">\r\n                \r\n                <FontAwesomeIcon icon={faTrashAlt}/>\r\n            </Button>\r\n\r\n            \r\n        </ButtonGroup>\r\n</div>\r\n    </div></div>\r\n    </div></center>\r\n    </div> ):\r\n    \r\n    \r\n    isMobile === 3 ? ( \r\n     \r\n        <div className=\"container\" ><center>\r\n            <div className = \"row\">\r\n            <div className = \"col-xs-12\">\r\n\r\n    \r\n\r\n                <div className={classes.root}>\r\n                    <ButtonGroup\r\n        \r\n                            orientation=\"vertical\"\r\n                            value={view}\r\n                            exclusive\r\n                            onChange={handleChange}\r\n                            className = \"btn\"  \r\n                            style={{paddingRight : \"2.5em\"}} \r\n                        >\r\n\r\n                    <IconButton\r\n                        color=\"#ffffff\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"end\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(open && classes.hide)}\r\n                        className = \"btn\"  \r\n                        style={{backgroundColor:\"none\"}} \r\n                        size = \"sm\"\r\n                        >\r\n            \r\n                                <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <input type=\"color\" id=\"c\" onChange={(e) => {\r\n                                                                setBGColor(e.target.value);\r\n                                                                    }} \r\n                            style = {{\r\n                                position: \"absolute\",\r\n                                left: \"-10000px\",\r\n                                top: \" auto\",\r\n                                width: \"1px\",\r\n                                height: \"1px\",\r\n                                overflow: \"hidden\"\r\n                  \r\n                            }}/>\r\n           \r\n\r\n                    <Button\r\n                        size = \"sm\"\r\n                        id = \"colors\"\r\n                        className = \"btn\"  \r\n                        style={{backgroundColor:\"none\"}} \r\n                            onClick={ ()=> { \r\n\r\n                                document.getElementById(\"c\").focus();\r\n                \r\n                                document.getElementById(\"c\").click();\r\n                \r\n                            }}\r\n                        title = \"Set Background Color\">\r\n\r\n                        <FontAwesomeIcon icon={faPalette} />\r\n                   \r\n                </Button>\r\n\r\n                {UserServices.isLoggedin ?\r\n\r\n                    (<>\r\n\r\n                    <Button \r\n                        size = \"sm\"\r\n                        className = \"btn\"  \r\n                        style={{backgroundColor:\"none\"}} \r\n                        onClick={getData} title = \"Get Data\">\r\n\r\n                        <FontAwesomeIcon icon={faGetPocket} />\r\n                   \r\n                    </Button>\r\n\r\n                    <Button\r\n                        size = \"sm\" title=\"save sketch on server\"  onClick={(e) => {\r\n                        name = prompt(\"Please Enter name of your Sketch\")\r\n                            if(name){\r\n                                UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\r\n                                .then((data) => {\r\n                                console.log(data);\r\n                                toast.success(data, {\r\n                                position: \"bottom-right\",\r\n                                autoClose: 5000,\r\n                                hideProgressBar: false,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                                    });\r\n                                })\r\n                                .catch((err) => {\r\n                                    toast.error(err.response.data, {\r\n                                    position: \"bottom-right\",\r\n                                    autoClose: 5000,\r\n                                    hideProgressBar: false,\r\n                                    closeOnClick: true,\r\n                                    pauseOnHover: true,\r\n                                    draggable: true,\r\n                                    progress: undefined,\r\n                                    });\r\n                                });\r\n                            }}} className = \"btn\"  \r\n                            style={{backgroundColor:\"none\"}} >\r\n                \r\n                                <FontAwesomeIcon icon={faSave} />\r\n                \r\n                        </Button>\r\n                        <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={HandleSave} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                    </>) : \r\n                        ( <>\r\n                        <Button \r\n                            size = \"sm\"\r\n                            className = \"btn\"  \r\n                            style={{backgroundColor:\"none\"}} \r\n                            onClick={()=> {\r\n                                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                    position: \"bottom-right\",\r\n                                    autoClose: 5000,\r\n                                    hideProgressBar: false,\r\n                                    closeOnClick: true,\r\n                                    pauseOnHover: true,\r\n                                    draggable: true,\r\n                                    progress: undefined,\r\n                                        });\r\n                            }} title = \"Get Data\">\r\n    \r\n                            <FontAwesomeIcon icon={faGetPocket} />\r\n                       \r\n                        </Button>\r\n    \r\n                        <Button\r\n                            size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\r\n                                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                    position: \"bottom-right\",\r\n                                    autoClose: 5000,\r\n                                    hideProgressBar: false,\r\n                                    closeOnClick: true,\r\n                                    pauseOnHover: true,\r\n                                    draggable: true,\r\n                                    progress: undefined,\r\n                                        });\r\n                            }} className = \"btn\"  \r\n                                style={{backgroundColor:\"none\"}} >\r\n                    \r\n                                    <FontAwesomeIcon icon={faSave} />\r\n                    \r\n                            </Button>\r\n                            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={()=> {\r\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                        });\r\n            }} className = \"btn\"  \r\n                style={{backgroundColor:\"none\"}} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                            </>)\r\n                    }  \r\n\r\n</ButtonGroup>\r\n            </div></div></div>\r\n            <div className = \"row\">\r\n            <div className = \"col-xs-12\">\r\n\r\n    \r\n\r\n                <div className={classes.root}>\r\n                    <ButtonGroup\r\n        \r\n                            orientation=\"vertical\"\r\n                            value={view}\r\n                            exclusive\r\n                            onChange={handleChange}\r\n                            className = \"btn\"  \r\n                            style={{backgroundColor:\"none\"}} \r\n                        >\r\n            \r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                onClick={addLayer} title = \"Add Layer\">\r\n\r\n\r\n                <FontAwesomeIcon icon={faPlus} />\r\n\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"selection\" \r\n                onClick={() => setTool(\"selection\")}   \r\n                aria-label=\"left aligned\"\r\n                title = \"Selection\">\r\n                \r\n\r\n                <FontAwesomeIcon icon={faVoteYea} />\r\n\r\n            </Button>\r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"selection\" \r\n                onClick={() => setTool(\"sizes\")}   \r\n                aria-label=\"left aligned\"\r\n                title = \"Get Size\">\r\n            \r\n\r\n                <FontAwesomeIcon icon={faJoget} />\r\n                \r\n            </Button>\r\n            \r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"resize\" \r\n                onClick={() => setTool(\"resize\")}\r\n                title = \"Re - Factor\">\r\n\r\n                <FontAwesomeIcon icon={faIndustry} />\r\n\r\n            </Button>\r\n            \r\n            \r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"line\" \r\n                onClick={() => {\r\n                    var myWall = prompt(\"Please Enter Width of Wall\")\r\n                    setWall(myWall)\r\n                    \r\n                    setTool(\"line\")}}\r\n                title = \"Wall\">\r\n                \r\n                <FontAwesomeIcon icon={faGripLinesVertical} />\r\n\r\n\r\n            </Button>\r\n</ButtonGroup>\r\n</div></div></div>\r\n            <div className = \"row\">\r\n            <div className = \"col-xs-12\">\r\n\r\n    \r\n\r\n                <div className={classes.root}>\r\n                    <ButtonGroup\r\n        \r\n                            orientation=\"vertical\"\r\n                            value={view}\r\n                            exclusive\r\n                            onChange={handleChange}\r\n                            className = \"btn\"  \r\n                            style={{backgroundColor:\"none\"}} \r\n                        >\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"rectangle\" \r\n                onClick={() => {setTool(\"rectangle\")\r\n                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                setWall(myWall)\r\n                                }}\r\n                title = \"Room \">\r\n               \r\n\r\n                <FontAwesomeIcon icon={faSquare} />\r\n\r\n\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"ellipse\" \r\n                onClick={() => {\r\n                setTool(\"ellipse\")\r\n                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                setWall(myWall)}}\r\n                title = \"Ellipse Shape Room\">\r\n                \r\n\r\n                <FontAwesomeIcon icon={faCircleNotch} />\r\n\r\n            </Button>\r\n    \r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                aria-controls=\"simple-menu\" \r\n                aria-haspopup=\"true\" \r\n                onClick={handleClick}\r\n                title = \"Door\">\r\n                \r\n\r\n                <FontAwesomeIcon icon={faDoorOpen} />\r\n\r\n            </Button>\r\n\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                    >\r\n\r\n                    <MenuItem \r\n                        id = \"arcL\" \r\n                        onClick={() => {setTool(\"arcL\")\r\n                                        setAnchorEl(null);}  }>\r\n                        Door Left\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                        id = \"arcR\" \r\n                        onClick={() => {setTool(\"arcR\") \r\n                                        setAnchorEl(null);} }>\r\n                        Door Right\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                        id = \"arcR\" \r\n                        onClick={() => {setTool(\"arcLB\") \r\n                                        setAnchorEl(null);} }>\r\n                        Door Left Bottom\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                        id = \"arcR\" \r\n                        onClick={() => {setTool(\"arcRB\") \r\n                                        setAnchorEl(null);} }>\r\n                        Door Right Bottom\r\n                    </MenuItem>\r\n\r\n                </Menu>\r\n\r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"circle\" \r\n                onClick={() => {setTool(\"circle\")\r\n                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                setWall(myWall)}}\r\n                title = \"Circular Room\">\r\n              \r\n                <FontAwesomeIcon icon={faCircle} />\r\n            </Button>\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                id = \"eraser\" \r\n                onClick={() => setTool(\"eraser\")}\r\n                title = \"Eraser\">\r\n    \r\n\r\n                <FontAwesomeIcon icon={faEraser} />\r\n\r\n\r\n            </Button>\r\n            </ButtonGroup>\r\n            </div></div></div>\r\n\r\n            <div className = \"row\">\r\n            <div className = \"col-xs-12\">\r\n\r\n    \r\n\r\n                <div className={classes.root}>\r\n                    <ButtonGroup\r\n        \r\n                            orientation=\"vertical\"\r\n                            value={view}\r\n                            exclusive\r\n                            onChange={handleChange}\r\n                            className = \"btn\"  \r\n                            style={{paddingRight : \"2.7em\"}} \r\n                        >\r\n            <Button\r\n            size = \"sm\"  className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                onClick={lessItem} \r\n                title = \"Go lower Floor\">\r\n                <ExpandLessIcon/> \r\n            </Button>\r\n\r\n            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n                onClick={upItem} \r\n                title = \"Go Upper Floor\">\r\n                <ExpandMoreIcon/>\r\n            </Button>\r\n            <Button \r\n                                                onClick={saveLayer} \r\n                                                className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                title = \"Save Layer\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faLayerGroup} />\r\n                                            </Button>\r\n            {/* <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={HandleSave} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button> */}\r\n           \r\n\r\n            <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}}  onClick={()=>{\r\n                if(widthh === null)\r\n                {\r\n                    alert(\"Please Enter Width and Length First\")\r\n                }\r\n                else{\r\n                const canv = document.getElementById(\"canvas\");\r\n                const ctx = canv.getContext('2d')\r\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                setElements([]);\r\n                setMyVar([]);\r\n                item = 0;\r\n                totalLayer = 0;\r\n                }}} \r\n                title = \"Clear All\">\r\n                \r\n                <FontAwesomeIcon icon={faTrashAlt}/>\r\n            </Button>\r\n\r\n            \r\n        </ButtonGroup>\r\n</div>\r\n    </div>\r\n    </div></center>\r\n    </div>):(\r\n\r\n                            \r\n                                <div className = \"row\" style={{paddingLeft : '5em'}}>\r\n                                    <div className = \"col-xs-12\" >\r\n\r\n                                    \r\n                                \r\n                                    <div className={classes.root} >\r\n                                        <ButtonGroup\r\n                                            orientation=\"vertical\"\r\n                                            value={view}\r\n                                            exclusive\r\n                                            onChange={handleChange}\r\n                                            className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            >\r\n\r\n                                            <IconButton\r\n                                                color=\"#ffffff\"\r\n                                                aria-label=\"open drawer\"\r\n                                                edge=\"end\"\r\n                                                onClick={handleDrawerOpen}\r\n                                                className={clsx(open && classes.hide)}\r\n                                                className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                >\r\n                                            \r\n                                               <MenuIcon />\r\n                                            </IconButton>\r\n\r\n                                            <input type=\"color\" id=\"c\" onChange={(e) => {\r\n                                                                         setBGColor(e.target.value);\r\n                                                                        }} \r\n                                                    style = {{\r\n                                                    position: \"absolute\",\r\n                                                    left: \"-10000px\",\r\n                                                    top: \" auto\",\r\n                                                    width: \"1px\",\r\n                                                    height: \"1px\",\r\n                                                    overflow: \"hidden\"\r\n                                                  \r\n                                            }}/>\r\n                                           \r\n\r\n                                            <Button\r\n                                            \r\n                                            id = \"colors\"\r\n                                            className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            onClick={ ()=> { \r\n\r\n                                                document.getElementById(\"c\").focus();\r\n                                                \r\n                                                document.getElementById(\"c\").click();\r\n                                                \r\n                                            }}\r\n                                            title = \"Set Background Color\">\r\n\r\n                                                    <FontAwesomeIcon icon={faPalette} />\r\n                                                   \r\n                                                \r\n                                                \r\n                                            </Button>\r\n\r\n                                            {UserServices.isLoggedin ?\r\n\r\n                                                (<>\r\n\r\n                                            <Button \r\n                                            \r\n                                            className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            onClick={getData} title = \"Get Data\">\r\n\r\n                                                    <FontAwesomeIcon icon={faGetPocket} />\r\n                                                   \r\n                                                \r\n                                                \r\n                                            </Button>\r\n\r\n                                                <Button title=\"save sketch on server\"  onClick={(e) => {\r\n                                                     name = prompt(\"Please Enter name of your Sketch\")\r\n                                                    if(name){\r\n                                                    UserServices.save(name , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\r\n                                                    .then((data) => {\r\n                                                        console.log(data);\r\n                                                        toast.success(data, {\r\n                                                            position: \"bottom-right\",\r\n                                                            autoClose: 5000,\r\n                                                            hideProgressBar: false,\r\n                                                            closeOnClick: true,\r\n                                                            pauseOnHover: true,\r\n                                                            draggable: true,\r\n                                                            progress: undefined,\r\n                                                        });\r\n                                                    })\r\n                                                    .catch((err) => {\r\n                                                        toast.error(err.response.data, {\r\n                                                            position: \"bottom-right\",\r\n                                                            autoClose: 5000,\r\n                                                            hideProgressBar: false,\r\n                                                            closeOnClick: true,\r\n                                                            pauseOnHover: true,\r\n                                                            draggable: true,\r\n                                                            progress: undefined,\r\n                                                        });\r\n                                                    });\r\n                                                }}} className = \"btn\"  \r\n                                                style={{backgroundColor:\"none\"}} >\r\n                                                \r\n                                                <FontAwesomeIcon icon={faSave} />\r\n                                                \r\n                                                </Button>\r\n                                                <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={HandleSave} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                                                </>) : \r\n                                                (<>\r\n                                                    <Button \r\n                                                        size = \"sm\"\r\n                                                        className = \"btn\"  \r\n                                                        style={{backgroundColor:\"none\"}} \r\n                                                        onClick={()=> {\r\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                                                position: \"bottom-right\",\r\n                                                                autoClose: 5000,\r\n                                                                hideProgressBar: false,\r\n                                                                closeOnClick: true,\r\n                                                                pauseOnHover: true,\r\n                                                                draggable: true,\r\n                                                                progress: undefined,\r\n                                                                    });\r\n                                                        }} title = \"Get Data\">\r\n                                \r\n                                                        <FontAwesomeIcon icon={faGetPocket} />\r\n                                                   \r\n                                                    </Button>\r\n                                \r\n                                                    <Button\r\n                                                        size = \"sm\" title=\"save sketch on server\"  onClick={()=> {\r\n                                                            toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                                                                position: \"bottom-right\",\r\n                                                                autoClose: 5000,\r\n                                                                hideProgressBar: false,\r\n                                                                closeOnClick: true,\r\n                                                                pauseOnHover: true,\r\n                                                                draggable: true,\r\n                                                                progress: undefined,\r\n                                                                    });\r\n                                                        }} className = \"btn\"  \r\n                                                            style={{backgroundColor:\"none\"}} >\r\n                                                \r\n                                                                <FontAwesomeIcon icon={faSave} />\r\n                                                \r\n                                                        </Button>\r\n                                                        \r\n                                                        <Button\r\n            size = \"sm\" className = \"btn\"  \r\n            style={{backgroundColor:\"none\"}} \r\n            onClick={()=> {\r\n                toast.error(\"We are sorry... This service is available for only Subscribed Users!\", {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                        });\r\n            }} title= \"Download File\">\r\n            \r\n\r\n            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n            </Button>\r\n                                                        </>\r\n                                                        \r\n                                                        )\r\n                                            }  \r\n\r\n                                            \r\n\r\n                                            \r\n\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                onClick={addLayer} title = \"Add Layer\">\r\n\r\n\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n\r\n                                            </Button>\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"selection\" \r\n                                                onClick={() => setTool(\"selection\")}   \r\n                                                aria-label=\"left aligned\"\r\n                                                title = \"Selection\">\r\n                                                \r\n\r\n                                                <FontAwesomeIcon icon={faVoteYea} />\r\n\r\n                                            </Button>\r\n    \r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"selection\" \r\n                                                onClick={() => setTool(\"sizes\")}   \r\n                                                aria-label=\"left aligned\"\r\n                                                title = \"Get Size\">\r\n                                            \r\n\r\n                                                <FontAwesomeIcon icon={faJoget} />\r\n                                                \r\n                                            </Button>\r\n                                            \r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"resize\" \r\n                                                onClick={() => setTool(\"resize\")}\r\n                                                title = \"Re - Factor\">\r\n\r\n                                                <FontAwesomeIcon icon={faIndustry} />\r\n\r\n                                            </Button>\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"line\" \r\n                                                onClick={() => {\r\n                                                    var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                    setWall(myWall)\r\n                                                    \r\n                                                    setTool(\"line\")}}\r\n                                                title = \"Wall\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faGripLinesVertical} />\r\n\r\n\r\n                                            </Button>\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"rectangle\" \r\n                                                onClick={() => {setTool(\"rectangle\")\r\n                                                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                                setWall(myWall)\r\n                                                                }}\r\n                                                title = \"Room \">\r\n                                               \r\n\r\n                                                <FontAwesomeIcon icon={faSquare} />\r\n\r\n\r\n                                            </Button>\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"ellipse\" \r\n                                                onClick={() => {\r\n                                                setTool(\"ellipse\")\r\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                setWall(myWall)}}\r\n                                                title = \"Ellipse Shape Room\">\r\n                                                \r\n\r\n                                                <FontAwesomeIcon icon={faCircleNotch} />\r\n\r\n                                            </Button>\r\n                                    \r\n\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                aria-controls=\"simple-menu\" \r\n                                                aria-haspopup=\"true\" \r\n                                                onClick={handleClick}\r\n                                                title = \"Door\">\r\n                                                \r\n\r\n                                                <FontAwesomeIcon icon={faDoorOpen} />\r\n\r\n                                            </Button>\r\n \r\n                                                <Menu\r\n                                                    id=\"simple-menu\"\r\n                                                    anchorEl={anchorEl}\r\n                                                    keepMounted\r\n                                                    open={Boolean(anchorEl)}\r\n                                                    onClose={handleClose}\r\n                                                    >\r\n             \r\n                                                    <MenuItem \r\n                                                        id = \"arcL\" \r\n                                                        onClick={() => {setTool(\"arcL\")\r\n                                                                        setAnchorEl(null);}  }>\r\n                                                        Door Left\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        id = \"arcR\" \r\n                                                        onClick={() => {setTool(\"arcR\") \r\n                                                                        setAnchorEl(null);} }>\r\n                                                        Door Right\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        id = \"arcR\" \r\n                                                        onClick={() => {setTool(\"arcLB\") \r\n                                                                        setAnchorEl(null);} }>\r\n                                                        Door Left Bottom\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        id = \"arcR\" \r\n                                                        onClick={() => {setTool(\"arcRB\") \r\n                                                                        setAnchorEl(null);} }>\r\n                                                        Door Right Bottom\r\n                                                    </MenuItem>\r\n\r\n                                                </Menu>\r\n\r\n\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"circle\" \r\n                                                onClick={() => {setTool(\"circle\")\r\n                                                var myWall = prompt(\"Please Enter Width of Wall\")\r\n                                                setWall(myWall)}}\r\n                                                title = \"Circular Room\">\r\n                                              \r\n                                                <FontAwesomeIcon icon={faCircle} />\r\n                                            </Button>\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                id = \"eraser\" \r\n                                                onClick={() => setTool(\"eraser\")}\r\n                                                title = \"Eraser\">\r\n                                    \r\n\r\n                                                <FontAwesomeIcon icon={faEraser} />\r\n\r\n\r\n                                            </Button>\r\n                                            <Button  className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                onClick={lessItem} \r\n                                                title = \"Go lower Floor\">\r\n                                                <ExpandLessIcon/> \r\n                                            </Button>\r\n\r\n                                            <Typography style={{color: \"black\"}}>{item} / {totalLayer}</Typography>\r\n\r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                onClick={upItem} \r\n                                                title = \"Go Upper Floor\">\r\n                                                <ExpandMoreIcon/>\r\n                                            </Button>\r\n                                            <Button \r\n                                                onClick={saveLayer} \r\n                                                className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                                title = \"Save Layer\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faLayerGroup} />\r\n                                            </Button>\r\n                                            {/* <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}} \r\n                                            onClick={HandleSave} title= \"Download File\">\r\n                                            \r\n\r\n                                            <FontAwesomeIcon icon={faFileDownload} />\r\n\r\n\r\n                                            </Button> */}\r\n                                           \r\n                    \r\n                                            <Button className = \"btn\"  \r\n                                            style={{backgroundColor:\"none\"}}  onClick={()=>{\r\n                                                if(widthh === null)\r\n                                                {\r\n                                                    alert(\"Please Enter Width and Length First\")\r\n                                                }\r\n                                                else{\r\n                                                const canv = document.getElementById(\"canvas\");\r\n                                                const ctx = canv.getContext('2d')\r\n                                                ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                                                setElements([]);\r\n                                                setMyVar([]);\r\n                                                item = 0;\r\n                                                totalLayer = 0;\r\n                                                }}} \r\n                                                title = \"Clear All\">\r\n                                                \r\n                                                <FontAwesomeIcon icon={faTrashAlt}/>\r\n                                            </Button>\r\n                    \r\n                                            \r\n                                        </ButtonGroup>\r\n\r\n                                    </div>\r\n                                    </div>\r\n                                    </div>\r\n)}\r\n\r\n\r\n    <div className=\"row\">\r\n\r\n    <div class=\"col-md-4\" style ={{padding:\"2em\"}}>\r\n    \r\n\r\n        {selectedElement === null ? (\r\n\r\n            <div>\r\n                <InputLabel htmlFor=\"input-with-icon-adornment\">Current selected element is : </InputLabel>\r\n                    <Input\r\n                        value  = \"No element is selected\"\r\n                        readOnly\r\n                        startAdornment={\r\n                        <InputAdornment position=\"start\">\r\n                        </InputAdornment>\r\n                        }\r\n                        />\r\n            </div>\r\n    ) : \r\n\r\n    <div>\r\n        <InputLabel htmlFor=\"input-with-icon-adornment\">Current selected element is : </InputLabel>\r\n\r\n        <Input\r\n\r\n            value  =  {selectedElement.type === \"rectangle\" ? (\r\n                \"Room\"            \r\n                ) : \r\n            selectedElement.type === \"line\" ? (\r\n                \"Wall\"\r\n                ) : \r\n            selectedElement.type === \"ellipse\" ? (\r\n                \"Ellipse Shape Room\"\r\n                ) :\r\n            selectedElement.type === \"arcL\" ? (\r\n                \"Door Left\"\r\n                ) : \r\n            selectedElement.type === \"arcR\" ? (\r\n                \"Door Right\"\r\n                ) : \r\n            selectedElement.type === \"circle\" ? (\r\n                \"Circular Room\"\r\n                ) : (\"\")\r\n\r\n            }  \r\n            \r\n            readOnly\r\n            startAdornment={\r\n                <InputAdornment position=\"start\">\r\n\r\n                </InputAdornment>\r\n                }\r\n        />\r\n    </div>\r\n\r\n}\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Your current Width is : </InputLabel>\r\n    <Input\r\n        value  = {canvWidth / 15.36 } \r\n        type=\"number\"\r\n        step=\".01\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n\r\n<InputLabel htmlFor=\"input-with-icon-adornment\">Your current Length is : </InputLabel>\r\n    <Input\r\n        value  = {canvHeight / 15.36 } \r\n        type=\"number\"\r\n        step=\".01\"\r\n        readOnly\r\n        startAdornment={\r\n            <InputAdornment position=\"start\">\r\n\r\n            </InputAdornment>\r\n        }\r\n    />\r\n\r\n\r\n<div>\r\n    <InputLabel htmlFor=\"input-with-icon-adornment\">Element current Width is : </InputLabel>\r\n        <Input\r\n            value  = {  Math.abs(ElementWidth)   / 15.36 } \r\n            type=\"number\"\r\n            step=\".01\"\r\n            readOnly\r\n            startAdornment={\r\n            <InputAdornment position=\"start\">\r\n\r\n            </InputAdornment>\r\n            }\r\n        />\r\n</div>\r\n\r\n\r\n\r\n<div>\r\n    <InputLabel htmlFor=\"input-with-icon-adornment\">Element current Length is : </InputLabel>\r\n        <Input\r\n            value  = {\r\n                (   Math.abs(ElementLength)   )   /   15.36 }\r\n                type=\"number\"\r\n                step=\".01\"\r\n                readOnly\r\n                startAdornment={\r\n                <InputAdornment position=\"start\">\r\n\r\n                </InputAdornment>\r\n                }\r\n        />\r\n</div>\r\n\r\n<div>\r\n    <InputLabel htmlFor=\"input-with-icon-adornment\">Element's Wall current width is : </InputLabel>\r\n        <Input\r\n            value  = {\r\n                (   Math.abs(ElementStrokeWidth)   )   }\r\n                type=\"number\"\r\n                step=\".01\"\r\n                readOnly\r\n                startAdornment={\r\n                <InputAdornment position=\"start\">\r\n\r\n                </InputAdornment>\r\n                }\r\n        />\r\n</div>\r\n\r\n<br/>\r\n\r\n{sketchData && id ? (\r\n\r\n<div>\r\n                                            <button class=\"glow-on-hover\" type=\"button\"\r\n                                             onClick={()=> {\r\n                                               \r\n                                                saveLayer();\r\n\r\n                                                \r\n                                               if(id){\r\n                                               UserServices.update(id , myVar ,widthh , heightt, totalLayer , UserServices.getLoggedinfo().id)\r\n                                               .then((data) => {\r\n                                                   console.log(data);\r\n                                                   toast.success(data, {\r\n                                                       position: \"bottom-right\",\r\n                                                       autoClose: 5000,\r\n                                                       hideProgressBar: false,\r\n                                                       closeOnClick: true,\r\n                                                       pauseOnHover: true,\r\n                                                       draggable: true,\r\n                                                       progress: undefined,\r\n                                                   });\r\n                                               })\r\n                                               .catch((err) => {\r\n                                                   toast.error(err.response.data, {\r\n                                                       position: \"bottom-right\",\r\n                                                       autoClose: 5000,\r\n                                                       hideProgressBar: false,\r\n                                                       closeOnClick: true,\r\n                                                       pauseOnHover: true,\r\n                                                       draggable: true,\r\n                                                       progress: undefined,\r\n                                                   });\r\n                                               });\r\n                                           }\r\n                                            }}>\r\n                                                UPDATE</button>\r\n                                        </div>\r\n) :  \r\n\r\n(\"\")\r\n\r\n}\r\n\r\n\r\n{error ? (\r\n\r\n<div>\r\n   <h3>Values must be valid</h3>\r\n\r\n</div>\r\n) :  \r\n\r\n(\"\")\r\n\r\n}\r\n\r\n{/* <Button onClick={()=>setState2({ ...state2, [\"right\"]: true })}>Open</Button> */}\r\n\r\n\r\n{loading ? (\r\n\r\n<div className=\"container\">\r\n  \r\n   <Spin style={{width:'100%' , marginTop: '20%' , marginBottom:'20%'}} />\r\n\r\n</div>\r\n) :  \r\n\r\n(\"\")\r\n\r\n}        \r\n</div>\r\n\r\n\r\n\r\n\r\n                                \r\n                            <div className = \"col-md-8\">\r\n\r\n                                <div\r\n                                    >\r\n                                        \r\n                                        <canvas\r\n                                            style = {{\r\n                                                background:bgColor , \r\n                                                border : \"5px solid darkslategrey\" , \r\n                                                marginTop : \"3%\" , marginBottom : \"3%\" ,  touchAction: 'auto'}}\r\n                    \r\n                                            width = {canvWidth}\r\n                                            height = {canvHeight}\r\n                                            id = \"canvas\"\r\n                                            onMouseDown={handleMouseDown}\r\n                                            onMouseUp={handleMouseUp}\r\n                                            onMouseMove={handleMouseMove}\r\n\r\n                                            onTouchStart={handleMouseDown}\r\n                                            onTouchEnd={handleMouseUp}\r\n                                            onTouchMove={handleMouseMove}\r\n\r\n                                            >\r\n                                            Canvas\r\n                                        </canvas>\r\n\r\n\r\n                                        <canvas\r\n                                        hidden\r\n                                            style = {{\r\n                                                background:bgColor , \r\n                                                border : \"5px solid darkslategrey\" , \r\n                                                marginTop : \"3%\" , marginBottom : \"3%\"}}\r\n                    \r\n                                            width = {canvWidth}\r\n                                            height = {canvHeight}\r\n                                            id = \"canvas2\"\r\n\r\n                                            >\r\n                                            Canvas\r\n                                        </canvas>\r\n                \r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                            </div>\r\n                            \r\n                    );\r\n            }\r\n\r\nexport default App;\r\n","E:\\aoo-ghr-bnain-update\\src\\submitted.js",[],"E:\\aoo-ghr-bnain-update\\src\\helper\\responsive.js",[],"E:\\aoo-ghr-bnain-update\\src\\helper\\nav.js",["534","535","536","537","538","539","540","541","542","543","544","545"],"\r\nimport { useHistory } from 'react-router'\r\nimport '../css/App.css';\r\nimport { Button, withStyles } from \"@material-ui/core\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\n// import Cookie from \"js-cookie\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserServices from \"../services/UserServices\";\r\n// import searchProduct from \"./actions/search\";\r\nimport logo from '../img/logo2.png'\r\n\r\n\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        right: -3,\r\n        top: 13,\r\n\r\n        padding: \"0 4px\",\r\n    },\r\n}))(Badge);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"block\",\r\n        },\r\n    },\r\n\r\n    link: {\r\n        color: \"white\",\r\n        paddingRight: \"1rem\",\r\n\r\n        textDecoration: \"none\",\r\n        marginTop: \".5rem\",\r\n        fontFamily: \"ubuntu\",\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"20ch\",\r\n        },\r\n    },\r\n    sectionDesktop: {\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"flex\",\r\n        },\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    sectionMobile: {\r\n        display: \"flex\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"none\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function TopMenu() {\r\n\r\n    \r\n    const history = useHistory();\r\n\r\n\r\n    const [search, setSearch] = React.useState(\"\");\r\n    // const cart = useSelector((state) => state.cart);\r\n    // const { cartItems } = cart;\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n    // const dispatch = useDispatch();\r\n\r\n    // const searchHandler = () => {\r\n    //     dispatch(searchProduct(search));\r\n    // };\r\n\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n    const handleProfileMenuOpen = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n        handleMobileMenuClose();\r\n    };\r\n\r\n    const handleMobileMenuOpen = (event) => {\r\n        setMobileMoreAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const [anchorE2, setAnchorE2] = React.useState(null);\r\n                    const handleClick = (event) => {\r\n\r\n                        setAnchorE2(event.currentTarget);\r\n\r\n                    };\r\n\r\n                    const handleClose = () => {\r\n                        setAnchorE2(null);\r\n                    };\r\n\r\n    const menuId = \"primary-search-account-menu\";\r\n\r\n    const mobileMenuId = \"primary-search-account-menu-mobile\";\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            <MenuItem>\r\n                {\" \"}\r\n                <Typography variant=\"h6\">\r\n                    <Link to=\"/\" className={classes.link} style={{ color: \"black\" }} >\r\n                        Home\r\n                    </Link>\r\n                </Typography>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <Typography variant=\"h6\">\r\n                    <Link\r\n                        to=\"/sketch\"\r\n                        className={classes.link}\r\n                        style={{ color: \"black\" }}\r\n                      \r\n                        >\r\n                        Sketch App\r\n                    </Link>\r\n                </Typography>\r\n            </MenuItem>\r\n\r\n            <MenuItem>\r\n                {\" \"}\r\n                <Typography variant=\"h6\">\r\n                    <Link\r\n                        to=\"/contact-us\"\r\n                        className={classes.link}\r\n                        style={{ color: \"black\" }}\r\n                        \r\n                        >\r\n                        Contact us\r\n                    </Link>\r\n                </Typography>\r\n            </MenuItem>\r\n\r\n            <MenuItem>\r\n                {\" \"}\r\n                <Typography variant=\"h6\">\r\n                    <Link\r\n                        to=\"/about\"\r\n                        className={classes.link}\r\n                        style={{ color: \"black\" }}\r\n                        \r\n                        >\r\n                        About us\r\n                    </Link>\r\n                </Typography>\r\n            </MenuItem>\r\n\r\n           \r\n\r\n            {UserServices.isLoggedin\r\n                ? UserServices.getLoggedinfo().role === \"admin\" && (\r\n                <MenuItem>\r\n                    <Link to=\"/dashboardA\" className={classes.link}> \r\n                        <Button\r\n                            color=\"secondary\"\r\n                            style={{\r\n                                color: \"black\",\r\n                                backgroundColor: \"#FEBD69\",\r\n                                textDecoration: \"none\",\r\n                                paddingLeft: \"1rem\",\r\n                                paddingRight: \"1rem\",\r\n                            }}\r\n                        >\r\n                            Admin\r\n                        </Button>\r\n                    </Link>\r\n                </MenuItem>\r\n            )\r\n                : \"\"}\r\n\r\n            {!UserServices.isLoggedin ? (\r\n                <>\r\n                    <MenuItem>\r\n                        <Link to=\"/login\" className={classes.link}>\r\n                            <Button\r\n                                color=\"secondary\"\r\n                                style={{\r\n                                    color: \"black\",\r\n                                    backgroundColor: \"#FEBD69\",                                    textDecoration: \"none\",\r\n                                    paddingLeft: \"1rem\",\r\n                                    paddingRight: \"1rem\",\r\n                                }}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        </Link>\r\n                    </MenuItem>\r\n                    <MenuItem>\r\n                        <Link to=\"/signup\" className={classes.link}>\r\n                            <Button\r\n                                color=\"secondary\"\r\n                                style={{\r\n                                    color: \"black\",\r\n                                    backgroundColor: \"#FEBD69\",\r\n                                    textDecoration: \"none\",\r\n                                    paddingLeft: \"1rem\",\r\n                                    paddingRight: \"1rem\",\r\n\r\n                                    marginLeft: \"0.1rem\",\r\n                                }}\r\n                            >\r\n                                Sign up\r\n                            </Button>\r\n                        </Link>\r\n                    </MenuItem>\r\n                </>\r\n            ) : (\r\n                <MenuItem>\r\n                    <Link className={classes.link}>\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            style={{\r\n                                color: \"black\",\r\n                                backgroundColor: \"#FEBD69\",\r\n                                textDecoration: \"none\",\r\n                                paddingLeft: \"1rem\",\r\n                                paddingRight: \"1rem\",\r\n\r\n                                marginLeft: \"0.1rem\",\r\n                            }}\r\n                            onClick={UserServices.logout}\r\n                        >\r\n                            Logout\r\n                        </Button>\r\n                    </Link>\r\n                </MenuItem>\r\n            )}\r\n\r\n{UserServices.isLoggedin && ( \r\n                                <>\r\n                                {/*  */}\r\n                           \r\n                                <Button \r\n                                aria-controls=\"simple-menu\" \r\n                                aria-haspopup=\"true\" \r\n                                onClick={handleClick}>\r\n                                <Typography style = {{color : \"black\"}}> {UserServices.getLoggedinfo().name} <AccountCircle /> </Typography>\r\n                            </Button>\r\n\r\n                                <Menu\r\n                                    id=\"simple-menu\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorE2)}\r\n                                    onClose={handleClose}\r\n                                    >\r\n<Link to='/dashboardB' style={{ textDecoration: 'none' }}>\r\n                                    <MenuItem  \r\n                                        onClick={() => { \r\n                                                        setAnchorE2(null);} }\r\n                                        >\r\n                                        Dashboard\r\n                                    </MenuItem>\r\n                                    </Link>\r\n                                   \r\n\r\n                                    <MenuItem \r\n                                        onClick={UserServices.logout}>\r\n                                        Logout\r\n                                    </MenuItem>\r\n\r\n                                </Menu>\r\n                                </>\r\n                           ) }\r\n\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.grow}>\r\n\r\n            <AppBar\r\n                position=\"static\"\r\n                style={{\r\n                    backgroundColor: \"#232F3E\",\r\n                    textAlign: \"center\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <Toolbar>\r\n                    {/*<Typography className={classes.title} variant=\"h6\" noWrap>*/}\r\n                    {/*    <Link className={classes.link} to=\"/\" style={{ color: \"#FEBD69\" }}>*/}\r\n                    {/*        Expotech*/}\r\n                    {/*    </Link>*/}\r\n                    {/*</Typography>*/}\r\n                    {/*<div className={classes.search}>*/}\r\n                    {/*    <InputBase*/}\r\n                    {/*        placeholder=\"Search the Store\"*/}\r\n                    {/*        classes={{*/}\r\n                    {/*            root: classes.inputRoot,*/}\r\n                    {/*            input: classes.inputInput,*/}\r\n                    {/*        }}*/}\r\n                    {/*        inputProps={{ \"aria-label\": \"search\" }}*/}\r\n                    {/*        onChange={(e) => {*/}\r\n                    {/*            setSearch(e.target.value);*/}\r\n                    {/*        }}*/}\r\n                    {/*    />*/}\r\n                    {/*</div>*/}\r\n                    {/*/!*<Button*!/*/}\r\n                    {/*    style={{*/}\r\n                    {/*        backgroundColor: \"#FEBD69\",*/}\r\n                    {/*        borderRadius: \"0rem .5rem .5rem 0rem\",*/}\r\n                    {/*        padding: \".3rem\",*/}\r\n                    {/*        marginLeft: \"-15px\",*/}\r\n                    {/*    }}*/}\r\n                    {/*    onClick={() => {*/}\r\n                    {/*        searchHandler();*/}\r\n                    {/*    }}*/}\r\n                    {/*>*/}\r\n                    {/*    <SearchIcon />*/}\r\n                    {/*</Button>*/}\r\n                    <Link to=\"/\" className={classes.link}>\r\n                    <img src = {logo} width=\"auto\" height = \"5%\" className = \"App-logo\"/>\r\n                    </Link>\r\n                    <div className={classes.grow} />\r\n                    <div className={classes.sectionDesktop}>\r\n                        <Typography variant=\"h6\">\r\n                            <Link to=\"/\" className={classes.link}>\r\n                              Home\r\n                            </Link>\r\n                        </Typography>\r\n                        <Typography variant=\"h6\">\r\n                            <Link to=\"/sketch\" className={classes.link} \r\n                            \r\n                            >\r\n                                Sketch App\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"h6\">\r\n                            <Link to=\"/contact-us\" className={classes.link} \r\n                            \r\n                            >\r\n                                Contact us\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        <Typography variant=\"h6\">\r\n                            <Link to=\"/about\" className={classes.link} \r\n                            \r\n                            >\r\n                                About us\r\n                            </Link>\r\n                        </Typography>\r\n\r\n                        {UserServices.isLoggedin\r\n                            ? \r\n                            UserServices.getLoggedinfo().role === \"admin\" && \r\n                            (\r\n                            <Link to=\"/dashboardA\" className={classes.link}>\r\n                                <Button\r\n                                    color=\"secondary\"\r\n                                    style={{\r\n                                        color: \"black\",\r\n                                        backgroundColor: \"#C0C0C0\",\r\n                                        textDecoration: \"none\",\r\n                                        paddingLeft: \"1rem\",\r\n                                        paddingRight: \"1rem\",\r\n                                    }}\r\n                                >\r\n                                    Admin\r\n                                </Button>\r\n                            </Link>\r\n                        )\r\n                            : \"\"}\r\n\r\n                        {!UserServices.isLoggedin ? (\r\n                            <>\r\n                                <Link to=\"/login\" className={classes.link}>\r\n                                    <Button\r\n                                        color=\"secondary\"\r\n                                        style={{\r\n                                            color: \"black\",\r\n                                            backgroundColor: \"#C0C0C0\",\r\n                                            textDecoration: \"none\",\r\n                                            paddingLeft: \"1rem\",\r\n                                            paddingRight: \"1rem\",\r\n                                        }}\r\n                                    >\r\n                                        Login\r\n                                    </Button>\r\n                                </Link>\r\n\r\n                                <Link to=\"/signup\" className={classes.link}>\r\n                                    <Button\r\n                                        color=\"secondary\"\r\n                                        style={{\r\n                                            color: \"black\",\r\n                                            backgroundColor: \"#C0C0C0\",\r\n                                            textDecoration: \"none\",\r\n                                            paddingLeft: \"1rem\",\r\n                                            paddingRight: \"1rem\",\r\n\r\n                                            marginLeft: \"0.1rem\",\r\n                                        }}\r\n                                    >\r\n                                        Subscribe\r\n                                    </Button>\r\n                                </Link>\r\n                            </>\r\n                        ) : (\r\n                            <Link className={classes.link}>\r\n                                <Button\r\n                                    color=\"secondary\"\r\n                                    style={{\r\n                                        color: \"black\",\r\n                                        backgroundColor: \"#C0C0C0\",\r\n                                        textDecoration: \"none\",\r\n                                        paddingLeft: \"1rem\",\r\n                                        paddingRight: \"1rem\",\r\n                                        marginLeft: \"0.1rem\",\r\n\r\n                                    }}\r\n                                    onClick={UserServices.logout}\r\n                                    \r\n                                >\r\n                                    Logout\r\n                                </Button>\r\n                            </Link>\r\n                        )}\r\n\r\n                        {/* <IconButton\r\n                            aria-label=\"cart\"\r\n                            color=\"inherit\"\r\n                            onClick={() => {\r\n                                window.location.href = \"/cart/\";\r\n                            }}\r\n                        >\r\n                            <StyledBadge\r\n                                badgeContent={cartItems.reduce((a, c) => a + Number(c.qty), 0)}\r\n                                color=\"secondary\"\r\n                            >\r\n                                <ShoppingCartIcon />\r\n                            </StyledBadge>\r\n                        </IconButton> */}\r\n\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            {UserServices.isLoggedin && ( \r\n                                <>\r\n                                {/*  */}\r\n                           \r\n                                <Button \r\n                                aria-controls=\"simple-menu\" \r\n                                aria-haspopup=\"true\" \r\n                                onClick={handleClick}>\r\n                                <Typography> {UserServices.getLoggedinfo().name} <AccountCircle /> </Typography>\r\n                            </Button>\r\n\r\n                                <Menu\r\n                                    id=\"simple-menu\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorE2)}\r\n                                    onClose={handleClose}\r\n                                    >\r\n<Link to='/dashboardB' style={{ textDecoration: 'none' }}>\r\n                                    <MenuItem  \r\n                                        onClick={() => { \r\n                                                        setAnchorE2(null);} }\r\n                                        >\r\n                                        Dashboard\r\n                                    </MenuItem>\r\n                                    </Link>\r\n                                    \r\n\r\n                                    <MenuItem \r\n                                        onClick={UserServices.logout}>\r\n                                        Logout\r\n                                    </MenuItem>\r\n\r\n                                </Menu>\r\n                                </>\r\n                           ) }\r\n\r\n                             \r\n                        </IconButton> \r\n                    </div>\r\n\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu} \r\n        </div>\r\n\r\n    );\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\auth\\addByAdmin.js",["546","547","548","549","550","551"],"E:\\aoo-ghr-bnain-update\\src\\admin\\Dashboard.js",["552","553","554","555","556","557","558","559","560","561","562"],"import UserServices from \"../services/UserServices\";\r\nimport welcome from \"../img/welcome.jpg\"\r\nimport add from \"../img/add_user.png\"\r\nimport change from \"../img/change.jpg\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport notAllowed from \"../img/not_allowed.jpg\"\r\nimport onlyAdmins from \"../img/only_admins.jpg\"\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { toast } from \"react-toastify\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n  });\r\nexport default function Dashboard() {\r\n\r\n    const classes = useStyles();\r\n    \r\n    const [sub, setSub] = React.useState(\"\");\r\n\r\n    return (\r\n        <>\r\n         {UserServices.isLoggedin\r\n                            ? UserServices.getLoggedinfo().role === \"admin\" && (\r\n                            \r\n                                <div className=\"container\" style={{marginTop:\"10%\" , marginBottom:\"10%\"}}>\r\n\r\n<div className=\"row\">\r\n    {/* <div className=\"col-md-6\">\r\n<Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt=\"Change Subscription Charges\"\r\n          height=\"140\"\r\n          image={change}\r\n          title=\"Change Subscription Charges\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          Change Subscription Charges\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            The Admins can change Subscription Charges on their own will\r\n\r\n            <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"sub\"\r\n            label=\"Subscription Charges\"\r\n            name=\"sub\"\r\n            autoComplete=\"sub\"\r\n            autoFocus\r\n            value={sub}\r\n            onChange={(e) => {\r\n              setSub(e.target.value);\r\n            }}\r\n            onKeyPress={event => {\r\n              if (event.key === 'Enter') {\r\n            document.getElementById('change').click();\r\n              }\r\n          }}\r\n          />\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        \r\n        <Button size=\"small\" color=\"primary\"  id = \"change\"\r\n            \r\n            onClick={(e) => {\r\n\r\n                // console.log({userName}, {password})\r\n                UserServices.change( sub , UserServices.getLoggedinfo().role)\r\n                  .then((data) => {\r\n                    console.log(data);\r\n                    toast.success(data, {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                      });\r\n                    \r\n                  })\r\n                  .catch((err) => {\r\n                    toast.error(err.response.data, {\r\n                      position: \"bottom-right\",\r\n                      autoClose: 5000,\r\n                      hideProgressBar: false,\r\n                      closeOnClick: true,\r\n                      pauseOnHover: true,\r\n                      draggable: true,\r\n                      progress: undefined,\r\n                    });\r\n                  });\r\n              }}>\r\n       Change Subscription Charges\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n</div> */}\r\n<div className=\"col-md-12\">\r\n\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt=\"Add User\"\r\n          height=\"160\"\r\n          image={add}\r\n          title=\"Add user\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          Add User\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            The Admins can add user without subsciption charges\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        \r\n      <Link to=\"/addByAdmin\" style={{textDecoration: 'none' }} >\r\n        <Button size=\"small\" color=\"primary\">\r\n       Add User\r\n        </Button>\r\n        </Link>\r\n                 \r\n                         \r\n      </CardActions>\r\n    </Card>\r\n    </div>\r\n</div>\r\n                            </div>\r\n                            \r\n                        )\r\n                            : \" \"}\r\n                            {UserServices.isLoggedin ? UserServices.getLoggedinfo().role === \"user\" && (\r\n                               \r\n                               <div className=\"container\">\r\n                               <h1>Only Admins</h1>\r\n                                <img src={onlyAdmins} width=\"100%\" height = \"auto\" style ={{marginBottom : '10%'}}/>\r\n                                </div>\r\n                            ) : (\r\n                            <div className=\"container\"> \r\n                            <h1>Please login first</h1>\r\n                            <img src={notAllowed} width=\"100%\" height = \"auto\" style = {{ marginBottom : '10%'}}/>\r\n                            </div>\r\n                            )}\r\n        </>\r\n    )\r\n}","E:\\aoo-ghr-bnain-update\\src\\services\\payment.js",["563","564"],"E:\\aoo-ghr-bnain-update\\src\\users\\userDashboard.js",["565","566","567","568","569","570","571","572","573","574","575","576","577"],"import UserServices from \"../services/UserServices\";\r\nimport welcome from \"../img/welcome.jpg\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport notAllowed from \"../img/not_allowed.jpg\"\r\nimport mySketch from \"../img/mySketch.jpg\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PasswordStrengthBar from 'react-password-strength-bar';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n// import AnimatedButton from '../animatedButton/ButtonHover';\r\nimport {widthh , setWidthh} from '../sketch'\r\nimport {heightt , setHeightt} from '../sketch'\r\nimport setMyVar from '../sketch'\r\nimport totalLayer from '../sketch'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: \"100%\", // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n  let sketchData , setSketchData;\r\n\r\n  export {sketchData, setSketchData};\r\n \r\n\r\nexport default function Welcome(){\r\n\r\n    const classes = useStyles();\r\n\r\n    const [password, setPassword] = React.useState(\"\");\r\n\r\n    const [myData, setMyData] = React.useState([]);\r\n\r\n    [sketchData , setSketchData] = React.useState([]);\r\n\r\n    return(\r\n    \r\n        <>\r\n        \r\n        {UserServices.isLoggedin\r\n                            ? UserServices.getLoggedinfo().added_By === \"admin\" && (\r\n                            \r\n\r\n<Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Change Password\r\n        </Typography>\r\n        <p style={{color : 'blue'}}>\r\n          As you were registered by admin, please change your password\r\n        </p>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={(e) => {\r\n                  setPassword(e.target.value);\r\n\r\n                  \r\n                }}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                document.getElementById('save').click();\r\n                  }\r\n              }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n                  <br></br>\r\n          <PasswordStrengthBar password={password} />\r\n\r\n          <Button\r\n          id = \"save\"\r\n            fullWidth\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              UserServices.updatePass(UserServices.getLoggedinfo().email , password , \"user\")\r\n                .then((data) => {\r\n                  console.log(data);\r\n                  toast.success(data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                  window.location.href = \"/login\";\r\n                })\r\n                .catch((err) => {\r\n                  toast.error(err.response.data, {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                  });\r\n                });\r\n            }}\r\n          >\r\nChange Password          </Button>\r\n          \r\n        </form>\r\n      </div>\r\n      \r\n    </Container>\r\n                            \r\n                        ) : (\"\")}\r\n                        \r\n                            {UserServices.isLoggedin ? UserServices.getLoggedinfo().added_By === \"user\" && (\r\n\r\n                            <div className=\"container\" style = {{margin : \"5%\"}}> \r\n                            <div className=\"row\">\r\n                              <div className=\"col-xs-12\">\r\n\r\n                              <button class=\"glow-on-hover\" type=\"button\"\r\n                              id = \"getData\"\r\n                              label = \"Get Data\"\r\n                               onClick={(e) => {\r\n                                        UserServices.getSketch(UserServices.getLoggedinfo().id)\r\n                                        .then((data) => {\r\n                                          \r\n                                        \r\n                                          setMyData(data);\r\n\r\n                                          \r\n                                        toast.success(\"Your Data is being Loaded\", { \r\n                                        position: \"bottom-right\",\r\n                                        autoClose: 5000,\r\n                                        hideProgressBar: false,\r\n                                        closeOnClick: true,\r\n                                        pauseOnHover: true,\r\n                                       draggable: true,\r\n                                       progress: undefined,\r\n                                        });\r\n                                     })\r\n                                      .catch((err) => {\r\n                                     toast.error(err.response.data, {\r\n                                     position: \"bottom-right\",\r\n                                     autoClose: 5000,\r\n                                     hideProgressBar: false,\r\n                                      closeOnClick: true,\r\n                                        pauseOnHover: true,\r\n                                        draggable: true,\r\n                                        progress: undefined,\r\n                                                        });\r\n                                                    });\r\n                                                }} >Get Data</button>\r\n\r\n                                              \r\n                                </div>\r\n\r\n                                </div>\r\n                                <div className=\"row\" style={{margin : '3%'}}>\r\n      { myData.map ( data =>\r\n<>\r\n\r\n\r\n      <Card className={classes.root} style = {{marginTop : \"4%\"}}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={mySketch}\r\n          title=\"Contemplative Reptile\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{textTransform: \"uppercase\"}}>\r\n          {data.name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n           Select Appropriate option for your Sketch\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n      <Button size=\"small\" color=\"primary\" \r\n          \r\n          onClick={()=>{setSketchData(data)\r\n                        alert(\"Now click on edit for view or editing purpose\")}}>\r\n            Ready                                \r\n        </Button>\r\n\r\n        <Button size=\"small\" color=\"primary\" \r\n          \r\n          onClick={()=> {\r\n            \r\n            if(sketchData.id === undefined){\r\n              alert(\"It is recommended to click on ready first\")\r\n            }\r\n          else(\r\n            alert(\"Redirecting ...\")\r\n            \r\n          )}}\r\n                    >\r\n          \r\n          <Link to=\"/sketch\" style={{textDecoration: 'none' }} >                     \r\n            Edit                                \r\n               </Link>\r\n          \r\n        </Button>\r\n        <Button size=\"small\" color=\"primary\"\r\n        \r\n        onClick={(e) => {\r\n          var answer = window.confirm(\"Are you sure, You want to delete this sketch? \");\r\n          if (!answer) {\r\n            // Save it!\r\n            console.log('Thing was saved to the database.');\r\n          } else {\r\n            // Do nothing!\r\n            console.log('Thing was not saved to the database.');\r\n          \r\n          UserServices.delSketch(data.id)\r\n          .then((res) => {\r\n            \r\n          toast.success(\"Successfully Deleted\", { \r\n          position: \"bottom-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n         draggable: true,\r\n         progress: undefined,\r\n          });\r\n       })\r\n        .catch((err) => {\r\n       toast.error(err.response.data, {\r\n       position: \"bottom-right\",\r\n       autoClose: 5000,\r\n       hideProgressBar: false,\r\n        closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n                          });\r\n                      });\r\n                  }}}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n\r\n\r\n   </> )}\r\n          </div>\r\n        </div>\r\n                            ): (\r\n                            <div className=\"container\"> \r\n                            <h1>Please Login first</h1> \r\n                            <img src={notAllowed} width=\"100%\" height = \"auto\" style = {{ marginBottom : '10%'}}/>\r\n                            </div>)}\r\n        </>\r\n    );\r\n    \r\n    }\r\n    \r\n","E:\\aoo-ghr-bnain-update\\src\\helper\\footer.jsx",["578","579","580","581","582","583","584"],"import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\r\n// import AnimatedButton from '../animatedButton/ButtonHover';\r\nimport '../css/footer.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery/dist/jquery.min.js'\r\nimport 'bootstrap/dist/js/bootstrap.min.js'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faFacebook } from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faInstagram } from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faMap } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ScrollToTop from \"react-scroll-up\"\r\n\r\n\r\nfunction Copyright() {\r\n    return (\r\n      <Typography variant=\"body2\" color=\"inherit\" align=\"center\">\r\n        {\"Copyright © \"}\r\n        <Link color=\"inherit\" to=\"https://uol.edu.pk/\">\r\n        Aoo Ghr Bnain (Built by Students of UOL)\r\n        </Link>{\" \"}\r\n        {new Date().getFullYear()}\r\n        {\".\"}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\nfunction Footer (){\r\n\r\n\r\n    return(\r\n\r\n\r\n<footer id=\"dk-footer\" class=\"dk-footer\">\r\n\r\n{/* <script crossorigin src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> */}\r\n\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n\r\n                <div class=\"col-md-12 col-lg-4\" style={{marginTop : \"15%\"}}>\r\n                    <div class=\"dk-footer-box-info\">\r\n                    <Link to=\"/\" style={{textDecoration: 'none' }} >\r\n                            <img src=\"https://cdn.pixabay.com/photo/2016/11/07/13/04/yoga-1805784_960_720.png\" alt=\"footer_logo\" class=\"img-fluid\"/>\r\n                        </Link>\r\n                        <p class=\"footer-info-text\">\r\n                        We are here for you 24/7 , 24 hours and 7 days a week.\r\n                        We will be glad to know from you about our product.\r\n                        Simply give us your feed back. \r\n                        </p>\r\n                        <div class=\"footer-social-link\">\r\n                            <h3 style={{textDecoration : 'underline'}}>Connect</h3>\r\n                            <ul>\r\n                                <li>\r\n                                    <a>\r\n                                        <FontAwesomeIcon icon={faFacebook} style={{fontSize:24 , margin : 10 , color: '#3B5998'}}\r\n                                        onClick={() =>    window.location.href = 'https://www.facebook.com/University.Lahore/'\r\n                                    }/>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a>\r\n                                    <FontAwesomeIcon icon={faTwitter} style={{fontSize:24, margin : 10 , color: '#55ACEE'}}\r\n                                    onClick={() =>    window.location.href = 'https://twitter.com/ULahore?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor'\r\n                                }/>\r\n                                    </a>\r\n                                </li>\r\n                                \r\n                                <li>\r\n                                    <a>\r\n                                    <FontAwesomeIcon icon={faInstagram} style={{fontSize:24, margin : 10 , color: '#B7242A' }}\r\n                                    onClick={() =>    window.location.href = 'https://www.instagram.com/ulahore/?hl=en'\r\n                                      }/>\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                \r\n                    <div class=\"footer-awarad\">\r\n                        \r\n                        <p>The University of Lahore</p>\r\n                </div>\r\n                </div>\r\n                \r\n                <div class=\"col-md-12 col-lg-8\" style={{marginTop: '10%' }}>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-8\">\r\n                            <div class=\"contact-us\">\r\n                                <div class=\"contact-icon\">\r\n                                    <FontAwesomeIcon icon={faMap} />\r\n                                </div>\r\n                            \r\n                                <div class=\"contact-info\">\r\n                                    <h3>The University of Lahore (Students)</h3>\r\n                                    <p>Defence Road Campus</p>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        \r\n                        </div>\r\n                        \r\n                        {/* <div class=\"col-md-6\">\r\n                            <div class=\"contact-us contact-us-last\">\r\n                                <div class=\"contact-icon\">                                   \r\n                                    <FontAwesomeIcon icon={faEnvelope}/>\r\n                                </div>\r\n                            \r\n                                <div class=\"contact-info\">\r\n                                    <h3>95 711 9 5353</h3>\r\n                                    <p>Give us a call</p>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        \r\n                        </div> */}\r\n                        \r\n                    </div>\r\n                    \r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12 col-lg-6\">\r\n                            <div class=\"footer-widget footer-left-widget\">\r\n                                <div class=\"section-heading\">\r\n                                    <h3>Useful Links</h3>\r\n                                    <span class=\"animate-border border-black\"></span>\r\n                                </div>\r\n                                <ul>\r\n                                    <li>\r\n                                    <Link to=\"/about\" style={{textDecoration: 'none' }} >About us</Link>\r\n                                    </li>\r\n                                    <li>\r\n                                    <Link to=\"/sketch\" style={{textDecoration: 'none' }} >Services</Link>\r\n                                    </li>\r\n                                   \r\n                                </ul>\r\n                                <ul>\r\n                                <li>\r\n                                    <Link to=\"/contact-us\" style={{textDecoration: 'none' }} >Contact Us</Link>\r\n                                    </li>\r\n                                    \r\n                                </ul>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        \r\n                        <div class=\"col-md-12 col-lg-6\">\r\n                            <div class=\"footer-widget\">\r\n                                <div class=\"section-heading\">\r\n                                    <h3>Subscribe</h3>\r\n                                    <span class=\"animate-border border-black\"></span>\r\n                                </div>\r\n                                <p>\r\n                                We are offering features which will be valuable to you. Please subscribe to enjoy them.</p>\r\n                                \r\n                                    <div class=\"form-row\">\r\n                                        <div class=\"col dk-footer-form\">\r\n                                            <Link to=\"/signup\" style={{textDecoration: 'none' }} >\r\n                                                {/* <Button style={{ marginTop: '20%' , align : 'center' }} label =    \"Subscribe\"/> */}\r\n                                                    <button class=\"glow-on-hover\" type=\"button\">Subscribe</button>\r\n                                                    </Link>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        \r\n\r\n\r\n        <div class=\"copyright\">\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-6\">\r\n                        <span><Copyright /></span>\r\n                    </div>\r\n                    \r\n                    <div class=\"col-md-6\">\r\n                        <div class=\"copyright-menu\">\r\n                            <ul>\r\n                                <li>\r\n                                <Link to=\"/\" style={{textDecoration: 'none' }} >Home</Link>\r\n                                </li>          \r\n                                <li>\r\n                                <Link to=\"/contact-us\" style={{textDecoration: 'none' }} >Contact</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n        \r\n        </div>\r\n\r\n        <ScrollToTop showUnder={200}>\r\n                \r\n        <div id=\"back-to-top\" class=\"back-to-top\">\r\n            <button class=\"btn btn-dark\" title=\"Back to Top\" style={{display: 'block'}}\r\n                  onClick={() =>    window.scroll({\r\n                    top: 0, \r\n                    left: 0, \r\n                    behavior: 'smooth'\r\n                  })\r\n                  }>\r\n                <FontAwesomeIcon icon={faAngleUp} />\r\n            </button>\r\n        </div>\r\n\r\n        </ScrollToTop>\r\n        \r\n</footer>\r\n\r\n\r\n\r\n)\r\n}\r\n\r\nexport default Footer;\r\n","E:\\aoo-ghr-bnain-update\\src\\services\\UserServices.js",[],"E:\\aoo-ghr-bnain-update\\src\\components\\PaymentForm.js",["585"],"import React from \"react\";\r\nimport {CardElement , useElements , useStripe } from \"@stripe/react-stripe-js\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {ids , setId} from \"../auth/signup\"\r\n\r\n\r\nconst CARD_OPTIONS = {\r\n    iconStyle: \"solid\",\r\n    style: {\r\n      base: {\r\n        iconColor: \"#c4f0ff\",\r\n        color: \"#fff\",\r\n        fontWeight: 500,\r\n        fontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\r\n        fontSize: \"16px\",\r\n        fontSmoothing: \"antialiased\",\r\n        \":-webkit-autofill\" : {color : \"#fce883\"},\r\n        \"::placeholder\" : {color : \"#87bbfd\"}\r\n  \r\n       },\r\n       invalid: {\r\n         iconColor: \"#ffc7ee\",\r\n         color: \"#ffc7ee\"\r\n       }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  export default function PaymentForm(){\r\n    const [success , setSuccess] = React.useState(false);\r\n    \r\n\r\n    const stripe = useStripe();\r\n    const element = useElements();\r\n\r\n    const handleSubmit  = async (e) =>{\r\n        e.preventDefault();\r\n        const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n            type: \"card\",\r\n            card: element.getElement(CardElement)\r\n          })\r\n          \r\n        \r\n        \r\n      if(!error) {\r\n        try{\r\n          const {id} = paymentMethod\r\n          setId(id);\r\n           console.log(id)\r\n           console.log(ids)\r\n\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n      }\r\n    }\r\n        \r\nreturn (\r\n    <>\r\n    {!success ?\r\n    <form onSubmit={handleSubmit}>\r\n        <fieldset className=\"FormGroup\">\r\n    <div className=\"FormRow\">\r\n      <CardElement options={CARD_OPTIONS}/>\r\n\r\n    </div>\r\n\r\n</fieldset>\r\n\r\n<Button onClick={handleSubmit}>PAY</Button>\r\n</form> \r\n : \r\n\r\n    <div>\r\n        <>Subscribed</>\r\n        </div>} \r\n    </>\r\n)\r\n\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\services\\GenericServices.js",[],"E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\isWithinElement.js",[],"E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleSave.js",["586","587","588","589","590","591","592","593","594"],"import {saveAs} from 'file-saver';\r\nimport {saveLayer} from '../sketch';\r\nimport {myVar} from '../sketch'\r\nimport { jsPDF } from \"jspdf\";\r\nimport {marla , totalLayer} from \"../sketch\"\r\n\r\nimport {canvWidth , canvHeight} from \"../sketch\"\r\n\r\nimport rough from 'roughjs/bundled/rough.esm';\r\nimport 'jspdf-autotable'\r\nimport foundation from \"../img/1.jpg\";\r\n\r\n\r\n\r\nexport function HandleSave() {\r\n\r\n    saveLayer();\r\n\r\n    const canvas = document.getElementById(\"canvas\");\r\n    const context = canvas.getContext('2d');\r\n\r\n    const canvas2 = document.getElementById(\"canvas2\");\r\n    const ctx  = canvas2.getContext('2d');\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"bold 16px Arial\";\r\n    ctx.fillText(\"Aoo Ghr Bnain\" , (canvas2.width / 2) - 17, (canvas2.height / 2) + 8);\r\n\r\n    // canvas.toBlob(function (blob) {\r\n    //     saveAs(blob, \"pretty image.png\")\r\n\r\n    // });\r\n\r\n    console.log(myVar.length)\r\n\r\n    \r\n    var doc = new jsPDF('l', 'mm', [420, 297]);\r\n\r\n    var title = prompt(\"House Plot No.\").toString()\r\n    var title1 = prompt(\"Khasr No.\").toString()\r\n    var title2 = prompt(\"Khewat No.\").toString()\r\n    var title3 = prompt(\"Khatoni No.\").toString()\r\n    var title4 = prompt(\"Town\").toString()\r\n    var title5 = prompt(\"Address\").toString()\r\n    var title6 = prompt(\"Owner\").toString()\r\n    var title7 = prompt(\"S/O or D/O or W/O\").toString()\r\n    \r\n    var north = prompt(\"North... Only Enter U for upper, L for lower, R for right, Le for left\").toString()\r\n    \r\n    var title8 = \"Scale : 1\\\" = 15.32 ... This is computer generated Scale. Don't worry about it.\"\r\n    \r\n    doc.setFont(\"san-serif\", 'bold')\r\n    doc.setFont(\"san-serif\", 'underline')\r\n\r\n    doc.text(\"PROPOSED PLAN OF HOUSE PLOT NO. \" + title+ \"\\n\" +\"KHASR NO. \"+ title1+ \"\\n\" +\"KHEWAT NO. \"+ title2 + \"        KHATONI NO. \" +title3+ \"\\n\" + title4+ \"\\n\" + title5 + \"\\n\" + title6+ \"\\n\" +\"S/O OR D/O OR W/O \"+ title7+ \"\\n\" + title8+ \"\\n\" , 10, 10);\r\n    \r\n    if(north == \"U\"){\r\n        doc.setFont(\"san-serif\", 'bold','25')\r\n        doc.text(\" ^ North is Up ^ \",50, 70)\r\n\r\n    }\r\n    else if(north == \"L\"){\r\n        doc.setFont(\"san-serif\", 'bold','25')\r\n        doc.text(\" __ North is Down __ \",50, 70)\r\n    }\r\n    else if(north == \"R\"){\r\n        doc.setFont(\"san-serif\", 'bold','25')\r\n        doc.text(\"North is Right  -->\",50, 70)\r\n    }\r\n    else if(north == \"Le\"){\r\n        doc.setFont(\"san-serif\", 'bold','25')\r\n        doc.text(\"<-- North is Left\" ,50, 70)\r\n    }\r\n    \r\n   \r\n    \r\n    let estimatess1totall = 0;\r\n    let estimatess2totall = 0;\r\n\r\n    \r\n\r\n            for(var k = 0; k < myVar.length; k++) {\r\n\r\n                var Data = myVar[k];\r\n\r\n                // for(var m = 0; m < Data.length; m++) {\r\n\r\n                    // ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                    ctx.beginPath();\r\n                    ctx.rect(0, 0, canvas2.width, canvas2.height);\r\n                    ctx.stroke();\r\n                \r\n                    const roughCanvas2 = rough.canvas(canvas2);\r\n                    Data.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\r\n\r\n                    var imgData =  canvas2.toDataURL(\r\n                        'image/png');      \r\n                        \r\n                        canvas2.toBlob(function (blob) {\r\n                            saveAs(blob, \"pretty image.png\")\r\n    \r\n                        });\r\n                    \r\n                    doc.addImage(imgData, 'PNG', 10, 80);\r\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                    doc.addPage();\r\n\r\n                    for(var m = 0; m < Data.length; m++) {\r\n\r\n                    estimatess1totall = estimatess1totall + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\r\n                    estimatess2totall = estimatess2totall + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            var myWid = (canvWidth / 15.36).toString();\r\n\r\n            var myHt = (canvHeight / 15.36).toString();\r\n            \r\n\r\n            // const roughCanvas2 = rough.canvas(canvas2);\r\n            // elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\r\n\r\n            // var imgData =  canvas2.toDataURL(\r\n            //     'image/png');          \r\n            \r\n            // doc.addImage(imgData, 'PNG', 10, 10);\r\n\r\n            \r\n\r\n            var covered = estimatess2totall * estimatess1totall\r\n            var floor = totalLayer + 1;\r\n            var total = parseInt(myWid) * parseInt(myHt) * floor\r\n\r\n            console.log(total)\r\n\r\n            doc.text(\"Area Detail (As you have created \" + floor + \" Floors. The total area will be calculated as ...)\", 10, 10)\r\n\r\n            if(total - covered < 0){\r\n              var body = [[\"You\" , \"Have Created\" , \"Maximum\"]]\r\n            }\r\n            else{\r\n\r\n            var body = [[covered , total - covered , total]]\r\n            }\r\n            doc.autoTable({\r\n              margin : {\r\n                right : 200\r\n           }\t,\r\n              head: [['Covered Area Feet', 'Open Feet', 'Total Feet']],\r\n              body: \r\n                body  ,\r\n            \r\n            })\r\n            doc.text(\"Land : \", 250, 50)\r\n\r\n            var myMarla = marla.toString()\r\n            \r\n            // console.log(myMarla)\r\n\r\n            // myWid.toString();\r\n            // myHt.toString();\r\n\r\n            doc.text(myMarla + \"  Marla \" + myWid + \" * \" + myHt + \" Feet \", 270, 50)\r\n\r\n          //   doc.autoTable({\r\n\r\n             \r\n\r\n          //     margin : {\r\n          //       right : 100\r\n          //  }\t,\r\n              \r\n          //     body: [\r\n          //       ['Floor', '10', 'Sweden'],\r\n          //       ['Castille', '10', 'Spain'],\r\n                \r\n          //     ],\r\n          //   })\r\n\r\n\r\n            doc.text(\"Foundation\", 230, 210)\r\n\r\n            doc.addImage(foundation, 'JPEG', 230, 220, 150, 76);\r\n            \r\n            doc.save('sample-file.pdf');\r\n\r\n\r\n            // doc.text(\"Hello world!\", 10, 10);\r\n            // doc.save(\"a4.pdf\");\r\n\r\n    alert(\"File Save Successfully\");\r\n    // //\r\n    //\r\n    // const writeJsonFile = require('write-json-file');\r\n    // const jsonFile = \"/tmp/exampleFile.json\";\r\n    // writeJsonFile(jsonFile,{canvas:true}).catch(err => console.log(err));\r\n    //\r\n\r\n\r\n\r\n\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\toggleDrawer.js",[],"E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleMouseUp.js",[],"E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleMouseMove.js",["595","596","597","598","599","600"],"import {action, \r\n        setAction ,\r\n        elements, \r\n        getElementAtPosition, \r\n        mouse, \r\n        selectedElement, \r\n        tool,\r\n        setElementWidth , \r\n        setElementLength ,\r\n        wall,\r\n        setElementStrokeWidth } from \"../sketch\";\r\nimport {updateElement} from \"./updateElement\";\r\n\r\nexport const handleMouseMove = (event) => {\r\n    // const {clientX, clientY} = event;\r\n\r\n    let bounds = event.target.getBoundingClientRect();\r\n    mouse.x = event.pageX - bounds.left - window.scrollX;  // is window.scrollX same for Y\r\n    mouse.y = event.pageY - bounds.top - window.scrollY;\r\n\r\n    if(tool === \"selection\")\r\n    {\r\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\r\n            ? \"move\" : \"default\";\r\n    }\r\n\r\n    if(tool === \"text\")\r\n    {\r\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\r\n            ? \"text\" : \"default\";\r\n    }\r\n\r\n    if(tool === \"eraser\")\r\n    {\r\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\r\n            ? \"move\" : \"default\";\r\n    }\r\n    if(tool === \"resize\")\r\n    {\r\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\r\n            ? \"resize\" : \"default\";\r\n    }\r\n    // if(tool === \"rectangle\" || tool ===\"circle\" || tool ===\"wall\" || tool ===\"arcL\" ||\r\n    //     tool ===\"arcR\" || tool ===\"ellipse\"){\r\n    //\r\n    //     event.target.style.cursor = getCvsAtPosition(canvas.getBoundingClientRect().width , canvas.getBoundingClientRect().height, elements)\r\n    //         ? \"crosshair\" : \"default\";\r\n    // }\r\n\r\n    if(action === \"drawing\") {\r\n        const index = elements.length - 1;\r\n        const {x1,y1} = elements[index];\r\n        const sWidth = wall\r\n\r\n\r\n        let x = mouse.x || (event.touches[0].clientX - 8 );\r\n        let y = mouse.y || (event.touches[0].clientY - 385);\r\n\r\n        // alert(event.touches[0].clientX)\r\n\r\n        updateElement(index, x1 , y1 , x, y , tool , sWidth);\r\n\r\n    }\r\n    else if (action === \"moving\")\r\n    {\r\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\r\n        const sWidth = selectedElement.roughElement.options.strokeWidth\r\n        const width = x2-x1;\r\n        const height = y2-y1;\r\n        const posX = mouse.x || (event.touches[0].clientX - 8 )\r\n        const posY = mouse.y || (event.touches[0].clientY - 385)\r\n        const nexX1 = posX - offsetX;\r\n        const nexY1 = posY - offsetY;\r\n\r\n        // type.scale(mouse.x , mouse.y);\r\n\r\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type , sWidth);\r\n        \r\n    }\r\n    else if (action === \"eraser\")\r\n    {\r\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\r\n        const width = x2-x1;\r\n        const height = y2-y1;\r\n        const nexX1 = mouse.x- offsetX;\r\n        const nexY1 = mouse.y - offsetY;\r\n\r\n        // type.scale(mouse.x , mouse.y);\r\n\r\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, null);\r\n    }\r\n\r\n    else if (action === \"resize\")\r\n    {\r\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\r\n        const sWidth = selectedElement.roughElement.options.strokeWidth\r\n        const width = x2-x1;\r\n        const height = y2-y1;\r\n        const nexX1 = mouse.x- offsetX;\r\n        const nexY1 = mouse.y - offsetY;\r\n\r\n        alert(\"Your previous Width was \" + width / 15.36)\r\n\r\n        alert(\"Your previous length was \" + height / 15.36)\r\n        \r\n        alert(\"Please Note that this will be your Internal Dimensions. We will minus walls area automatically. Thanks For your inconvenience !!!\")\r\n\r\n        const newx1 = prompt(\"Your previous x-axis was \" + x1 + \" Enter x-axis \")\r\n        // const newx2 = prompt(\"Your previous width was \" + x2 + \" Enter x2 \")\r\n        let newWidth = prompt(\"Your previous width was \" + width / 15.36 + \"Feet. Enter new Width in feet \")\r\n        newWidth = newWidth * 15.45\r\n        // newWidth = newWidth - newx1\r\n        \r\n        const newy1 = prompt(\"Your previous y-axis was \" + y1 + \" Enter y-axis \")\r\n        // const newy2 = prompt(\"Your previous y2 was \" + y2 + \" Enter y2 \")\r\n        let newHeight = prompt(\"Your previous height was \" + height / 15.36 + \"Feet. Enter new height in feet \")\r\n        newHeight = newHeight * 15.45\r\n        // newHeight = newHeight - newy1\r\n       \r\n        // type.scale(mouse.x , mouse.y);\r\n\r\n        if(newx1 && newWidth && newy1 && newHeight)\r\n        {\r\n        // updateElement(id, newx1, newy1, newx2, newy2, type, sWidth);\r\n        updateElement(id, newx1, newy1, newWidth , newHeight, type, sWidth);\r\n\r\n        }\r\n        else{\r\n            updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type, sWidth);\r\n        }\r\n        setAction(\"selection\")\r\n\r\n        alert(\"Now Consider clicking on selection tool and then the line which is shown to draw your re - factor sketch and think to move your cursor slightly\")\r\n    }\r\n\r\n    else if (action === \"sizes\")\r\n    {\r\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY, strokeWidth} = selectedElement;\r\n        const width = x2-x1;\r\n        const height = y2-y1;\r\n        const nexX1 = mouse.x- offsetX;\r\n        const nexY1 = mouse.y - offsetY;\r\n\r\n        // type.scale(mouse.x , mouse.y);\r\n\r\n        setElementWidth(width);\r\n        setElementLength(height); \r\n        \r\n        // console.log(selectedElement)\r\n        setElementStrokeWidth(selectedElement.roughElement.options.strokeWidth)\r\n    }\r\n\r\n};\r\n","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\handleMouseDown.js",["601","602","603","604","605","606","607"],"import {    mouse ,\r\n            myArr ,\r\n            setMyArr , \r\n            elements , \r\n            setElements ,\r\n            getElementAtPosition , \r\n            setAction , \r\n            selectedElement,\r\n            setSelectedElement, \r\n            tool } \r\n        \r\n            from \"../sketch\";\r\n\r\n\r\nimport {createElement} from \"./createElement\";\r\n\r\nexport const handleMouseDown = (event) => {\r\n    // const { clientX , clientY} = event;\r\n    if (tool === \"selection\") {\r\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\r\n        if(element)\r\n        {\r\n             const posX = mouse.x || (event.touches[0].clientX - 8 )\r\n            const posY = mouse.y || (event.touches[0].clientY - 385)\r\n            const offsetX = posX - element.x1 ;\r\n            const offsetY = posY - element.y1 ;\r\n\r\n            setSelectedElement({...element,offsetX,offsetY});\r\n            setAction(\"moving\");\r\n        }\r\n\r\n    }\r\n    else if(tool === \"eraser\")\r\n    {\r\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\r\n        if(element)\r\n        {\r\n            const offsetX = mouse.x - element.x1 ;\r\n            const offsetY = mouse.y - element.y1 ;\r\n            setSelectedElement({...element,offsetX,offsetY});\r\n            setAction(\"eraser\");\r\n        }\r\n    }\r\n\r\n    else if(tool === \"text\")\r\n    {\r\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\r\n        if(element)\r\n        {\r\n            const offsetX = mouse.x - element.x1 ;\r\n            const offsetY = mouse.y - element.y1 ;\r\n            setSelectedElement({...element,offsetX,offsetY});\r\n            setAction(\"text\");\r\n        }\r\n    }\r\n    else if(tool === \"resize\")\r\n    {\r\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\r\n        if(element)\r\n        {\r\n            const offsetX = mouse.x - element.x1 ;\r\n            const offsetY = mouse.y - element.y1 ;\r\n            setSelectedElement({...element,offsetX,offsetY});\r\n            setAction(\"resize\");\r\n        }\r\n    }\r\n\r\n    else if(tool === \"sizes\")\r\n    {\r\n        const element = getElementAtPosition(mouse.x, mouse.y, elements);\r\n        if(element)\r\n        {\r\n            const offsetX = mouse.x - element.x1 ;\r\n            const offsetY = mouse.y - element.y1 ;\r\n            setSelectedElement({...element,offsetX,offsetY});\r\n\r\n            setAction(\"sizes\")\r\n        }\r\n    }\r\n\r\n    else {\r\n       setAction(\"drawing\");\r\n        // const {clientX, clientY} = event;\r\n        const id = elements.length;\r\n\r\n        console.log(event.target);\r\n\r\n        if(event.type === \"mousedown\")\r\n        {\r\n        const clientX = mouse.x; \r\n        const clientY = mouse.y; \r\n\r\n        console.log(clientX, clientY);\r\n\r\n        const { offsetLeft, offsetTop } = event.target;\r\n        const canvasX = clientX - offsetLeft;\r\n        const canvasY = clientY - offsetTop;\r\n\r\n        const element =  createElement(id, clientX , clientY, clientX, clientY, tool);\r\n\r\n        setElements(prevState => [...prevState, element]);\r\n        }\r\n        else{\r\n        let clientX = event.touches[0].clientX; \r\n        let clientY = event.touches[0].clientY; \r\n\r\n            clientX = clientX - 8 ;\r\n            clientY = clientY - 385 ;\r\n\r\n        console.log(clientX, clientY)\r\n\r\n        const { offsetLeft, offsetTop } = event.target;\r\n        const canvasX = clientX - offsetLeft;\r\n        const canvasY = clientY - offsetTop;\r\n\r\n        const element =  createElement(id, clientX , clientY, clientX, clientY, tool);\r\n\r\n        setElements(prevState => [...prevState, element]);\r\n        }\r\n\r\n\r\n    }\r\n};\r\n","E:\\aoo-ghr-bnain-update\\src\\scrapMe.jsx",["608","609"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport {state , \r\n        setState  , \r\n        setPrice , \r\n        setTitle ,\r\n        setImage ,\r\n        setPrice2 , \r\n        setTitle2 ,\r\n        setImage2 ,\r\n        setPrice3 , \r\n        setTitle3 ,\r\n        setImage3 ,\r\n        setSteelPrice , \r\n        setSteelTitle ,\r\n        setSteelImage ,\r\n        setSteelPrice2 , \r\n        setSteelTitle2 ,\r\n        setSteelImage2 ,\r\n        setSteelPrice3 , \r\n        setSteelTitle3 ,\r\n        setSteelImage3 ,\r\n        setLoading,\r\n         } from \"./sketch\"\r\n\r\nexport const scrapMe = () => {\r\n\r\n    setLoading(true);\r\n    \r\n\r\n        axios.get('https://aoo-ghr-bnain-fyp.herokuapp.com/scrap')\r\n            .then((res) => {\r\n\r\n                setLoading(false);\r\n                console.log(res.data)\r\n\r\n                setImage(res.data.products[0].image);\r\n                setPrice(res.data.products[0].price);\r\n                setTitle(res.data.products[0].title);\r\n\r\n                setImage2(res.data.products[1].image);\r\n                setPrice2(res.data.products[1].price);\r\n                setTitle2(res.data.products[1].title);\r\n\r\n                setImage3(res.data.products[2].image);\r\n                setPrice3(res.data.products[2].price);\r\n                setTitle3(res.data.products[2].title);\r\n\r\n            })\r\n                        \r\n            .catch(err => {\r\n                console.error(err.status);\r\n                alert(err.status);\r\n            },{\r\n                withCredentials: true,\r\n                headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'\r\n            }});\r\n\r\n            axios.get('https://aoo-ghr-bnain-fyp.herokuapp.com/scrapSteel')\r\n            .then((res) => {\r\n\r\n                // setLoading(false);\r\n                console.log(res)\r\n\r\n                setSteelImage(res.data.products[0].image);\r\n                setSteelPrice(res.data.products[0].price);\r\n                setSteelTitle(res.data.products[0].title);\r\n\r\n                setSteelImage2(res.data.products[1].image);\r\n                setSteelPrice2(res.data.products[1].price);\r\n                setSteelTitle2(res.data.products[1].title);\r\n\r\n                setSteelImage3(res.data.products[2].image);\r\n                setSteelPrice3(res.data.products[2].price);\r\n                setSteelTitle3(res.data.products[2].title);\r\n\r\n                console.log(res.data.products[0].image);\r\n                console.log(res.data.products[0].price);\r\n                console.log(res.data.products[0].title);\r\n\r\n                console.log(res.data.products[1].image);\r\n                console.log(res.data.products[1].price);\r\n                console.log(res.data.products[1].title);\r\n\r\n                console.log(res.data.products[2].image);\r\n                console.log(res.data.products[2].price);\r\n                console.log(res.data.products[2].title);\r\n\r\n            })\r\n                        \r\n            .catch(err => {\r\n                console.error(err.status);\r\n                alert(err.status);\r\n                \r\n            },{\r\n                withCredentials: true,\r\n                headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json'\r\n            }});\r\n\r\n            setState({ ...state, [\"bottom\"]: true });\r\n            document.getElementById(\"est\").click() ;\r\n\r\n        }\r\n","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\useStyles.js",[],"E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\updateElement.js",[],"E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\createElement.js",["610","611"],"import rough from 'roughjs/bundled/rough.esm';\r\nimport {wall, setWall} from \"../sketch\";\r\n\r\nconst generator = rough.generator();\r\n\r\nexport function createElement(id, x1, y1, x2, y2 , type , sWidth){\r\n    const roughElement = type === \"line\"\r\n        ? generator.line(x1,y1,x2,y2, { roughness: 0 , strokeWidth: sWidth})\r\n\r\n        : type === \"rectangle\" ? generator.rectangle(x1, y1, x2-x1, y2-y1 , { roughness: 0 , strokeWidth: sWidth })\r\n\r\n            : type === \"ellipse\" ? generator.ellipse(x1, y1, x2-x1, y2-y1 , { roughness: 0 , strokeWidth: sWidth})\r\n\r\n                : type === \"arcL\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI , Math.PI * 1.5, true ,  { roughness: 0 , strokeWidth: 3})\r\n\r\n                    : type === \"arcLB\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI * 2.5 , Math.PI * 3.0 , true ,  { roughness: 0 , strokeWidth: 3})\r\n\r\n                        : type === \"arcR\" ? generator.arc(x1, y1, x2-x1, x2-x1 ,  Math.PI * 1.5 , Math.PI * 2.0, true ,  { roughness: 0 , strokeWidth: 3})\r\n\r\n                            : type === \"arcRB\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI * 2.0 , Math.PI * 2.5, true ,  { roughness: 0 , strokeWidth: 3})\r\n                            \r\n                                : type === \"circle\" ? generator.circle(x1, y1, x2-x1,   { roughness: 0 , strokeWidth: sWidth}) :\r\n\r\n                                    \"\" ;\r\n\r\n\r\n    return {id, x1, y1, x2, y2, type , roughElement};\r\n\r\n}\r\n","E:\\aoo-ghr-bnain-update\\src\\sketchHelper\\TabPanel.js",[],{"ruleId":"612","severity":1,"message":"613","line":3,"column":8,"nodeType":"614","messageId":"615","endLine":3,"endColumn":11},{"ruleId":"612","severity":1,"message":"616","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"617","line":34,"column":14,"nodeType":"614","messageId":"615","endLine":34,"endColumn":32},{"ruleId":"612","severity":1,"message":"618","line":20,"column":17,"nodeType":"614","messageId":"615","endLine":20,"endColumn":26},{"ruleId":"612","severity":1,"message":"619","line":21,"column":10,"nodeType":"614","messageId":"615","endLine":21,"endColumn":14},{"ruleId":"612","severity":1,"message":"620","line":22,"column":10,"nodeType":"614","messageId":"615","endLine":22,"endColumn":15},{"ruleId":"612","severity":1,"message":"621","line":24,"column":17,"nodeType":"614","messageId":"615","endLine":24,"endColumn":27},{"ruleId":"612","severity":1,"message":"622","line":25,"column":26,"nodeType":"614","messageId":"615","endLine":25,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":25,"column":40,"nodeType":"614","messageId":"615","endLine":25,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":25,"column":47,"nodeType":"614","messageId":"615","endLine":25,"endColumn":53},{"ruleId":"612","severity":1,"message":"625","line":30,"column":10,"nodeType":"614","messageId":"615","endLine":30,"endColumn":16},{"ruleId":"612","severity":1,"message":"626","line":31,"column":10,"nodeType":"614","messageId":"615","endLine":31,"endColumn":20},{"ruleId":"612","severity":1,"message":"627","line":108,"column":7,"nodeType":"614","messageId":"615","endLine":108,"endColumn":13},{"ruleId":"628","severity":1,"message":"629","line":119,"column":1,"nodeType":"630","endLine":124,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":127,"column":22,"nodeType":"630","endLine":127,"endColumn":69},{"ruleId":"628","severity":1,"message":"629","line":156,"column":5,"nodeType":"630","endLine":159,"endColumn":36},{"ruleId":"628","severity":1,"message":"629","line":162,"column":21,"nodeType":"630","endLine":164,"endColumn":36},{"ruleId":"628","severity":1,"message":"629","line":185,"column":21,"nodeType":"630","endLine":188,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":197,"column":9,"nodeType":"630","endLine":200,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":208,"column":5,"nodeType":"630","endLine":210,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":218,"column":1,"nodeType":"630","endLine":220,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":242,"column":1,"nodeType":"630","endLine":244,"endColumn":32},{"ruleId":"631","severity":1,"message":"632","line":8,"column":7,"nodeType":"630","endLine":8,"endColumn":107},{"ruleId":"612","severity":1,"message":"633","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":24},{"ruleId":"612","severity":1,"message":"636","line":18,"column":8,"nodeType":"614","messageId":"615","endLine":18,"endColumn":22},{"ruleId":"612","severity":1,"message":"637","line":68,"column":10,"nodeType":"614","messageId":"615","endLine":68,"endColumn":15},{"ruleId":"612","severity":1,"message":"638","line":79,"column":12,"nodeType":"614","messageId":"615","endLine":79,"endColumn":23},{"ruleId":"612","severity":1,"message":"633","line":101,"column":8,"nodeType":"614","messageId":"615","endLine":101,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":103,"column":8,"nodeType":"614","messageId":"615","endLine":103,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":106,"column":8,"nodeType":"614","messageId":"615","endLine":106,"endColumn":24},{"ruleId":"612","severity":1,"message":"639","line":116,"column":13,"nodeType":"614","messageId":"615","endLine":116,"endColumn":16},{"ruleId":"640","severity":1,"message":"641","line":188,"column":13,"nodeType":"642","endLine":188,"endColumn":21},{"ruleId":"612","severity":1,"message":"633","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":24},{"ruleId":"612","severity":1,"message":"643","line":9,"column":8,"nodeType":"614","messageId":"615","endLine":9,"endColumn":12},{"ruleId":"612","severity":1,"message":"644","line":13,"column":8,"nodeType":"614","messageId":"615","endLine":13,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":52,"column":11,"nodeType":"630","endLine":52,"endColumn":59},{"ruleId":"612","severity":1,"message":"645","line":5,"column":8,"nodeType":"614","messageId":"615","endLine":5,"endColumn":13},{"ruleId":"612","severity":1,"message":"646","line":9,"column":10,"nodeType":"614","messageId":"615","endLine":9,"endColumn":14},{"ruleId":"612","severity":1,"message":"647","line":10,"column":8,"nodeType":"614","messageId":"615","endLine":10,"endColumn":20},{"ruleId":"648","severity":1,"message":"649","line":58,"column":1,"nodeType":"614","endLine":58,"endColumn":10,"suggestions":"650"},{"ruleId":"631","severity":1,"message":"632","line":75,"column":21,"nodeType":"630","endLine":75,"endColumn":99},{"ruleId":"631","severity":1,"message":"632","line":89,"column":25,"nodeType":"630","endLine":89,"endColumn":74},{"ruleId":"631","severity":1,"message":"632","line":90,"column":25,"nodeType":"630","endLine":90,"endColumn":76},{"ruleId":"651","severity":1,"message":"652","line":115,"column":13,"nodeType":"630","endLine":116,"endColumn":99},{"ruleId":"612","severity":1,"message":"653","line":10,"column":8,"nodeType":"614","messageId":"615","endLine":10,"endColumn":14},{"ruleId":"612","severity":1,"message":"654","line":27,"column":24,"nodeType":"614","messageId":"615","endLine":27,"endColumn":43},{"ruleId":"612","severity":1,"message":"655","line":80,"column":10,"nodeType":"614","messageId":"615","endLine":80,"endColumn":16},{"ruleId":"612","severity":1,"message":"656","line":85,"column":13,"nodeType":"614","messageId":"615","endLine":85,"endColumn":17},{"ruleId":"612","severity":1,"message":"657","line":202,"column":18,"nodeType":"614","messageId":"615","endLine":202,"endColumn":31},{"ruleId":"612","severity":1,"message":"658","line":543,"column":33,"nodeType":"614","messageId":"615","endLine":543,"endColumn":44},{"ruleId":"612","severity":1,"message":"659","line":561,"column":33,"nodeType":"614","messageId":"615","endLine":561,"endColumn":41},{"ruleId":"612","severity":1,"message":"660","line":620,"column":33,"nodeType":"614","messageId":"615","endLine":620,"endColumn":49},{"ruleId":"612","severity":1,"message":"661","line":637,"column":33,"nodeType":"614","messageId":"615","endLine":637,"endColumn":46},{"ruleId":"612","severity":1,"message":"662","line":942,"column":18,"nodeType":"614","messageId":"615","endLine":942,"endColumn":29},{"ruleId":"612","severity":1,"message":"663","line":942,"column":32,"nodeType":"614","messageId":"615","endLine":942,"endColumn":46},{"ruleId":"612","severity":1,"message":"664","line":955,"column":24,"nodeType":"614","messageId":"615","endLine":955,"endColumn":26},{"ruleId":"612","severity":1,"message":"665","line":959,"column":24,"nodeType":"614","messageId":"615","endLine":959,"endColumn":32},{"ruleId":"612","severity":1,"message":"666","line":959,"column":34,"nodeType":"614","messageId":"615","endLine":959,"endColumn":45},{"ruleId":"612","severity":1,"message":"667","line":960,"column":24,"nodeType":"614","messageId":"615","endLine":960,"endColumn":33},{"ruleId":"612","severity":1,"message":"668","line":960,"column":35,"nodeType":"614","messageId":"615","endLine":960,"endColumn":47},{"ruleId":"648","severity":1,"message":"669","line":969,"column":17,"nodeType":"614","endLine":969,"endColumn":26,"suggestions":"670"},{"ruleId":"612","severity":1,"message":"671","line":1135,"column":27,"nodeType":"614","messageId":"615","endLine":1135,"endColumn":42},{"ruleId":"612","severity":1,"message":"672","line":1139,"column":29,"nodeType":"614","messageId":"615","endLine":1139,"endColumn":38},{"ruleId":"612","severity":1,"message":"672","line":1207,"column":29,"nodeType":"614","messageId":"615","endLine":1207,"endColumn":38},{"ruleId":"673","severity":1,"message":"674","line":1291,"column":33,"nodeType":"614","messageId":"675","endLine":1291,"endColumn":40},{"ruleId":"612","severity":1,"message":"676","line":1324,"column":25,"nodeType":"614","messageId":"615","endLine":1324,"endColumn":32},{"ruleId":"640","severity":1,"message":"641","line":1809,"column":49,"nodeType":"642","endLine":1809,"endColumn":66},{"ruleId":"640","severity":1,"message":"641","line":2230,"column":25,"nodeType":"642","endLine":2230,"endColumn":42},{"ruleId":"640","severity":1,"message":"641","line":2664,"column":25,"nodeType":"642","endLine":2664,"endColumn":42},{"ruleId":"640","severity":1,"message":"641","line":2814,"column":16,"nodeType":"642","endLine":2814,"endColumn":33},{"ruleId":"640","severity":1,"message":"641","line":2815,"column":17,"nodeType":"642","endLine":2815,"endColumn":49},{"ruleId":"640","severity":1,"message":"641","line":3131,"column":49,"nodeType":"642","endLine":3131,"endColumn":66},{"ruleId":"612","severity":1,"message":"677","line":8,"column":8,"nodeType":"614","messageId":"615","endLine":8,"endColumn":17},{"ruleId":"612","severity":1,"message":"678","line":17,"column":8,"nodeType":"614","messageId":"615","endLine":17,"endColumn":18},{"ruleId":"612","severity":1,"message":"679","line":18,"column":8,"nodeType":"614","messageId":"615","endLine":18,"endColumn":24},{"ruleId":"612","severity":1,"message":"680","line":20,"column":10,"nodeType":"614","messageId":"615","endLine":20,"endColumn":21},{"ruleId":"612","severity":1,"message":"681","line":20,"column":23,"nodeType":"614","messageId":"615","endLine":20,"endColumn":34},{"ruleId":"612","severity":1,"message":"682","line":28,"column":7,"nodeType":"614","messageId":"615","endLine":28,"endColumn":18},{"ruleId":"612","severity":1,"message":"683","line":123,"column":12,"nodeType":"614","messageId":"615","endLine":123,"endColumn":18},{"ruleId":"612","severity":1,"message":"684","line":123,"column":20,"nodeType":"614","messageId":"615","endLine":123,"endColumn":29},{"ruleId":"612","severity":1,"message":"685","line":135,"column":11,"nodeType":"614","messageId":"615","endLine":135,"endColumn":21},{"ruleId":"612","severity":1,"message":"686","line":146,"column":11,"nodeType":"614","messageId":"615","endLine":146,"endColumn":26},{"ruleId":"631","severity":1,"message":"632","line":393,"column":21,"nodeType":"630","endLine":393,"endColumn":90},{"ruleId":"612","severity":1,"message":"633","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":24},{"ruleId":"612","severity":1,"message":"643","line":9,"column":8,"nodeType":"614","messageId":"615","endLine":9,"endColumn":12},{"ruleId":"631","severity":1,"message":"632","line":181,"column":5,"nodeType":"630","endLine":181,"endColumn":89},{"ruleId":"631","severity":1,"message":"632","line":186,"column":1,"nodeType":"630","endLine":186,"endColumn":87},{"ruleId":"612","severity":1,"message":"687","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":15},{"ruleId":"612","severity":1,"message":"688","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":14},{"ruleId":"612","severity":1,"message":"689","line":17,"column":10,"nodeType":"614","messageId":"615","endLine":17,"endColumn":15},{"ruleId":"612","severity":1,"message":"690","line":18,"column":8,"nodeType":"614","messageId":"615","endLine":18,"endColumn":17},{"ruleId":"612","severity":1,"message":"622","line":19,"column":26,"nodeType":"614","messageId":"615","endLine":19,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":19,"column":40,"nodeType":"614","messageId":"615","endLine":19,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":19,"column":47,"nodeType":"614","messageId":"615","endLine":19,"endColumn":53},{"ruleId":"612","severity":1,"message":"691","line":30,"column":12,"nodeType":"614","messageId":"615","endLine":30,"endColumn":15},{"ruleId":"612","severity":1,"message":"692","line":30,"column":17,"nodeType":"614","messageId":"615","endLine":30,"endColumn":23},{"ruleId":"631","severity":1,"message":"632","line":159,"column":33,"nodeType":"630","endLine":159,"endColumn":117},{"ruleId":"631","severity":1,"message":"632","line":164,"column":29,"nodeType":"630","endLine":164,"endColumn":115},{"ruleId":"612","severity":1,"message":"687","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":15},{"ruleId":"612","severity":1,"message":"634","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":10,"column":8,"nodeType":"614","messageId":"615","endLine":10,"endColumn":24},{"ruleId":"612","severity":1,"message":"622","line":12,"column":26,"nodeType":"614","messageId":"615","endLine":12,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":12,"column":40,"nodeType":"614","messageId":"615","endLine":12,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":12,"column":47,"nodeType":"614","messageId":"615","endLine":12,"endColumn":53},{"ruleId":"612","severity":1,"message":"693","line":27,"column":9,"nodeType":"614","messageId":"615","endLine":27,"endColumn":15},{"ruleId":"612","severity":1,"message":"694","line":27,"column":18,"nodeType":"614","messageId":"615","endLine":27,"endColumn":27},{"ruleId":"612","severity":1,"message":"695","line":28,"column":9,"nodeType":"614","messageId":"615","endLine":28,"endColumn":16},{"ruleId":"612","severity":1,"message":"696","line":28,"column":19,"nodeType":"614","messageId":"615","endLine":28,"endColumn":29},{"ruleId":"612","severity":1,"message":"697","line":29,"column":8,"nodeType":"614","messageId":"615","endLine":29,"endColumn":16},{"ruleId":"612","severity":1,"message":"698","line":30,"column":8,"nodeType":"614","messageId":"615","endLine":30,"endColumn":18},{"ruleId":"631","severity":1,"message":"632","line":307,"column":29,"nodeType":"630","endLine":307,"endColumn":115},{"ruleId":"612","severity":1,"message":"637","line":22,"column":10,"nodeType":"614","messageId":"615","endLine":22,"endColumn":15},{"ruleId":"612","severity":1,"message":"699","line":22,"column":18,"nodeType":"614","messageId":"615","endLine":22,"endColumn":26},{"ruleId":"612","severity":1,"message":"700","line":1,"column":9,"nodeType":"614","messageId":"615","endLine":1,"endColumn":19},{"ruleId":"612","severity":1,"message":"622","line":2,"column":26,"nodeType":"614","messageId":"615","endLine":2,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":2,"column":40,"nodeType":"614","messageId":"615","endLine":2,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":2,"column":47,"nodeType":"614","messageId":"615","endLine":2,"endColumn":53},{"ruleId":"701","severity":1,"message":"702","line":58,"column":37,"nodeType":"630","endLine":58,"endColumn":40},{"ruleId":"701","severity":1,"message":"702","line":65,"column":37,"nodeType":"630","endLine":65,"endColumn":40},{"ruleId":"701","severity":1,"message":"702","line":73,"column":37,"nodeType":"630","endLine":73,"endColumn":40},{"ruleId":"612","severity":1,"message":"703","line":3,"column":8,"nodeType":"614","messageId":"615","endLine":3,"endColumn":14},{"ruleId":"612","severity":1,"message":"704","line":31,"column":22,"nodeType":"614","messageId":"615","endLine":31,"endColumn":32},{"ruleId":"612","severity":1,"message":"705","line":1,"column":8,"nodeType":"614","messageId":"615","endLine":1,"endColumn":13},{"ruleId":"706","severity":1,"message":"707","line":100,"column":34,"nodeType":"708","messageId":"709","endLine":100,"endColumn":50,"fix":"710"},{"ruleId":"612","severity":1,"message":"711","line":20,"column":11,"nodeType":"614","messageId":"615","endLine":20,"endColumn":18},{"ruleId":"712","severity":1,"message":"713","line":57,"column":63,"nodeType":"714","messageId":"715","endLine":57,"endColumn":64},{"ruleId":"712","severity":1,"message":"713","line":57,"column":91,"nodeType":"714","messageId":"715","endLine":57,"endColumn":92},{"ruleId":"712","severity":1,"message":"713","line":57,"column":199,"nodeType":"714","messageId":"715","endLine":57,"endColumn":200},{"ruleId":"716","severity":1,"message":"717","line":59,"column":14,"nodeType":"714","messageId":"718","endLine":59,"endColumn":16},{"ruleId":"716","severity":1,"message":"717","line":64,"column":19,"nodeType":"714","messageId":"718","endLine":64,"endColumn":21},{"ruleId":"716","severity":1,"message":"717","line":68,"column":19,"nodeType":"714","messageId":"718","endLine":68,"endColumn":21},{"ruleId":"716","severity":1,"message":"717","line":72,"column":19,"nodeType":"714","messageId":"718","endLine":72,"endColumn":21},{"ruleId":"673","severity":1,"message":"719","line":147,"column":17,"nodeType":"614","messageId":"675","endLine":147,"endColumn":21},{"ruleId":"612","severity":1,"message":"720","line":73,"column":38,"nodeType":"614","messageId":"615","endLine":73,"endColumn":42},{"ruleId":"612","severity":1,"message":"664","line":129,"column":16,"nodeType":"614","messageId":"615","endLine":129,"endColumn":18},{"ruleId":"612","severity":1,"message":"720","line":129,"column":38,"nodeType":"614","messageId":"615","endLine":129,"endColumn":42},{"ruleId":"612","severity":1,"message":"721","line":129,"column":63,"nodeType":"614","messageId":"615","endLine":129,"endColumn":74},{"ruleId":"612","severity":1,"message":"722","line":132,"column":15,"nodeType":"614","messageId":"615","endLine":132,"endColumn":20},{"ruleId":"612","severity":1,"message":"723","line":133,"column":15,"nodeType":"614","messageId":"615","endLine":133,"endColumn":20},{"ruleId":"612","severity":1,"message":"724","line":2,"column":13,"nodeType":"614","messageId":"615","endLine":2,"endColumn":18},{"ruleId":"612","severity":1,"message":"725","line":3,"column":13,"nodeType":"614","messageId":"615","endLine":3,"endColumn":21},{"ruleId":"612","severity":1,"message":"726","line":8,"column":13,"nodeType":"614","messageId":"615","endLine":8,"endColumn":28},{"ruleId":"612","severity":1,"message":"727","line":2,"column":15,"nodeType":"614","messageId":"615","endLine":2,"endColumn":22},{"ruleId":"612","severity":1,"message":"613","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":11},{"ruleId":"612","severity":1,"message":"616","line":5,"column":8,"nodeType":"614","messageId":"615","endLine":5,"endColumn":16},{"ruleId":"612","severity":1,"message":"617","line":35,"column":14,"nodeType":"614","messageId":"615","endLine":35,"endColumn":32},{"ruleId":"612","severity":1,"message":"618","line":20,"column":17,"nodeType":"614","messageId":"615","endLine":20,"endColumn":26},{"ruleId":"612","severity":1,"message":"619","line":21,"column":10,"nodeType":"614","messageId":"615","endLine":21,"endColumn":14},{"ruleId":"612","severity":1,"message":"620","line":22,"column":10,"nodeType":"614","messageId":"615","endLine":22,"endColumn":15},{"ruleId":"612","severity":1,"message":"703","line":24,"column":9,"nodeType":"614","messageId":"615","endLine":24,"endColumn":15},{"ruleId":"612","severity":1,"message":"621","line":24,"column":17,"nodeType":"614","messageId":"615","endLine":24,"endColumn":27},{"ruleId":"612","severity":1,"message":"622","line":25,"column":26,"nodeType":"614","messageId":"615","endLine":25,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":25,"column":40,"nodeType":"614","messageId":"615","endLine":25,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":25,"column":47,"nodeType":"614","messageId":"615","endLine":25,"endColumn":53},{"ruleId":"612","severity":1,"message":"625","line":30,"column":10,"nodeType":"614","messageId":"615","endLine":30,"endColumn":16},{"ruleId":"612","severity":1,"message":"626","line":31,"column":10,"nodeType":"614","messageId":"615","endLine":31,"endColumn":20},{"ruleId":"612","severity":1,"message":"627","line":108,"column":7,"nodeType":"614","messageId":"615","endLine":108,"endColumn":13},{"ruleId":"628","severity":1,"message":"629","line":119,"column":1,"nodeType":"630","endLine":124,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":127,"column":22,"nodeType":"630","endLine":127,"endColumn":69},{"ruleId":"628","severity":1,"message":"629","line":156,"column":5,"nodeType":"630","endLine":159,"endColumn":36},{"ruleId":"628","severity":1,"message":"629","line":162,"column":21,"nodeType":"630","endLine":164,"endColumn":36},{"ruleId":"628","severity":1,"message":"629","line":185,"column":21,"nodeType":"630","endLine":188,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":197,"column":9,"nodeType":"630","endLine":200,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":208,"column":5,"nodeType":"630","endLine":210,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":218,"column":1,"nodeType":"630","endLine":220,"endColumn":32},{"ruleId":"628","severity":1,"message":"629","line":242,"column":1,"nodeType":"630","endLine":244,"endColumn":32},{"ruleId":"631","severity":1,"message":"632","line":8,"column":7,"nodeType":"630","endLine":8,"endColumn":107},{"ruleId":"612","severity":1,"message":"633","line":101,"column":8,"nodeType":"614","messageId":"615","endLine":101,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":103,"column":8,"nodeType":"614","messageId":"615","endLine":103,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":106,"column":8,"nodeType":"614","messageId":"615","endLine":106,"endColumn":24},{"ruleId":"612","severity":1,"message":"639","line":116,"column":13,"nodeType":"614","messageId":"615","endLine":116,"endColumn":16},{"ruleId":"640","severity":1,"message":"641","line":188,"column":13,"nodeType":"642","endLine":188,"endColumn":21},{"ruleId":"612","severity":1,"message":"633","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":24},{"ruleId":"612","severity":1,"message":"636","line":18,"column":8,"nodeType":"614","messageId":"615","endLine":18,"endColumn":22},{"ruleId":"612","severity":1,"message":"637","line":68,"column":10,"nodeType":"614","messageId":"615","endLine":68,"endColumn":15},{"ruleId":"612","severity":1,"message":"638","line":79,"column":12,"nodeType":"614","messageId":"615","endLine":79,"endColumn":23},{"ruleId":"612","severity":1,"message":"633","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":24},{"ruleId":"612","severity":1,"message":"643","line":9,"column":8,"nodeType":"614","messageId":"615","endLine":9,"endColumn":12},{"ruleId":"612","severity":1,"message":"644","line":13,"column":8,"nodeType":"614","messageId":"615","endLine":13,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":52,"column":11,"nodeType":"630","endLine":52,"endColumn":59},{"ruleId":"612","severity":1,"message":"645","line":5,"column":8,"nodeType":"614","messageId":"615","endLine":5,"endColumn":13},{"ruleId":"612","severity":1,"message":"646","line":9,"column":10,"nodeType":"614","messageId":"615","endLine":9,"endColumn":14},{"ruleId":"612","severity":1,"message":"647","line":10,"column":8,"nodeType":"614","messageId":"615","endLine":10,"endColumn":20},{"ruleId":"648","severity":1,"message":"649","line":58,"column":1,"nodeType":"614","endLine":58,"endColumn":10,"suggestions":"728"},{"ruleId":"631","severity":1,"message":"632","line":75,"column":21,"nodeType":"630","endLine":75,"endColumn":99},{"ruleId":"631","severity":1,"message":"632","line":89,"column":25,"nodeType":"630","endLine":89,"endColumn":74},{"ruleId":"631","severity":1,"message":"632","line":90,"column":25,"nodeType":"630","endLine":90,"endColumn":76},{"ruleId":"651","severity":1,"message":"652","line":115,"column":13,"nodeType":"630","endLine":116,"endColumn":99},{"ruleId":"612","severity":1,"message":"653","line":10,"column":8,"nodeType":"614","messageId":"615","endLine":10,"endColumn":14},{"ruleId":"612","severity":1,"message":"654","line":27,"column":24,"nodeType":"614","messageId":"615","endLine":27,"endColumn":43},{"ruleId":"612","severity":1,"message":"655","line":80,"column":10,"nodeType":"614","messageId":"615","endLine":80,"endColumn":16},{"ruleId":"612","severity":1,"message":"656","line":85,"column":13,"nodeType":"614","messageId":"615","endLine":85,"endColumn":17},{"ruleId":"612","severity":1,"message":"657","line":202,"column":18,"nodeType":"614","messageId":"615","endLine":202,"endColumn":31},{"ruleId":"612","severity":1,"message":"658","line":543,"column":33,"nodeType":"614","messageId":"615","endLine":543,"endColumn":44},{"ruleId":"612","severity":1,"message":"659","line":561,"column":33,"nodeType":"614","messageId":"615","endLine":561,"endColumn":41},{"ruleId":"612","severity":1,"message":"660","line":620,"column":33,"nodeType":"614","messageId":"615","endLine":620,"endColumn":49},{"ruleId":"612","severity":1,"message":"661","line":637,"column":33,"nodeType":"614","messageId":"615","endLine":637,"endColumn":46},{"ruleId":"612","severity":1,"message":"662","line":942,"column":18,"nodeType":"614","messageId":"615","endLine":942,"endColumn":29},{"ruleId":"612","severity":1,"message":"663","line":942,"column":32,"nodeType":"614","messageId":"615","endLine":942,"endColumn":46},{"ruleId":"612","severity":1,"message":"665","line":959,"column":24,"nodeType":"614","messageId":"615","endLine":959,"endColumn":32},{"ruleId":"612","severity":1,"message":"666","line":959,"column":34,"nodeType":"614","messageId":"615","endLine":959,"endColumn":45},{"ruleId":"612","severity":1,"message":"667","line":960,"column":24,"nodeType":"614","messageId":"615","endLine":960,"endColumn":33},{"ruleId":"612","severity":1,"message":"668","line":960,"column":35,"nodeType":"614","messageId":"615","endLine":960,"endColumn":47},{"ruleId":"648","severity":1,"message":"669","line":969,"column":17,"nodeType":"614","endLine":969,"endColumn":26,"suggestions":"729"},{"ruleId":"612","severity":1,"message":"671","line":1135,"column":27,"nodeType":"614","messageId":"615","endLine":1135,"endColumn":42},{"ruleId":"612","severity":1,"message":"672","line":1139,"column":29,"nodeType":"614","messageId":"615","endLine":1139,"endColumn":38},{"ruleId":"612","severity":1,"message":"672","line":1207,"column":29,"nodeType":"614","messageId":"615","endLine":1207,"endColumn":38},{"ruleId":"673","severity":1,"message":"674","line":1291,"column":33,"nodeType":"614","messageId":"675","endLine":1291,"endColumn":40},{"ruleId":"612","severity":1,"message":"676","line":1324,"column":25,"nodeType":"614","messageId":"615","endLine":1324,"endColumn":32},{"ruleId":"640","severity":1,"message":"641","line":1820,"column":49,"nodeType":"642","endLine":1820,"endColumn":66},{"ruleId":"640","severity":1,"message":"641","line":2241,"column":25,"nodeType":"642","endLine":2241,"endColumn":42},{"ruleId":"640","severity":1,"message":"641","line":2675,"column":25,"nodeType":"642","endLine":2675,"endColumn":42},{"ruleId":"640","severity":1,"message":"641","line":2825,"column":16,"nodeType":"642","endLine":2825,"endColumn":33},{"ruleId":"640","severity":1,"message":"641","line":2826,"column":17,"nodeType":"642","endLine":2826,"endColumn":49},{"ruleId":"640","severity":1,"message":"641","line":3142,"column":49,"nodeType":"642","endLine":3142,"endColumn":66},{"ruleId":"612","severity":1,"message":"677","line":8,"column":8,"nodeType":"614","messageId":"615","endLine":8,"endColumn":17},{"ruleId":"612","severity":1,"message":"678","line":17,"column":8,"nodeType":"614","messageId":"615","endLine":17,"endColumn":18},{"ruleId":"612","severity":1,"message":"679","line":18,"column":8,"nodeType":"614","messageId":"615","endLine":18,"endColumn":24},{"ruleId":"612","severity":1,"message":"680","line":20,"column":10,"nodeType":"614","messageId":"615","endLine":20,"endColumn":21},{"ruleId":"612","severity":1,"message":"681","line":20,"column":23,"nodeType":"614","messageId":"615","endLine":20,"endColumn":34},{"ruleId":"612","severity":1,"message":"682","line":28,"column":7,"nodeType":"614","messageId":"615","endLine":28,"endColumn":18},{"ruleId":"612","severity":1,"message":"730","line":115,"column":11,"nodeType":"614","messageId":"615","endLine":115,"endColumn":18},{"ruleId":"612","severity":1,"message":"683","line":118,"column":12,"nodeType":"614","messageId":"615","endLine":118,"endColumn":18},{"ruleId":"612","severity":1,"message":"684","line":118,"column":20,"nodeType":"614","messageId":"615","endLine":118,"endColumn":29},{"ruleId":"612","severity":1,"message":"685","line":130,"column":11,"nodeType":"614","messageId":"615","endLine":130,"endColumn":21},{"ruleId":"612","severity":1,"message":"686","line":141,"column":11,"nodeType":"614","messageId":"615","endLine":141,"endColumn":26},{"ruleId":"631","severity":1,"message":"632","line":388,"column":21,"nodeType":"630","endLine":388,"endColumn":90},{"ruleId":"612","severity":1,"message":"633","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":11},{"ruleId":"612","severity":1,"message":"634","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":24},{"ruleId":"612","severity":1,"message":"643","line":9,"column":8,"nodeType":"614","messageId":"615","endLine":9,"endColumn":12},{"ruleId":"631","severity":1,"message":"632","line":181,"column":5,"nodeType":"630","endLine":181,"endColumn":89},{"ruleId":"631","severity":1,"message":"632","line":186,"column":1,"nodeType":"630","endLine":186,"endColumn":87},{"ruleId":"612","severity":1,"message":"687","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":15},{"ruleId":"612","severity":1,"message":"688","line":4,"column":8,"nodeType":"614","messageId":"615","endLine":4,"endColumn":14},{"ruleId":"612","severity":1,"message":"689","line":17,"column":10,"nodeType":"614","messageId":"615","endLine":17,"endColumn":15},{"ruleId":"612","severity":1,"message":"690","line":18,"column":8,"nodeType":"614","messageId":"615","endLine":18,"endColumn":17},{"ruleId":"612","severity":1,"message":"622","line":19,"column":26,"nodeType":"614","messageId":"615","endLine":19,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":19,"column":40,"nodeType":"614","messageId":"615","endLine":19,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":19,"column":47,"nodeType":"614","messageId":"615","endLine":19,"endColumn":53},{"ruleId":"612","severity":1,"message":"691","line":30,"column":12,"nodeType":"614","messageId":"615","endLine":30,"endColumn":15},{"ruleId":"612","severity":1,"message":"692","line":30,"column":17,"nodeType":"614","messageId":"615","endLine":30,"endColumn":23},{"ruleId":"631","severity":1,"message":"632","line":159,"column":33,"nodeType":"630","endLine":159,"endColumn":117},{"ruleId":"631","severity":1,"message":"632","line":164,"column":29,"nodeType":"630","endLine":164,"endColumn":115},{"ruleId":"612","severity":1,"message":"637","line":22,"column":10,"nodeType":"614","messageId":"615","endLine":22,"endColumn":15},{"ruleId":"612","severity":1,"message":"699","line":22,"column":18,"nodeType":"614","messageId":"615","endLine":22,"endColumn":26},{"ruleId":"612","severity":1,"message":"687","line":2,"column":8,"nodeType":"614","messageId":"615","endLine":2,"endColumn":15},{"ruleId":"612","severity":1,"message":"634","line":7,"column":8,"nodeType":"614","messageId":"615","endLine":7,"endColumn":16},{"ruleId":"612","severity":1,"message":"635","line":10,"column":8,"nodeType":"614","messageId":"615","endLine":10,"endColumn":24},{"ruleId":"612","severity":1,"message":"622","line":12,"column":26,"nodeType":"614","messageId":"615","endLine":12,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":12,"column":40,"nodeType":"614","messageId":"615","endLine":12,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":12,"column":47,"nodeType":"614","messageId":"615","endLine":12,"endColumn":53},{"ruleId":"612","severity":1,"message":"693","line":27,"column":9,"nodeType":"614","messageId":"615","endLine":27,"endColumn":15},{"ruleId":"612","severity":1,"message":"694","line":27,"column":18,"nodeType":"614","messageId":"615","endLine":27,"endColumn":27},{"ruleId":"612","severity":1,"message":"695","line":28,"column":9,"nodeType":"614","messageId":"615","endLine":28,"endColumn":16},{"ruleId":"612","severity":1,"message":"696","line":28,"column":19,"nodeType":"614","messageId":"615","endLine":28,"endColumn":29},{"ruleId":"612","severity":1,"message":"697","line":29,"column":8,"nodeType":"614","messageId":"615","endLine":29,"endColumn":16},{"ruleId":"612","severity":1,"message":"698","line":30,"column":8,"nodeType":"614","messageId":"615","endLine":30,"endColumn":18},{"ruleId":"631","severity":1,"message":"632","line":306,"column":29,"nodeType":"630","endLine":306,"endColumn":115},{"ruleId":"612","severity":1,"message":"700","line":1,"column":9,"nodeType":"614","messageId":"615","endLine":1,"endColumn":19},{"ruleId":"612","severity":1,"message":"622","line":2,"column":26,"nodeType":"614","messageId":"615","endLine":2,"endColumn":32},{"ruleId":"612","severity":1,"message":"623","line":2,"column":40,"nodeType":"614","messageId":"615","endLine":2,"endColumn":45},{"ruleId":"612","severity":1,"message":"624","line":2,"column":47,"nodeType":"614","messageId":"615","endLine":2,"endColumn":53},{"ruleId":"701","severity":1,"message":"702","line":58,"column":37,"nodeType":"630","endLine":58,"endColumn":40},{"ruleId":"701","severity":1,"message":"702","line":65,"column":37,"nodeType":"630","endLine":65,"endColumn":40},{"ruleId":"701","severity":1,"message":"702","line":73,"column":37,"nodeType":"630","endLine":73,"endColumn":40},{"ruleId":"612","severity":1,"message":"704","line":31,"column":22,"nodeType":"614","messageId":"615","endLine":31,"endColumn":32},{"ruleId":"612","severity":1,"message":"711","line":20,"column":11,"nodeType":"614","messageId":"615","endLine":20,"endColumn":18},{"ruleId":"712","severity":1,"message":"713","line":57,"column":63,"nodeType":"714","messageId":"715","endLine":57,"endColumn":64},{"ruleId":"712","severity":1,"message":"713","line":57,"column":91,"nodeType":"714","messageId":"715","endLine":57,"endColumn":92},{"ruleId":"712","severity":1,"message":"713","line":57,"column":199,"nodeType":"714","messageId":"715","endLine":57,"endColumn":200},{"ruleId":"716","severity":1,"message":"717","line":59,"column":14,"nodeType":"714","messageId":"718","endLine":59,"endColumn":16},{"ruleId":"716","severity":1,"message":"717","line":64,"column":19,"nodeType":"714","messageId":"718","endLine":64,"endColumn":21},{"ruleId":"716","severity":1,"message":"717","line":68,"column":19,"nodeType":"714","messageId":"718","endLine":68,"endColumn":21},{"ruleId":"716","severity":1,"message":"717","line":72,"column":19,"nodeType":"714","messageId":"718","endLine":72,"endColumn":21},{"ruleId":"673","severity":1,"message":"719","line":147,"column":17,"nodeType":"614","messageId":"675","endLine":147,"endColumn":21},{"ruleId":"612","severity":1,"message":"720","line":82,"column":38,"nodeType":"614","messageId":"615","endLine":82,"endColumn":42},{"ruleId":"612","severity":1,"message":"664","line":138,"column":16,"nodeType":"614","messageId":"615","endLine":138,"endColumn":18},{"ruleId":"612","severity":1,"message":"720","line":138,"column":38,"nodeType":"614","messageId":"615","endLine":138,"endColumn":42},{"ruleId":"612","severity":1,"message":"721","line":138,"column":63,"nodeType":"614","messageId":"615","endLine":138,"endColumn":74},{"ruleId":"612","severity":1,"message":"722","line":141,"column":15,"nodeType":"614","messageId":"615","endLine":141,"endColumn":20},{"ruleId":"612","severity":1,"message":"723","line":142,"column":15,"nodeType":"614","messageId":"615","endLine":142,"endColumn":20},{"ruleId":"612","severity":1,"message":"724","line":2,"column":13,"nodeType":"614","messageId":"615","endLine":2,"endColumn":18},{"ruleId":"612","severity":1,"message":"725","line":3,"column":13,"nodeType":"614","messageId":"615","endLine":3,"endColumn":21},{"ruleId":"612","severity":1,"message":"726","line":8,"column":13,"nodeType":"614","messageId":"615","endLine":8,"endColumn":28},{"ruleId":"612","severity":1,"message":"731","line":96,"column":15,"nodeType":"614","messageId":"615","endLine":96,"endColumn":22},{"ruleId":"612","severity":1,"message":"732","line":97,"column":15,"nodeType":"614","messageId":"615","endLine":97,"endColumn":22},{"ruleId":"612","severity":1,"message":"731","line":113,"column":15,"nodeType":"614","messageId":"615","endLine":113,"endColumn":22},{"ruleId":"612","severity":1,"message":"732","line":114,"column":15,"nodeType":"614","messageId":"615","endLine":114,"endColumn":22},{"ruleId":"612","severity":1,"message":"705","line":1,"column":8,"nodeType":"614","messageId":"615","endLine":1,"endColumn":13},{"ruleId":"706","severity":1,"message":"707","line":100,"column":34,"nodeType":"708","messageId":"709","endLine":100,"endColumn":50,"fix":"733"},{"ruleId":"612","severity":1,"message":"734","line":2,"column":9,"nodeType":"614","messageId":"615","endLine":2,"endColumn":13},{"ruleId":"612","severity":1,"message":"727","line":2,"column":15,"nodeType":"614","messageId":"615","endLine":2,"endColumn":22},"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'PostForm' is defined but never used.","'forceUpdateHandler' is defined but never used.","'useEffect' is defined but never used.","'Spin' is defined but never used.","'check' is defined but never used.","'IconButton' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'FaBeer' is defined but never used.","'LogoNodejs' is defined but never used.","'Sketch' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Box' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'StripeCheckout' is defined but never used.","'token' is assigned a value but never used.","'handleToken' is defined but never used.","'jwt' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Link' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'home1' is defined but never used.","'Icon' is defined but never used.","'locationIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setWindowDimensions'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [windowDimensions] as a second argument to the useEffect Hook.",["735"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'AppBar' is defined but never used.","'MaterialButtonGroup' is defined but never used.","'custom' is defined but never used.","'canv' is assigned a value but never used.","'myColorPicker' is defined but never used.","'totalBricks' is assigned a value but never used.","'Dplaster' is assigned a value but never used.","'totalBricksTotal' is assigned a value but never used.","'DplasterTotal' is assigned a value but never used.","'estimateArr' is assigned a value but never used.","'setEstimateArr' is assigned a value but never used.","'id' is assigned a value but never used.","'devWidth' is assigned a value but never used.","'setDevWidth' is assigned a value but never used.","'devHeight' is assigned a value but never used.","'setDevHeight' is assigned a value but never used.","React Hook useEffect contains a call to 'setWindowDimensions'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [windowDimensions, isMobile] as a second argument to the useEffect Hook.",["736"],"'handleCalculate' is assigned a value but never used.","'myElement' is assigned a value but never used.","no-redeclare","'EstCost' is already defined.","redeclared","'getJson' is assigned a value but never used.","'InputBase' is defined but never used.","'SearchIcon' is defined but never used.","'ShoppingCartIcon' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'StyledBadge' is assigned a value but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'isMenuOpen' is assigned a value but never used.","'handleMenuClose' is assigned a value but never used.","'welcome' is defined but never used.","'change' is defined but never used.","'toast' is defined but never used.","'TextField' is defined but never used.","'sub' is assigned a value but never used.","'setSub' is assigned a value but never used.","'widthh' is defined but never used.","'setWidthh' is defined but never used.","'heightt' is defined but never used.","'setHeightt' is defined but never used.","'setMyVar' is defined but never used.","'totalLayer' is defined but never used.","'setToken' is assigned a value but never used.","'makeStyles' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Button' is defined but never used.","'setSuccess' is assigned a value but never used.","'React' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"bottom\"] found.","Property","unnecessarilyComputedProperty",{"range":"737","text":"738"},"'context' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'body' is already defined.","'type' is assigned a value but never used.","'strokeWidth' is assigned a value but never used.","'nexX1' is assigned a value but never used.","'nexY1' is assigned a value but never used.","'myArr' is defined but never used.","'setMyArr' is defined but never used.","'selectedElement' is defined but never used.","'setWall' is defined but never used.",["739"],["740"],"'history' is assigned a value but never used.","'canvasX' is assigned a value but never used.","'canvasY' is assigned a value but never used.",{"range":"741","text":"738"},"'wall' is defined but never used.",{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},[3187,3197],"\"bottom\"",{"desc":"742","fix":"746"},{"desc":"744","fix":"747"},[3286,3296],"Add dependencies array: [windowDimensions]",{"range":"748","text":"749"},"Add dependencies array: [windowDimensions, isMobile]",{"range":"750","text":"751"},{"range":"752","text":"749"},{"range":"753","text":"751"},[1691,1691],", [windowDimensions]",[58993,58993],", [windowDimensions, isMobile]",[1756,1756],[59984,59984]]