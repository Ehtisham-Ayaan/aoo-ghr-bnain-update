{"ast":null,"code":"'use strict';\n\nlet crypto = require('crypto');\n\nconst {\n  Util: {\n    zip\n  }\n} = require('../../lib/braintree/util');\n\nclass Digest {\n  static Sha1hexdigest(privateKey, string) {\n    return new Digest().hmacSha1(privateKey, string);\n  }\n\n  static secureCompare(left, right) {\n    return new Digest().secureCompare(left, right);\n  }\n\n  hmacSha256(key, data) {\n    let hmac = crypto.createHmac('sha256', this.sha256(key));\n    hmac.update(data, 'binary');\n    return hmac.digest('hex');\n  }\n\n  hmacSha1(key, data) {\n    let hmac = crypto.createHmac('sha1', this.sha1(key));\n    hmac.update(data, 'binary');\n    return hmac.digest('hex');\n  }\n\n  secureCompare(left, right) {\n    if (left == null || right == null) {\n      return false;\n    }\n\n    let leftBytes = this.unpack(left);\n    let rightBytes = this.unpack(right);\n    let result = 0;\n\n    for (let [leftByte, rightByte] of zip(leftBytes, rightBytes)) {\n      result |= leftByte ^ rightByte;\n    }\n\n    return result === 0;\n  }\n\n  sha1(data) {\n    let hash = crypto.createHash('sha1');\n    hash.update(data, 'binary');\n    return hash.digest();\n  }\n\n  sha256(data) {\n    let hash = crypto.createHash('sha256');\n    hash.update(data, 'binary');\n    return hash.digest();\n  }\n\n  unpack(string) {\n    let bytes = [];\n\n    for (let index = 0; index < string.length; index++) {\n      bytes.push(string.charCodeAt(index));\n    }\n\n    return bytes;\n  }\n\n}\n\nmodule.exports = {\n  Digest: Digest\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/digest.js"],"names":["crypto","require","Util","zip","Digest","Sha1hexdigest","privateKey","string","hmacSha1","secureCompare","left","right","hmacSha256","key","data","hmac","createHmac","sha256","update","digest","sha1","leftBytes","unpack","rightBytes","result","leftByte","rightByte","hash","createHash","bytes","index","length","push","charCodeAt","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAM;AAACC,EAAAA,IAAI,EAAE;AAACC,IAAAA;AAAD;AAAP,IAAgBF,OAAO,CAAC,0BAAD,CAA7B;;AAEA,MAAMG,MAAN,CAAa;AACS,SAAbC,aAAa,CAACC,UAAD,EAAaC,MAAb,EAAqB;AACvC,WAAO,IAAIH,MAAJ,GAAaI,QAAb,CAAsBF,UAAtB,EAAkCC,MAAlC,CAAP;AACD;;AAEmB,SAAbE,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAc;AAChC,WAAO,IAAIP,MAAJ,GAAaK,aAAb,CAA2BC,IAA3B,EAAiCC,KAAjC,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY;AACpB,QAAIC,IAAI,GAAGf,MAAM,CAACgB,UAAP,CAAkB,QAAlB,EAA4B,KAAKC,MAAL,CAAYJ,GAAZ,CAA5B,CAAX;AAEAE,IAAAA,IAAI,CAACG,MAAL,CAAYJ,IAAZ,EAAkB,QAAlB;AAEA,WAAOC,IAAI,CAACI,MAAL,CAAY,KAAZ,CAAP;AACD;;AAEDX,EAAAA,QAAQ,CAACK,GAAD,EAAMC,IAAN,EAAY;AAClB,QAAIC,IAAI,GAAGf,MAAM,CAACgB,UAAP,CAAkB,MAAlB,EAA0B,KAAKI,IAAL,CAAUP,GAAV,CAA1B,CAAX;AAEAE,IAAAA,IAAI,CAACG,MAAL,CAAYJ,IAAZ,EAAkB,QAAlB;AAEA,WAAOC,IAAI,CAACI,MAAL,CAAY,KAAZ,CAAP;AACD;;AAEDV,EAAAA,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAc;AACzB,QAAID,IAAI,IAAI,IAAR,IAAgBC,KAAK,IAAI,IAA7B,EAAmC;AAAE,aAAO,KAAP;AAAe;;AAEpD,QAAIU,SAAS,GAAG,KAAKC,MAAL,CAAYZ,IAAZ,CAAhB;AACA,QAAIa,UAAU,GAAG,KAAKD,MAAL,CAAYX,KAAZ,CAAjB;AAEA,QAAIa,MAAM,GAAG,CAAb;;AAEA,SAAK,IAAI,CAACC,QAAD,EAAWC,SAAX,CAAT,IAAkCvB,GAAG,CAACkB,SAAD,EAAYE,UAAZ,CAArC,EAA8D;AAC5DC,MAAAA,MAAM,IAAIC,QAAQ,GAAGC,SAArB;AACD;;AAED,WAAOF,MAAM,KAAK,CAAlB;AACD;;AAEDJ,EAAAA,IAAI,CAACN,IAAD,EAAO;AACT,QAAIa,IAAI,GAAG3B,MAAM,CAAC4B,UAAP,CAAkB,MAAlB,CAAX;AAEAD,IAAAA,IAAI,CAACT,MAAL,CAAYJ,IAAZ,EAAkB,QAAlB;AAEA,WAAOa,IAAI,CAACR,MAAL,EAAP;AACD;;AAEDF,EAAAA,MAAM,CAACH,IAAD,EAAO;AACX,QAAIa,IAAI,GAAG3B,MAAM,CAAC4B,UAAP,CAAkB,QAAlB,CAAX;AAEAD,IAAAA,IAAI,CAACT,MAAL,CAAYJ,IAAZ,EAAkB,QAAlB;AAEA,WAAOa,IAAI,CAACR,MAAL,EAAP;AACD;;AAEDG,EAAAA,MAAM,CAACf,MAAD,EAAS;AACb,QAAIsB,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGvB,MAAM,CAACwB,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;AAClDD,MAAAA,KAAK,CAACG,IAAN,CAAWzB,MAAM,CAAC0B,UAAP,CAAkBH,KAAlB,CAAX;AACD;;AAED,WAAOD,KAAP;AACD;;AAhEU;;AAmEbK,MAAM,CAACC,OAAP,GAAiB;AAAC/B,EAAAA,MAAM,EAAEA;AAAT,CAAjB","sourcesContent":["'use strict';\n\nlet crypto = require('crypto');\nconst {Util: {zip}} = require('../../lib/braintree/util');\n\nclass Digest {\n  static Sha1hexdigest(privateKey, string) {\n    return new Digest().hmacSha1(privateKey, string);\n  }\n\n  static secureCompare(left, right) {\n    return new Digest().secureCompare(left, right);\n  }\n\n  hmacSha256(key, data) {\n    let hmac = crypto.createHmac('sha256', this.sha256(key));\n\n    hmac.update(data, 'binary');\n\n    return hmac.digest('hex');\n  }\n\n  hmacSha1(key, data) {\n    let hmac = crypto.createHmac('sha1', this.sha1(key));\n\n    hmac.update(data, 'binary');\n\n    return hmac.digest('hex');\n  }\n\n  secureCompare(left, right) {\n    if (left == null || right == null) { return false; }\n\n    let leftBytes = this.unpack(left);\n    let rightBytes = this.unpack(right);\n\n    let result = 0;\n\n    for (let [leftByte, rightByte] of zip(leftBytes, rightBytes)) {\n      result |= leftByte ^ rightByte;\n    }\n\n    return result === 0;\n  }\n\n  sha1(data) {\n    let hash = crypto.createHash('sha1');\n\n    hash.update(data, 'binary');\n\n    return hash.digest();\n  }\n\n  sha256(data) {\n    let hash = crypto.createHash('sha256');\n\n    hash.update(data, 'binary');\n\n    return hash.digest();\n  }\n\n  unpack(string) {\n    let bytes = [];\n\n    for (let index = 0; index < string.length; index++) {\n      bytes.push(string.charCodeAt(index));\n    }\n\n    return bytes;\n  }\n}\n\nmodule.exports = {Digest: Digest};\n"]},"metadata":{},"sourceType":"script"}