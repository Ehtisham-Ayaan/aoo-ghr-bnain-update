{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Environment = require('./environment').Environment;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass TestingGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  settle(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settle');\n  }\n\n  settlementPending(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_pending');\n  }\n\n  settlementConfirm(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_confirm');\n  }\n\n  settlementDecline(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_decline');\n  }\n\n  settlementOperationWithEnvironmentCheck(transactionId, operation) {\n    if (this.config.environment === Environment.Production) {\n      return Promise.reject(exceptions.TestOperationPerformedInProductionError('Test operation performed in production'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/${operation}`, null);\n  }\n\n}\n\nmodule.exports = {\n  TestingGateway: wrapPrototype(TestingGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/testing_gateway.js"],"names":["Gateway","require","Environment","exceptions","wrapPrototype","TestingGateway","constructor","gateway","config","settle","transactionId","settlementOperationWithEnvironmentCheck","settlementPending","settlementConfirm","settlementDecline","operation","environment","Production","Promise","reject","TestOperationPerformedInProductionError","http","put","baseMerchantPath","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAA3C;;AACA,IAAIC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCG,aAAvD;;AAEA,MAAMC,cAAN,SAA6BL,OAA7B,CAAqC;AACnCM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB,WAAO,KAAKC,uCAAL,CAA6CD,aAA7C,EAA4D,QAA5D,CAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACF,aAAD,EAAgB;AAC/B,WAAO,KAAKC,uCAAL,CAA6CD,aAA7C,EAA4D,oBAA5D,CAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACH,aAAD,EAAgB;AAC/B,WAAO,KAAKC,uCAAL,CAA6CD,aAA7C,EAA4D,oBAA5D,CAAP;AACD;;AAEDI,EAAAA,iBAAiB,CAACJ,aAAD,EAAgB;AAC/B,WAAO,KAAKC,uCAAL,CAA6CD,aAA7C,EAA4D,oBAA5D,CAAP;AACD;;AAEDC,EAAAA,uCAAuC,CAACD,aAAD,EAAgBK,SAAhB,EAA2B;AAChE,QAAI,KAAKP,MAAL,CAAYQ,WAAZ,KAA4Bd,WAAW,CAACe,UAA5C,EAAwD;AACtD,aAAOC,OAAO,CAACC,MAAR,CAAehB,UAAU,CAACiB,uCAAX,CAAmD,wCAAnD,CAAf,EAA6G,IAA7G,CAAP,CADsD,CACqE;AAC5H;;AAED,WAAO,KAAKb,OAAL,CAAac,IAAb,CAAkBC,GAAlB,CACJ,GAAE,KAAKd,MAAL,CAAYe,gBAAZ,EAA+B,iBAAgBb,aAAc,IAAGK,SAAU,EADxE,EAEL,IAFK,CAAP;AAID;;AAhCkC;;AAmCrCS,MAAM,CAACC,OAAP,GAAiB;AAACpB,EAAAA,cAAc,EAAED,aAAa,CAACC,cAAD;AAA9B,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Environment = require('./environment').Environment;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass TestingGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  settle(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settle');\n  }\n\n  settlementPending(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_pending');\n  }\n\n  settlementConfirm(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_confirm');\n  }\n\n  settlementDecline(transactionId) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_decline');\n  }\n\n  settlementOperationWithEnvironmentCheck(transactionId, operation) {\n    if (this.config.environment === Environment.Production) {\n      return Promise.reject(exceptions.TestOperationPerformedInProductionError('Test operation performed in production'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.put(\n      `${this.config.baseMerchantPath()}/transactions/${transactionId}/${operation}`,\n      null\n    );\n  }\n}\n\nmodule.exports = {TestingGateway: wrapPrototype(TestingGateway)};\n"]},"metadata":{},"sourceType":"script"}