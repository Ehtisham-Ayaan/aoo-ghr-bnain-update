{"ast":null,"code":"'use strict';\n\nlet AccountUpdaterDailyReport = require('./account_updater_daily_report').AccountUpdaterDailyReport;\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nlet ConnectedMerchantPayPalStatusChanged = require('./connected_merchant_paypal_status_changed').ConnectedMerchantPayPalStatusChanged;\n\nlet ConnectedMerchantStatusTransitioned = require('./connected_merchant_status_transitioned').ConnectedMerchantStatusTransitioned;\n\nlet Disbursement = require('./disbursement').Disbursement;\n\nlet Dispute = require('./dispute').Dispute;\n\nlet LocalPaymentCompleted = require('./local_payment_completed').LocalPaymentCompleted;\n\nlet LocalPaymentReversed = require('./local_payment_reversed').LocalPaymentReversed;\n\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\n\nlet OAuthAccessRevocation = require('./oauth_access_revocation').OAuthAccessRevocation;\n\nlet PartnerMerchant = require('./partner_merchant').PartnerMerchant;\n\nlet RevokedPaymentMethodMetadata = require('./revoked_payment_method_metadata').RevokedPaymentMethodMetadata;\n\nlet Subscription = require('./subscription').Subscription;\n\nlet Transaction = require('./transaction').Transaction;\n\nlet ValidationErrorsCollection = require('./validation_errors_collection').ValidationErrorsCollection;\n\nconst Kind = {\n  AccountUpdaterDailyReport: 'account_updater_daily_report',\n  Check: 'check',\n  ConnectedMerchantPayPalStatusChanged: 'connected_merchant_paypal_status_changed',\n  ConnectedMerchantStatusTransitioned: 'connected_merchant_status_transitioned',\n  Disbursement: 'disbursement',\n  DisbursementException: 'disbursement_exception',\n  DisputeOpened: 'dispute_opened',\n  DisputeLost: 'dispute_lost',\n  DisputeWon: 'dispute_won',\n  DisputeAccepted: 'dispute_accepted',\n  DisputeDisputed: 'dispute_disputed',\n  DisputeExpired: 'dispute_expired',\n  GrantorUpdatedGrantedPaymentMethod: 'grantor_updated_granted_payment_method',\n  GrantedPaymentMethodRevoked: 'granted_payment_method_revoked',\n  LocalPaymentCompleted: 'local_payment_completed',\n  LocalPaymentReversed: 'local_payment_reversed',\n  PartnerMerchantConnected: 'partner_merchant_connected',\n  PartnerMerchantDisconnected: 'partner_merchant_disconnected',\n  PartnerMerchantDeclined: 'partner_merchant_declined',\n  PaymentMethodRevokedByCustomer: 'payment_method_revoked_by_customer',\n  OAuthAccessRevoked: 'oauth_access_revoked',\n  RecipientUpdatedGrantedPaymentMethod: 'recipient_updated_granted_payment_method',\n  SubscriptionCanceled: 'subscription_canceled',\n  SubscriptionChargedSuccessfully: 'subscription_charged_successfully',\n  SubscriptionChargedUnsuccessfully: 'subscription_charged_unsuccessfully',\n  SubscriptionExpired: 'subscription_expired',\n  SubscriptionTrialEnded: 'subscription_trial_ended',\n  SubscriptionWentActive: 'subscription_went_active',\n  SubscriptionWentPastDue: 'subscription_went_past_due',\n  SubMerchantAccountApproved: 'sub_merchant_account_approved',\n  SubMerchantAccountDeclined: 'sub_merchant_account_declined',\n  TransactionDisbursed: 'transaction_disbursed',\n  TransactionSettled: 'transaction_settled',\n  TransactionSettlementDeclined: 'transaction_settlement_declined'\n};\n\nclass WebhookNotification extends AttributeSetter {\n  static initClass() {\n    this.Kind = Kind;\n  }\n\n  constructor(attributes, gateway) {\n    super(attributes, gateway);\n    let wrapperNode;\n\n    if (attributes.subject.apiErrorResponse != null) {\n      wrapperNode = attributes.subject.apiErrorResponse;\n    } else {\n      wrapperNode = attributes.subject;\n    }\n\n    if (wrapperNode.subscription != null) {\n      this.subscription = new Subscription(wrapperNode.subscription, gateway);\n    }\n\n    if (wrapperNode.merchantAccount != null) {\n      this.merchantAccount = new MerchantAccount(wrapperNode.merchantAccount);\n    }\n\n    if (wrapperNode.disbursement != null) {\n      this.disbursement = new Disbursement(wrapperNode.disbursement);\n    }\n\n    if (wrapperNode.transaction != null) {\n      this.transaction = new Transaction(wrapperNode.transaction, gateway);\n    }\n\n    if (wrapperNode.partnerMerchant != null) {\n      this.partnerMerchant = new PartnerMerchant(wrapperNode.partnerMerchant);\n    }\n\n    if (wrapperNode.oauthApplicationRevocation != null) {\n      this.oauthAccessRevocation = new OAuthAccessRevocation(wrapperNode.oauthApplicationRevocation);\n    }\n\n    if (wrapperNode.connectedMerchantStatusTransitioned != null) {\n      this.connectedMerchantStatusTransitioned = new ConnectedMerchantStatusTransitioned(wrapperNode.connectedMerchantStatusTransitioned);\n    }\n\n    if (wrapperNode.connectedMerchantPaypalStatusChanged != null) {\n      this.connectedMerchantPayPalStatusChanged = new ConnectedMerchantPayPalStatusChanged(wrapperNode.connectedMerchantPaypalStatusChanged);\n    }\n\n    if (wrapperNode.dispute != null) {\n      this.dispute = new Dispute(wrapperNode.dispute);\n    }\n\n    if (wrapperNode.accountUpdaterDailyReport != null) {\n      this.accountUpdaterDailyReport = new AccountUpdaterDailyReport(wrapperNode.accountUpdaterDailyReport);\n    }\n\n    if ([Kind.GrantedPaymentMethodRevoked, Kind.PaymentMethodRevokedByCustomer].indexOf(attributes.kind) !== -1) {\n      this.revokedPaymentMethodMetadata = new RevokedPaymentMethodMetadata(wrapperNode);\n    }\n\n    if (wrapperNode.localPayment != null && Kind.LocalPaymentCompleted === attributes.kind) {\n      this.localPaymentCompleted = new LocalPaymentCompleted(wrapperNode.localPayment, gateway);\n    }\n\n    if (wrapperNode.localPaymentReversed != null && Kind.LocalPaymentReversed === attributes.kind) {\n      this.localPaymentReversed = new LocalPaymentReversed(wrapperNode.localPayment, gateway);\n    }\n\n    if (wrapperNode.errors != null) {\n      this.errors = new ValidationErrorsCollection(wrapperNode.errors);\n      this.message = wrapperNode.message;\n    }\n  }\n\n}\n\nWebhookNotification.initClass();\nmodule.exports = {\n  WebhookNotification: WebhookNotification\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/webhook_notification.js"],"names":["AccountUpdaterDailyReport","require","AttributeSetter","ConnectedMerchantPayPalStatusChanged","ConnectedMerchantStatusTransitioned","Disbursement","Dispute","LocalPaymentCompleted","LocalPaymentReversed","MerchantAccount","OAuthAccessRevocation","PartnerMerchant","RevokedPaymentMethodMetadata","Subscription","Transaction","ValidationErrorsCollection","Kind","Check","DisbursementException","DisputeOpened","DisputeLost","DisputeWon","DisputeAccepted","DisputeDisputed","DisputeExpired","GrantorUpdatedGrantedPaymentMethod","GrantedPaymentMethodRevoked","PartnerMerchantConnected","PartnerMerchantDisconnected","PartnerMerchantDeclined","PaymentMethodRevokedByCustomer","OAuthAccessRevoked","RecipientUpdatedGrantedPaymentMethod","SubscriptionCanceled","SubscriptionChargedSuccessfully","SubscriptionChargedUnsuccessfully","SubscriptionExpired","SubscriptionTrialEnded","SubscriptionWentActive","SubscriptionWentPastDue","SubMerchantAccountApproved","SubMerchantAccountDeclined","TransactionDisbursed","TransactionSettled","TransactionSettlementDeclined","WebhookNotification","initClass","constructor","attributes","gateway","wrapperNode","subject","apiErrorResponse","subscription","merchantAccount","disbursement","transaction","partnerMerchant","oauthApplicationRevocation","oauthAccessRevocation","connectedMerchantStatusTransitioned","connectedMerchantPaypalStatusChanged","connectedMerchantPayPalStatusChanged","dispute","accountUpdaterDailyReport","indexOf","kind","revokedPaymentMethodMetadata","localPayment","localPaymentCompleted","localPaymentReversed","errors","message","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet AccountUpdaterDailyReport = require('./account_updater_daily_report').AccountUpdaterDailyReport;\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet ConnectedMerchantPayPalStatusChanged = require('./connected_merchant_paypal_status_changed').ConnectedMerchantPayPalStatusChanged;\nlet ConnectedMerchantStatusTransitioned = require('./connected_merchant_status_transitioned').ConnectedMerchantStatusTransitioned;\nlet Disbursement = require('./disbursement').Disbursement;\nlet Dispute = require('./dispute').Dispute;\nlet LocalPaymentCompleted = require('./local_payment_completed').LocalPaymentCompleted;\nlet LocalPaymentReversed = require('./local_payment_reversed').LocalPaymentReversed;\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\nlet OAuthAccessRevocation = require('./oauth_access_revocation').OAuthAccessRevocation;\nlet PartnerMerchant = require('./partner_merchant').PartnerMerchant;\nlet RevokedPaymentMethodMetadata = require('./revoked_payment_method_metadata').RevokedPaymentMethodMetadata;\nlet Subscription = require('./subscription').Subscription;\nlet Transaction = require('./transaction').Transaction;\nlet ValidationErrorsCollection = require('./validation_errors_collection').ValidationErrorsCollection;\n\nconst Kind = {\n  AccountUpdaterDailyReport: 'account_updater_daily_report',\n  Check: 'check',\n  ConnectedMerchantPayPalStatusChanged: 'connected_merchant_paypal_status_changed',\n  ConnectedMerchantStatusTransitioned: 'connected_merchant_status_transitioned',\n  Disbursement: 'disbursement',\n  DisbursementException: 'disbursement_exception',\n  DisputeOpened: 'dispute_opened',\n  DisputeLost: 'dispute_lost',\n  DisputeWon: 'dispute_won',\n  DisputeAccepted: 'dispute_accepted',\n  DisputeDisputed: 'dispute_disputed',\n  DisputeExpired: 'dispute_expired',\n  GrantorUpdatedGrantedPaymentMethod: 'grantor_updated_granted_payment_method',\n  GrantedPaymentMethodRevoked: 'granted_payment_method_revoked',\n  LocalPaymentCompleted: 'local_payment_completed',\n  LocalPaymentReversed: 'local_payment_reversed',\n  PartnerMerchantConnected: 'partner_merchant_connected',\n  PartnerMerchantDisconnected: 'partner_merchant_disconnected',\n  PartnerMerchantDeclined: 'partner_merchant_declined',\n  PaymentMethodRevokedByCustomer: 'payment_method_revoked_by_customer',\n  OAuthAccessRevoked: 'oauth_access_revoked',\n  RecipientUpdatedGrantedPaymentMethod: 'recipient_updated_granted_payment_method',\n  SubscriptionCanceled: 'subscription_canceled',\n  SubscriptionChargedSuccessfully: 'subscription_charged_successfully',\n  SubscriptionChargedUnsuccessfully: 'subscription_charged_unsuccessfully',\n  SubscriptionExpired: 'subscription_expired',\n  SubscriptionTrialEnded: 'subscription_trial_ended',\n  SubscriptionWentActive: 'subscription_went_active',\n  SubscriptionWentPastDue: 'subscription_went_past_due',\n  SubMerchantAccountApproved: 'sub_merchant_account_approved',\n  SubMerchantAccountDeclined: 'sub_merchant_account_declined',\n  TransactionDisbursed: 'transaction_disbursed',\n  TransactionSettled: 'transaction_settled',\n  TransactionSettlementDeclined: 'transaction_settlement_declined'\n};\n\nclass WebhookNotification extends AttributeSetter {\n  static initClass() {\n    this.Kind = Kind;\n  }\n\n  constructor(attributes, gateway) {\n    super(attributes, gateway);\n\n    let wrapperNode;\n\n    if (attributes.subject.apiErrorResponse != null) {\n      wrapperNode = attributes.subject.apiErrorResponse;\n    } else {\n      wrapperNode = attributes.subject;\n    }\n\n    if (wrapperNode.subscription != null) {\n      this.subscription = new Subscription(wrapperNode.subscription, gateway);\n    }\n\n    if (wrapperNode.merchantAccount != null) {\n      this.merchantAccount = new MerchantAccount(wrapperNode.merchantAccount);\n    }\n\n    if (wrapperNode.disbursement != null) {\n      this.disbursement = new Disbursement(wrapperNode.disbursement);\n    }\n\n    if (wrapperNode.transaction != null) {\n      this.transaction = new Transaction(wrapperNode.transaction, gateway);\n    }\n\n    if (wrapperNode.partnerMerchant != null) {\n      this.partnerMerchant = new PartnerMerchant(wrapperNode.partnerMerchant);\n    }\n\n    if (wrapperNode.oauthApplicationRevocation != null) {\n      this.oauthAccessRevocation = new OAuthAccessRevocation(wrapperNode.oauthApplicationRevocation);\n    }\n\n    if (wrapperNode.connectedMerchantStatusTransitioned != null) {\n      this.connectedMerchantStatusTransitioned = new ConnectedMerchantStatusTransitioned(wrapperNode.connectedMerchantStatusTransitioned);\n    }\n\n    if (wrapperNode.connectedMerchantPaypalStatusChanged != null) {\n      this.connectedMerchantPayPalStatusChanged = new ConnectedMerchantPayPalStatusChanged(wrapperNode.connectedMerchantPaypalStatusChanged);\n    }\n\n    if (wrapperNode.dispute != null) {\n      this.dispute = new Dispute(wrapperNode.dispute);\n    }\n\n    if (wrapperNode.accountUpdaterDailyReport != null) {\n      this.accountUpdaterDailyReport = new AccountUpdaterDailyReport(wrapperNode.accountUpdaterDailyReport);\n    }\n\n    if ([Kind.GrantedPaymentMethodRevoked, Kind.PaymentMethodRevokedByCustomer].indexOf(attributes.kind) !== -1) {\n      this.revokedPaymentMethodMetadata = new RevokedPaymentMethodMetadata(wrapperNode);\n    }\n\n    if (wrapperNode.localPayment != null && Kind.LocalPaymentCompleted === attributes.kind) {\n      this.localPaymentCompleted = new LocalPaymentCompleted(wrapperNode.localPayment, gateway);\n    }\n\n    if (wrapperNode.localPaymentReversed != null && Kind.LocalPaymentReversed === attributes.kind) {\n      this.localPaymentReversed = new LocalPaymentReversed(wrapperNode.localPayment, gateway);\n    }\n\n    if (wrapperNode.errors != null) {\n      this.errors = new ValidationErrorsCollection(wrapperNode.errors);\n      this.message = wrapperNode.message;\n    }\n  }\n}\nWebhookNotification.initClass();\n\nmodule.exports = {WebhookNotification: WebhookNotification};\n"]},"metadata":{},"sourceType":"script"}