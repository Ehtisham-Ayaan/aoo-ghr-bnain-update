{"ast":null,"code":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\n\nclass CreditCard extends AttributeSetter {\n  static initClass() {\n    this.CardType = {\n      AmEx: 'American Express',\n      CarteBlanche: 'Carte Blanche',\n      ChinaUnionPay: 'China UnionPay',\n      DinersClubInternational: 'Diners Club',\n      Discover: 'Discover',\n      Elo: 'Elo',\n      JCB: 'JCB',\n      Laser: 'Laser',\n      UKMaestro: 'UK Maestro',\n      Maestro: 'Maestro',\n      MasterCard: 'MasterCard',\n      Solo: 'Solo',\n      Switch: 'Switch',\n      Visa: 'Visa',\n      Unknown: 'Unknown',\n\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n\n          let value = this[key];\n\n          if (key !== 'All') {\n            all.push(value);\n          }\n        }\n\n        return all;\n      }\n\n    };\n    this.CustomerLocation = {\n      International: 'international',\n      US: 'us'\n    };\n    this.CardTypeIndicator = {\n      Yes: 'Yes',\n      No: 'No',\n      Unknown: 'Unknown'\n    };\n    this.Prepaid = this.Commercial = this.Payroll = this.Healthcare = this.DurbinRegulated = this.Debit = this.CountryOfIssuance = this.IssuingBank = this.ProductId = this.CardTypeIndicator;\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    this.maskedNumber = `${this.bin}******${this.last4}`;\n    this.expirationDate = `${this.expirationMonth}/${this.expirationYear}`;\n\n    if (attributes) {\n      let sortedVerifications = (attributes.verifications || []).sort((a, b) => b.created_at - a.created_at);\n\n      if (sortedVerifications[0]) {\n        this.verification = new CreditCardVerification(sortedVerifications[0]);\n      }\n    }\n  }\n\n}\n\nCreditCard.initClass();\nmodule.exports = {\n  CreditCard: CreditCard\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/credit_card.js"],"names":["AttributeSetter","require","CreditCardVerification","CreditCard","initClass","CardType","AmEx","CarteBlanche","ChinaUnionPay","DinersClubInternational","Discover","Elo","JCB","Laser","UKMaestro","Maestro","MasterCard","Solo","Switch","Visa","Unknown","All","all","key","hasOwnProperty","value","push","CustomerLocation","International","US","CardTypeIndicator","Yes","No","Prepaid","Commercial","Payroll","Healthcare","DurbinRegulated","Debit","CountryOfIssuance","IssuingBank","ProductId","constructor","attributes","maskedNumber","bin","last4","expirationDate","expirationMonth","expirationYear","sortedVerifications","verifications","sort","a","b","created_at","verification","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BD,eAApD;;AACA,IAAIE,sBAAsB,GAAGD,OAAO,CAAC,4BAAD,CAAP,CAAsCC,sBAAnE;;AAEA,MAAMC,UAAN,SAAyBH,eAAzB,CAAyC;AACvB,SAATI,SAAS,GAAG;AACjB,SAAKC,QAAL,GAAgB;AACdC,MAAAA,IAAI,EAAE,kBADQ;AAEdC,MAAAA,YAAY,EAAE,eAFA;AAGdC,MAAAA,aAAa,EAAE,gBAHD;AAIdC,MAAAA,uBAAuB,EAAE,aAJX;AAKdC,MAAAA,QAAQ,EAAE,UALI;AAMdC,MAAAA,GAAG,EAAE,KANS;AAOdC,MAAAA,GAAG,EAAE,KAPS;AAQdC,MAAAA,KAAK,EAAE,OARO;AASdC,MAAAA,SAAS,EAAE,YATG;AAUdC,MAAAA,OAAO,EAAE,SAVK;AAWdC,MAAAA,UAAU,EAAE,YAXE;AAYdC,MAAAA,IAAI,EAAE,MAZQ;AAadC,MAAAA,MAAM,EAAE,QAbM;AAcdC,MAAAA,IAAI,EAAE,MAdQ;AAedC,MAAAA,OAAO,EAAE,SAfK;;AAgBdC,MAAAA,GAAG,GAAG;AACJ,YAAIC,GAAG,GAAG,EAAV;;AAEA,aAAK,IAAIC,GAAT,IAAgB,IAAhB,EAAsB;AACpB,cAAI,CAAC,KAAKC,cAAL,CAAoBD,GAApB,CAAL,EAA+B;AAC7B;AACD;;AACD,cAAIE,KAAK,GAAG,KAAKF,GAAL,CAAZ;;AAEA,cAAIA,GAAG,KAAK,KAAZ,EAAmB;AAAED,YAAAA,GAAG,CAACI,IAAJ,CAASD,KAAT;AAAkB;AACxC;;AAED,eAAOH,GAAP;AACD;;AA7Ba,KAAhB;AAgCA,SAAKK,gBAAL,GAAwB;AACtBC,MAAAA,aAAa,EAAE,eADO;AAEtBC,MAAAA,EAAE,EAAE;AAFkB,KAAxB;AAKA,SAAKC,iBAAL,GAAyB;AACvBC,MAAAA,GAAG,EAAE,KADkB;AAEvBC,MAAAA,EAAE,EAAE,IAFmB;AAGvBZ,MAAAA,OAAO,EAAE;AAHc,KAAzB;AAMA,SAAKa,OAAL,GAAe,KAAKC,UAAL,GAAkB,KAAKC,OAAL,GAAe,KAAKC,UAAL,GAAkB,KAAKC,eAAL,GAChE,KAAKC,KAAL,GAAa,KAAKC,iBAAL,GAAyB,KAAKC,WAAL,GAAmB,KAAKC,SAAL,GAAiB,KAAKX,iBADjF;AAED;;AAEDY,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,UAAMA,UAAN;AACA,SAAKC,YAAL,GAAqB,GAAE,KAAKC,GAAI,SAAQ,KAAKC,KAAM,EAAnD;AACA,SAAKC,cAAL,GAAuB,GAAE,KAAKC,eAAgB,IAAG,KAAKC,cAAe,EAArE;;AACA,QAAIN,UAAJ,EAAgB;AACd,UAAIO,mBAAmB,GAAG,CAACP,UAAU,CAACQ,aAAX,IAA4B,EAA7B,EAAiCC,IAAjC,CAAsC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,UAAF,GAAeF,CAAC,CAACE,UAAjE,CAA1B;;AAEA,UAAIL,mBAAmB,CAAC,CAAD,CAAvB,EAA4B;AAAE,aAAKM,YAAL,GAAoB,IAAItD,sBAAJ,CAA2BgD,mBAAmB,CAAC,CAAD,CAA9C,CAApB;AAAyE;AACxG;AACF;;AA1DsC;;AA4DzC/C,UAAU,CAACC,SAAX;AAEAqD,MAAM,CAACC,OAAP,GAAiB;AAACvD,EAAAA,UAAU,EAAEA;AAAb,CAAjB","sourcesContent":["'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\n\nclass CreditCard extends AttributeSetter {\n  static initClass() {\n    this.CardType = {\n      AmEx: 'American Express',\n      CarteBlanche: 'Carte Blanche',\n      ChinaUnionPay: 'China UnionPay',\n      DinersClubInternational: 'Diners Club',\n      Discover: 'Discover',\n      Elo: 'Elo',\n      JCB: 'JCB',\n      Laser: 'Laser',\n      UKMaestro: 'UK Maestro',\n      Maestro: 'Maestro',\n      MasterCard: 'MasterCard',\n      Solo: 'Solo',\n      Switch: 'Switch',\n      Visa: 'Visa',\n      Unknown: 'Unknown',\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = this[key];\n\n          if (key !== 'All') { all.push(value); }\n        }\n\n        return all;\n      }\n    };\n\n    this.CustomerLocation = {\n      International: 'international',\n      US: 'us'\n    };\n\n    this.CardTypeIndicator = {\n      Yes: 'Yes',\n      No: 'No',\n      Unknown: 'Unknown'\n    };\n\n    this.Prepaid = this.Commercial = this.Payroll = this.Healthcare = this.DurbinRegulated =\n      this.Debit = this.CountryOfIssuance = this.IssuingBank = this.ProductId = this.CardTypeIndicator;\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    this.maskedNumber = `${this.bin}******${this.last4}`;\n    this.expirationDate = `${this.expirationMonth}/${this.expirationYear}`;\n    if (attributes) {\n      let sortedVerifications = (attributes.verifications || []).sort((a, b) => b.created_at - a.created_at);\n\n      if (sortedVerifications[0]) { this.verification = new CreditCardVerification(sortedVerifications[0]); }\n    }\n  }\n}\nCreditCard.initClass();\n\nmodule.exports = {CreditCard: CreditCard};\n"]},"metadata":{},"sourceType":"script"}