{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Util = require('./util').Util;\n\nlet SettlementBatchSummary = require('./settlement_batch_summary').SettlementBatchSummary;\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass SettlementBatchSummaryGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(criteria) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/settlement_batch_summary`, {\n      settlementBatchSummary: criteria\n    }).then(this.responseHandler(criteria));\n  }\n\n  responseHandler(criteria) {\n    let handler = this.createResponseHandler('settlementBatchSummary', SettlementBatchSummary);\n    return payload => {\n      return handler(payload).then(response => {\n        return this.underscoreCustomField(criteria, response);\n      });\n    };\n  }\n\n  underscoreCustomField(criteria, response) {\n    /*\n     * The response from the gateway API uses snake_case keys and the\n     * Node SDK automatically transforms the keys to camelCase. This\n     * works for everything except for merchant defined custom fields\n     * as param values. Since these come back in the settlement batch\n     * summary response as keys in the object, the Node SDK\n     * accidentally changes them to camelCase. This function determines\n     * if the custom field passed in by the merchant is snake_case and\n     * if so, transforms the camelCased version back to the version the\n     * merchant originally passed in (snake_case).\n     */\n    if (response.success && 'groupByCustomField' in criteria) {\n      // if the custom field has no _, then no need to do transformation\n      if (criteria.groupByCustomField.indexOf('_') === -1) {\n        return response;\n      }\n\n      let camelCustomField = Util.toCamelCase(criteria.groupByCustomField);\n      /*\n       * loop through the records to add the merchant provided\n       * snake_case param to the response and remove the camelCase\n       * version that was accidentally applied in the response parsing\n       */\n\n      for (let record of response.settlementBatchSummary.records) {\n        record[criteria.groupByCustomField] = record[camelCustomField];\n        delete record[camelCustomField];\n      }\n    }\n\n    return response;\n  }\n\n}\n\nmodule.exports = {\n  SettlementBatchSummaryGateway: wrapPrototype(SettlementBatchSummaryGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/settlement_batch_summary_gateway.js"],"names":["Gateway","require","Util","SettlementBatchSummary","wrapPrototype","SettlementBatchSummaryGateway","constructor","gateway","config","generate","criteria","http","post","baseMerchantPath","settlementBatchSummary","then","responseHandler","handler","createResponseHandler","payload","response","underscoreCustomField","success","groupByCustomField","indexOf","camelCustomField","toCamelCase","record","records","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,IAA7B;;AACA,IAAIC,sBAAsB,GAAGF,OAAO,CAAC,4BAAD,CAAP,CAAsCE,sBAAnE;;AACA,IAAIC,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCG,aAAvD;;AAEA,MAAMC,6BAAN,SAA4CL,OAA5C,CAAoD;AAClDM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,QAAQ,CAACC,QAAD,EAAW;AACjB,WAAO,KAAKH,OAAL,CAAaI,IAAb,CAAkBC,IAAlB,CAAwB,GAAE,KAAKJ,MAAL,CAAYK,gBAAZ,EAA+B,2BAAzD,EAAqF;AAC1FC,MAAAA,sBAAsB,EAAEJ;AADkE,KAArF,EAEJK,IAFI,CAEC,KAAKC,eAAL,CAAqBN,QAArB,CAFD,CAAP;AAGD;;AAEDM,EAAAA,eAAe,CAACN,QAAD,EAAW;AACxB,QAAIO,OAAO,GAAG,KAAKC,qBAAL,CAA2B,wBAA3B,EAAqDf,sBAArD,CAAd;AAEA,WAAQgB,OAAD,IAAa;AAClB,aAAOF,OAAO,CAACE,OAAD,CAAP,CAAiBJ,IAAjB,CAAuBK,QAAD,IAAc;AACzC,eAAO,KAAKC,qBAAL,CAA2BX,QAA3B,EAAqCU,QAArC,CAAP;AACD,OAFM,CAAP;AAGD,KAJD;AAKD;;AAEDC,EAAAA,qBAAqB,CAACX,QAAD,EAAWU,QAAX,EAAqB;AACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAIA,QAAQ,CAACE,OAAT,IAAoB,wBAAwBZ,QAAhD,EAA0D;AACxD;AACA,UAAIA,QAAQ,CAACa,kBAAT,CAA4BC,OAA5B,CAAoC,GAApC,MAA6C,CAAC,CAAlD,EAAqD;AACnD,eAAOJ,QAAP;AACD;;AAED,UAAIK,gBAAgB,GAAGvB,IAAI,CAACwB,WAAL,CAAiBhB,QAAQ,CAACa,kBAA1B,CAAvB;AAEA;AACN;AACA;AACA;AACA;;AACM,WAAK,IAAII,MAAT,IAAmBP,QAAQ,CAACN,sBAAT,CAAgCc,OAAnD,EAA4D;AAC1DD,QAAAA,MAAM,CAACjB,QAAQ,CAACa,kBAAV,CAAN,GAAsCI,MAAM,CAACF,gBAAD,CAA5C;AACA,eAAOE,MAAM,CAACF,gBAAD,CAAb;AACD;AACF;;AAED,WAAOL,QAAP;AACD;;AAvDiD;;AA0DpDS,MAAM,CAACC,OAAP,GAAiB;AAACzB,EAAAA,6BAA6B,EAAED,aAAa,CAACC,6BAAD;AAA7C,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Util = require('./util').Util;\nlet SettlementBatchSummary = require('./settlement_batch_summary').SettlementBatchSummary;\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass SettlementBatchSummaryGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(criteria) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/settlement_batch_summary`, {\n      settlementBatchSummary: criteria\n    }).then(this.responseHandler(criteria));\n  }\n\n  responseHandler(criteria) {\n    let handler = this.createResponseHandler('settlementBatchSummary', SettlementBatchSummary);\n\n    return (payload) => {\n      return handler(payload).then((response) => {\n        return this.underscoreCustomField(criteria, response);\n      });\n    };\n  }\n\n  underscoreCustomField(criteria, response) {\n    /*\n     * The response from the gateway API uses snake_case keys and the\n     * Node SDK automatically transforms the keys to camelCase. This\n     * works for everything except for merchant defined custom fields\n     * as param values. Since these come back in the settlement batch\n     * summary response as keys in the object, the Node SDK\n     * accidentally changes them to camelCase. This function determines\n     * if the custom field passed in by the merchant is snake_case and\n     * if so, transforms the camelCased version back to the version the\n     * merchant originally passed in (snake_case).\n     */\n    if (response.success && 'groupByCustomField' in criteria) {\n      // if the custom field has no _, then no need to do transformation\n      if (criteria.groupByCustomField.indexOf('_') === -1) {\n        return response;\n      }\n\n      let camelCustomField = Util.toCamelCase(criteria.groupByCustomField);\n\n      /*\n       * loop through the records to add the merchant provided\n       * snake_case param to the response and remove the camelCase\n       * version that was accidentally applied in the response parsing\n       */\n      for (let record of response.settlementBatchSummary.records) {\n        record[criteria.groupByCustomField] = record[camelCustomField];\n        delete record[camelCustomField];\n      }\n    }\n\n    return response;\n  }\n}\n\nmodule.exports = {SettlementBatchSummaryGateway: wrapPrototype(SettlementBatchSummaryGateway)};\n"]},"metadata":{},"sourceType":"script"}