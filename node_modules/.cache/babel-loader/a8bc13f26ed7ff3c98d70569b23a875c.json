{"ast":null,"code":"'use strict';\n\nconst {\n  Readable\n} = require('stream');\n\nclass PaginatedResponseStream extends Readable {\n  constructor(paginatedResponse, options) {\n    super({\n      objectMode: true\n    });\n    options = options || {};\n    this.paginatedResponse = paginatedResponse;\n    this.pageSize = 0;\n    this.currentPage = 0;\n    this.index = 0;\n    this.totalItems = 0;\n    this.items = [];\n    this.search = options.search;\n  }\n\n  nextItem() {\n    if (this.currentPage === 0 || this.index % this.pageSize === 0 && this.index < this.totalItems) {\n      let callback = (err, totalItems, pageSize, items) => {\n        if (err) {\n          this.emit('error', err);\n          return;\n        }\n\n        this.totalItems = totalItems;\n        this.pageSize = pageSize;\n        this.items = items;\n        this.index++;\n        this.push(this.items.shift());\n      };\n\n      this.currentPage++;\n\n      if (this.search) {\n        this.paginatedResponse.pagingFunction(this.currentPage, this.search, callback);\n      } else {\n        this.paginatedResponse.pagingFunction(this.currentPage, callback);\n      }\n    } else if (this.index >= this.totalItems) {\n      this.push(null);\n    } else {\n      this.index++;\n      this.push(this.items.shift());\n    }\n  }\n\n  ready() {\n    this.readyToStart = true;\n    this.emit('ready');\n  }\n\n  _read() {\n    if (this.readyToStart) {\n      this.nextItem();\n    } else {\n      this.on('ready', () => this.nextItem());\n    }\n  }\n\n}\n\nmodule.exports = {\n  PaginatedResponseStream\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/paginated_response_stream.js"],"names":["Readable","require","PaginatedResponseStream","constructor","paginatedResponse","options","objectMode","pageSize","currentPage","index","totalItems","items","search","nextItem","callback","err","emit","push","shift","pagingFunction","ready","readyToStart","_read","on","module","exports"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA;AAAD,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEA,MAAMC,uBAAN,SAAsCF,QAAtC,CAA+C;AAC7CG,EAAAA,WAAW,CAACC,iBAAD,EAAoBC,OAApB,EAA6B;AACtC,UAAM;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAN;AAEAD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKD,iBAAL,GAAyBA,iBAAzB;AACA,SAAKG,QAAL,GAAgB,CAAhB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAcP,OAAO,CAACO,MAAtB;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,KAAKL,WAAL,KAAqB,CAArB,IAA2B,KAAKC,KAAL,GAAa,KAAKF,QAAlB,KAA+B,CAA/B,IAAoC,KAAKE,KAAL,GAAa,KAAKC,UAArF,EAAkG;AAChG,UAAII,QAAQ,GAAG,CAACC,GAAD,EAAML,UAAN,EAAkBH,QAAlB,EAA4BI,KAA5B,KAAsC;AACnD,YAAII,GAAJ,EAAS;AACP,eAAKC,IAAL,CAAU,OAAV,EAAmBD,GAAnB;AAEA;AACD;;AAED,aAAKL,UAAL,GAAkBA,UAAlB;AACA,aAAKH,QAAL,GAAgBA,QAAhB;AACA,aAAKI,KAAL,GAAaA,KAAb;AACA,aAAKF,KAAL;AACA,aAAKQ,IAAL,CAAU,KAAKN,KAAL,CAAWO,KAAX,EAAV;AACD,OAZD;;AAcA,WAAKV,WAAL;;AAEA,UAAI,KAAKI,MAAT,EAAiB;AACf,aAAKR,iBAAL,CAAuBe,cAAvB,CAAsC,KAAKX,WAA3C,EAAwD,KAAKI,MAA7D,EAAqEE,QAArE;AACD,OAFD,MAEO;AACL,aAAKV,iBAAL,CAAuBe,cAAvB,CAAsC,KAAKX,WAA3C,EAAwDM,QAAxD;AACD;AACF,KAtBD,MAsBO,IAAI,KAAKL,KAAL,IAAc,KAAKC,UAAvB,EAAmC;AACxC,WAAKO,IAAL,CAAU,IAAV;AACD,KAFM,MAEA;AACL,WAAKR,KAAL;AACA,WAAKQ,IAAL,CAAU,KAAKN,KAAL,CAAWO,KAAX,EAAV;AACD;AACF;;AAEDE,EAAAA,KAAK,GAAG;AACN,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKL,IAAL,CAAU,OAAV;AACD;;AAEDM,EAAAA,KAAK,GAAG;AACN,QAAI,KAAKD,YAAT,EAAuB;AACrB,WAAKR,QAAL;AACD,KAFD,MAEO;AACL,WAAKU,EAAL,CAAQ,OAAR,EAAiB,MAAM,KAAKV,QAAL,EAAvB;AACD;AACF;;AAzD4C;;AA4D/CW,MAAM,CAACC,OAAP,GAAiB;AAACvB,EAAAA;AAAD,CAAjB","sourcesContent":["'use strict';\nconst {Readable} = require('stream');\n\nclass PaginatedResponseStream extends Readable {\n  constructor(paginatedResponse, options) {\n    super({objectMode: true});\n\n    options = options || {};\n\n    this.paginatedResponse = paginatedResponse;\n    this.pageSize = 0;\n    this.currentPage = 0;\n    this.index = 0;\n    this.totalItems = 0;\n    this.items = [];\n    this.search = options.search;\n  }\n\n  nextItem() {\n    if (this.currentPage === 0 || (this.index % this.pageSize === 0 && this.index < this.totalItems)) {\n      let callback = (err, totalItems, pageSize, items) => {\n        if (err) {\n          this.emit('error', err);\n\n          return;\n        }\n\n        this.totalItems = totalItems;\n        this.pageSize = pageSize;\n        this.items = items;\n        this.index++;\n        this.push(this.items.shift());\n      };\n\n      this.currentPage++;\n\n      if (this.search) {\n        this.paginatedResponse.pagingFunction(this.currentPage, this.search, callback);\n      } else {\n        this.paginatedResponse.pagingFunction(this.currentPage, callback);\n      }\n    } else if (this.index >= this.totalItems) {\n      this.push(null);\n    } else {\n      this.index++;\n      this.push(this.items.shift());\n    }\n  }\n\n  ready() {\n    this.readyToStart = true;\n    this.emit('ready');\n  }\n\n  _read() {\n    if (this.readyToStart) {\n      this.nextItem();\n    } else {\n      this.on('ready', () => this.nextItem());\n    }\n  }\n}\n\nmodule.exports = {PaginatedResponseStream};\n"]},"metadata":{},"sourceType":"script"}