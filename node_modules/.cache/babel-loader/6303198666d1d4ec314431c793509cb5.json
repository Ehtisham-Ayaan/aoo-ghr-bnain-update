{"ast":null,"code":"import { saveAs } from 'file-saver';\nimport { saveLayer } from '../sketch';\nimport { myVar } from '../sketch';\nimport { jsPDF } from \"jspdf\";\nimport { marla, totalLayer } from \"../sketch\";\nimport { canvWidth, canvHeight } from \"../sketch\";\nimport rough from 'roughjs/bundled/rough.esm';\nimport 'jspdf-autotable';\nimport foundation from \"../img/1.jpg\";\nexport function HandleSave() {\n  saveLayer();\n  const canvas = document.getElementById(\"canvas\");\n  const context = canvas.getContext('2d');\n  const canvas2 = document.getElementById(\"canvas2\");\n  const ctx = canvas2.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = \"black\";\n  ctx.font = \"bold 16px Arial\";\n  ctx.fillText(\"Aoo Ghr Bnain\", canvas2.width / 2 - 17, canvas2.height / 2 + 8); // canvas.toBlob(function (blob) {\n  //     saveAs(blob, \"pretty image.png\")\n  // });\n\n  console.log(myVar.length);\n  var doc = new jsPDF('l', 'mm', [420, 297]);\n  var title = prompt(\"House Plot No.\").toString();\n  var title1 = prompt(\"Khasr No.\").toString();\n  var title2 = prompt(\"Khewat No.\").toString();\n  var title3 = prompt(\"Khatoni No.\").toString();\n  var title4 = prompt(\"Town\").toString();\n  var title5 = prompt(\"Address\").toString();\n  var title6 = prompt(\"Owner\").toString();\n  var title7 = prompt(\"S/O or D/O or W/O\").toString();\n  var north = prompt(\"North... Only Enter U for upper, L for lower, R for right, Le for left\").toString();\n  var title8 = \"Scale : 1\\\" = 15.32 ... This is computer generated Scale. Don't worry about it.\";\n  doc.setFont(\"san-serif\", 'bold');\n  doc.setFont(\"san-serif\", 'underline');\n  doc.text(\"PROPOSED PLAN OF HOUSE PLOT NO. \" + title + \"\\n\" + \"KHASR NO. \" + title1 + \"\\n\" + \"KHEWAT NO. \" + title2 + \"        KHATONI NO. \" + title3 + \"\\n\" + title4 + \"\\n\" + title5 + \"\\n\" + title6 + \"\\n\" + \"S/O OR D/O OR W/O \" + title7 + \"\\n\" + title8 + \"\\n\", 10, 10);\n\n  if (north == \"U\") {\n    doc.setFont(\"san-serif\", 'bold', '25');\n    doc.text(\" ^ North is Up ^ \", 50, 70);\n  } else if (north == \"L\") {\n    doc.setFont(\"san-serif\", 'bold', '25');\n    doc.text(\" __ North is Down __ \", 50, 70);\n  } else if (north == \"R\") {\n    doc.setFont(\"san-serif\", 'bold', '25');\n    doc.text(\"North is Right  -->\", 50, 70);\n  } else if (north == \"Le\") {\n    doc.setFont(\"san-serif\", 'bold', '25');\n    doc.text(\"<-- North is Left\", 50, 70);\n  }\n\n  let estimatess1totall = 0;\n  let estimatess2totall = 0;\n\n  for (var k = 0; k < myVar.length; k++) {\n    var Data = myVar[k]; // for(var m = 0; m < Data.length; m++) {\n    // ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.beginPath();\n    ctx.rect(0, 0, canvas2.width, canvas2.height);\n    ctx.stroke();\n    const roughCanvas2 = rough.canvas(canvas2);\n    Data.forEach(({\n      roughElement\n    }) => roughCanvas2.draw(roughElement));\n    var imgData = canvas2.toDataURL('image/png');\n    doc.addImage(imgData, 'PNG', 10, 80);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    doc.addPage();\n    canvas2.toBlob(function (blob) {\n      saveAs(blob, \"pretty image.png\");\n    });\n\n    for (var m = 0; m < Data.length; m++) {\n      estimatess1totall = estimatess1totall + Math.abs(Data[m].x2 - Data[m].x1) / 15.36;\n      estimatess2totall = estimatess2totall + Math.abs(Data[m].y2 - Data[m].y1) / 15.36;\n    }\n  }\n\n  var myWid = (canvWidth / 15.36).toString();\n  var myHt = (canvHeight / 15.36).toString(); // const roughCanvas2 = rough.canvas(canvas2);\n  // elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n  // var imgData =  canvas2.toDataURL(\n  //     'image/png');          \n  // doc.addImage(imgData, 'PNG', 10, 10);\n\n  var covered = estimatess2totall * estimatess1totall;\n  var floor = totalLayer + 1;\n  var total = parseInt(myWid) * parseInt(myHt) * floor;\n  doc.text(\"Area Detail (As you have created \" + floor + \" Floors. The total area will be calculated as ...)\", 10, 10);\n\n  if (total - covered < 0) {\n    var body = [[\"You\", \"Have Created\", \"Maximum\"]];\n  } else {\n    var body = [[covered, total - covered, total]];\n  }\n\n  doc.autoTable({\n    margin: {\n      right: 200\n    },\n    head: [['Covered Area Feet', 'Open Feet', 'Total Feet']],\n    body: body\n  });\n  doc.text(\"Land : \", 250, 50);\n  var myMarla = marla.toString(); // console.log(myMarla)\n  // myWid.toString();\n  // myHt.toString();\n\n  doc.text(myMarla + \"  Marla \" + myWid + \" * \" + myHt + \" Feet \", 270, 50); //   doc.autoTable({\n  //     margin : {\n  //       right : 100\n  //  }\t,\n  //     body: [\n  //       ['Floor', '10', 'Sweden'],\n  //       ['Castille', '10', 'Spain'],\n  //     ],\n  //   })\n\n  doc.text(\"Foundation\", 230, 210);\n  doc.addImage(foundation, 'JPEG', 230, 220, 150, 76);\n  doc.save('sample-file.pdf'); // doc.text(\"Hello world!\", 10, 10);\n  // doc.save(\"a4.pdf\");\n\n  alert(\"File Save Successfully\"); // //\n  //\n  // const writeJsonFile = require('write-json-file');\n  // const jsonFile = \"/tmp/exampleFile.json\";\n  // writeJsonFile(jsonFile,{canvas:true}).catch(err => console.log(err));\n  //\n}\n_c = HandleSave;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandleSave\");","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/src/sketchHelper/handleSave.js"],"names":["saveAs","saveLayer","myVar","jsPDF","marla","totalLayer","canvWidth","canvHeight","rough","foundation","HandleSave","canvas","document","getElementById","context","getContext","canvas2","ctx","clearRect","width","height","fillStyle","font","fillText","console","log","length","doc","title","prompt","toString","title1","title2","title3","title4","title5","title6","title7","north","title8","setFont","text","estimatess1totall","estimatess2totall","k","Data","beginPath","rect","stroke","roughCanvas2","forEach","roughElement","draw","imgData","toDataURL","addImage","addPage","toBlob","blob","m","Math","abs","x2","x1","y2","y1","myWid","myHt","covered","floor","total","parseInt","body","autoTable","margin","right","head","myMarla","save","alert"],"mappings":"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","sourcesContent":["import {saveAs} from 'file-saver';\nimport {saveLayer} from '../sketch';\nimport {myVar} from '../sketch'\nimport { jsPDF } from \"jspdf\";\nimport {marla , totalLayer} from \"../sketch\"\n\nimport {canvWidth , canvHeight} from \"../sketch\"\n\nimport rough from 'roughjs/bundled/rough.esm';\nimport 'jspdf-autotable'\nimport foundation from \"../img/1.jpg\";\n\n\n\nexport function HandleSave() {\n\n    saveLayer();\n\n    const canvas = document.getElementById(\"canvas\");\n    const context = canvas.getContext('2d');\n\n    const canvas2 = document.getElementById(\"canvas2\");\n    const ctx  = canvas2.getContext('2d');\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    ctx.fillStyle = \"black\";\n    ctx.font = \"bold 16px Arial\";\n    ctx.fillText(\"Aoo Ghr Bnain\" , (canvas2.width / 2) - 17, (canvas2.height / 2) + 8);\n\n    // canvas.toBlob(function (blob) {\n    //     saveAs(blob, \"pretty image.png\")\n\n    // });\n\n    console.log(myVar.length)\n\n    \n    var doc = new jsPDF('l', 'mm', [420, 297]);\n\n    var title = prompt(\"House Plot No.\").toString()\n    var title1 = prompt(\"Khasr No.\").toString()\n    var title2 = prompt(\"Khewat No.\").toString()\n    var title3 = prompt(\"Khatoni No.\").toString()\n    var title4 = prompt(\"Town\").toString()\n    var title5 = prompt(\"Address\").toString()\n    var title6 = prompt(\"Owner\").toString()\n    var title7 = prompt(\"S/O or D/O or W/O\").toString()\n    \n    var north = prompt(\"North... Only Enter U for upper, L for lower, R for right, Le for left\").toString()\n    \n    var title8 = \"Scale : 1\\\" = 15.32 ... This is computer generated Scale. Don't worry about it.\"\n    \n    doc.setFont(\"san-serif\", 'bold')\n    doc.setFont(\"san-serif\", 'underline')\n\n    doc.text(\"PROPOSED PLAN OF HOUSE PLOT NO. \" + title+ \"\\n\" +\"KHASR NO. \"+ title1+ \"\\n\" +\"KHEWAT NO. \"+ title2 + \"        KHATONI NO. \" +title3+ \"\\n\" + title4+ \"\\n\" + title5 + \"\\n\" + title6+ \"\\n\" +\"S/O OR D/O OR W/O \"+ title7+ \"\\n\" + title8+ \"\\n\" , 10, 10);\n    \n    if(north == \"U\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\" ^ North is Up ^ \",50, 70)\n\n    }\n    else if(north == \"L\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\" __ North is Down __ \",50, 70)\n    }\n    else if(north == \"R\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\"North is Right  -->\",50, 70)\n    }\n    else if(north == \"Le\"){\n        doc.setFont(\"san-serif\", 'bold','25')\n        doc.text(\"<-- North is Left\" ,50, 70)\n    }\n    \n   \n    \n    let estimatess1totall = 0;\n    let estimatess2totall = 0;\n\n    \n\n            for(var k = 0; k < myVar.length; k++) {\n\n                var Data = myVar[k];\n\n                // for(var m = 0; m < Data.length; m++) {\n\n                    // ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    ctx.beginPath();\n                    ctx.rect(0, 0, canvas2.width, canvas2.height);\n                    ctx.stroke();\n                \n                    const roughCanvas2 = rough.canvas(canvas2);\n                    Data.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n\n                    var imgData =  canvas2.toDataURL(\n                        'image/png');          \n                    \n                    doc.addImage(imgData, 'PNG', 10, 80);\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    doc.addPage();\n\n                    \n                    canvas2.toBlob(function (blob) {\n                        saveAs(blob, \"pretty image.png\")\n\n                    });\n                \n                    for(var m = 0; m < Data.length; m++) {\n\n                    estimatess1totall = estimatess1totall + (Math.abs((Data[m].x2-Data[m].x1))  / 15.36);\n                    estimatess2totall = estimatess2totall + (Math.abs((Data[m].y2-Data[m].y1))  / 15.36);\n\n                }\n\n            }\n\n            var myWid = (canvWidth / 15.36).toString();\n\n            var myHt = (canvHeight / 15.36).toString();\n            \n\n            // const roughCanvas2 = rough.canvas(canvas2);\n            // elements.forEach(({roughElement}) => roughCanvas2.draw(roughElement));\n\n            // var imgData =  canvas2.toDataURL(\n            //     'image/png');          \n            \n            // doc.addImage(imgData, 'PNG', 10, 10);\n\n            \n\n            var covered = estimatess2totall * estimatess1totall\n            var floor = totalLayer + 1;\n            var total = parseInt(myWid) * parseInt(myHt) * floor\n\n            doc.text(\"Area Detail (As you have created \" + floor + \" Floors. The total area will be calculated as ...)\", 10, 10)\n\n            if(total - covered < 0){\n              var body = [[\"You\" , \"Have Created\" , \"Maximum\"]]\n            }\n            else{\n\n            var body = [[covered , total - covered , total]]\n            }\n            doc.autoTable({\n              margin : {\n                right : 200\n           }\t,\n              head: [['Covered Area Feet', 'Open Feet', 'Total Feet']],\n              body: \n                body  ,\n            \n            })\n            doc.text(\"Land : \", 250, 50)\n\n            var myMarla = marla.toString()\n            \n            // console.log(myMarla)\n\n            // myWid.toString();\n            // myHt.toString();\n\n            doc.text(myMarla + \"  Marla \" + myWid + \" * \" + myHt + \" Feet \", 270, 50)\n\n          //   doc.autoTable({\n\n             \n\n          //     margin : {\n          //       right : 100\n          //  }\t,\n              \n          //     body: [\n          //       ['Floor', '10', 'Sweden'],\n          //       ['Castille', '10', 'Spain'],\n                \n          //     ],\n          //   })\n\n\n            doc.text(\"Foundation\", 230, 210)\n\n            doc.addImage(foundation, 'JPEG', 230, 220, 150, 76);\n            \n            doc.save('sample-file.pdf');\n\n\n            // doc.text(\"Hello world!\", 10, 10);\n            // doc.save(\"a4.pdf\");\n\n    alert(\"File Save Successfully\");\n    // //\n    //\n    // const writeJsonFile = require('write-json-file');\n    // const jsonFile = \"/tmp/exampleFile.json\";\n    // writeJsonFile(jsonFile,{canvas:true}).catch(err => console.log(err));\n    //\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}