{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\n\nlet PaginatedResponse = require('./paginated_response').PaginatedResponse;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass MerchantAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/merchant_accounts/create_via_api`, {\n      merchantAccount: attributes\n    }).then(this.responseHandler());\n  }\n\n  update(id, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/merchant_accounts/${id}/update_via_api`, {\n      merchantAccount: attributes\n    }).then(this.responseHandler());\n  }\n\n  find(id) {\n    if (id.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/merchant_accounts/${id}`).then(function (response) {\n      return new MerchantAccount(response.merchantAccount);\n    });\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('merchantAccount', MerchantAccount);\n  }\n\n  all(callback) {\n    let response = new PaginatedResponse(this.fetchMerchantAccounts.bind(this));\n\n    if (callback != null) {\n      return response.all(callback);\n    }\n\n    response.ready();\n    return response.stream;\n  }\n\n  fetchMerchantAccounts(pageNumber, callback) {\n    return this.gateway.http.get(this.config.baseMerchantPath() + '/merchant_accounts?page=' + pageNumber, (err, response) => {\n      let body, merchantAccounts, pageSize, ref, totalItems;\n\n      if (err) {\n        return callback(err);\n      }\n\n      body = response.merchantAccounts;\n      ref = response.merchantAccounts;\n      totalItems = ref.totalItems;\n      pageSize = ref.pageSize;\n      merchantAccounts = body.merchantAccount;\n\n      if (!Array.isArray(merchantAccounts)) {\n        merchantAccounts = [merchantAccounts];\n      }\n\n      return callback(null, totalItems, pageSize, merchantAccounts);\n    });\n  }\n\n  createForCurrency(attributes) {\n    return this.gateway.http.post(this.config.baseMerchantPath() + '/merchant_accounts/create_for_currency', {\n      merchantAccount: attributes\n    }).then(this.createForCurrencyResponseHandler());\n  }\n\n  createForCurrencyResponseHandler() {\n    let handler = this.createResponseHandler(null, null);\n    return function (payload) {\n      return handler(payload).then(response => {\n        if (response.success) {\n          response.merchantAccount = new MerchantAccount(response.response.merchantAccount);\n          delete response.response;\n        }\n\n        return response;\n      });\n    };\n  }\n\n}\n\nmodule.exports = {\n  MerchantAccountGateway: wrapPrototype(MerchantAccountGateway, {\n    ignoreMethods: ['all', 'fetchMerchantAccounts']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/merchant_account_gateway.js"],"names":["Gateway","require","MerchantAccount","PaginatedResponse","exceptions","wrapPrototype","MerchantAccountGateway","constructor","gateway","config","create","attributes","http","post","baseMerchantPath","merchantAccount","then","responseHandler","update","id","put","find","trim","Promise","reject","NotFoundError","get","response","createResponseHandler","all","callback","fetchMerchantAccounts","bind","ready","stream","pageNumber","err","body","merchantAccounts","pageSize","ref","totalItems","Array","isArray","createForCurrency","createForCurrencyResponseHandler","handler","payload","success","module","exports","ignoreMethods"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\nlet PaginatedResponse = require('./paginated_response').PaginatedResponse;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass MerchantAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/merchant_accounts/create_via_api`, {merchantAccount: attributes}).then(this.responseHandler());\n  }\n\n  update(id, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/merchant_accounts/${id}/update_via_api`, {merchantAccount: attributes}).then(this.responseHandler());\n  }\n\n  find(id) {\n    if (id.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/merchant_accounts/${id}`).then(function (response) {\n      return new MerchantAccount(response.merchantAccount);\n    });\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('merchantAccount', MerchantAccount);\n  }\n\n  all(callback) {\n    let response = new PaginatedResponse(this.fetchMerchantAccounts.bind(this));\n\n    if (callback != null) {\n      return response.all(callback);\n    }\n\n    response.ready();\n\n    return response.stream;\n  }\n\n  fetchMerchantAccounts(pageNumber, callback) {\n    return this.gateway.http.get(this.config.baseMerchantPath() + '/merchant_accounts?page=' + pageNumber, (err, response) => {\n      let body, merchantAccounts, pageSize, ref, totalItems;\n\n      if (err) {\n        return callback(err);\n      }\n\n      body = response.merchantAccounts;\n      ref = response.merchantAccounts;\n      totalItems = ref.totalItems;\n      pageSize = ref.pageSize;\n      merchantAccounts = body.merchantAccount;\n      if (!Array.isArray(merchantAccounts)) {\n        merchantAccounts = [merchantAccounts];\n      }\n\n      return callback(null, totalItems, pageSize, merchantAccounts);\n    });\n  }\n\n  createForCurrency(attributes) {\n    return this.gateway.http.post(this.config.baseMerchantPath() + '/merchant_accounts/create_for_currency', {\n      merchantAccount: attributes\n    }).then(this.createForCurrencyResponseHandler());\n  }\n\n  createForCurrencyResponseHandler() {\n    let handler = this.createResponseHandler(null, null);\n\n    return function (payload) {\n      return handler(payload).then((response) => {\n        if (response.success) {\n          response.merchantAccount = new MerchantAccount(response.response.merchantAccount);\n          delete response.response;\n        }\n\n        return response;\n      });\n    };\n  }\n}\n\nmodule.exports = {MerchantAccountGateway: wrapPrototype(MerchantAccountGateway, {\n  ignoreMethods: ['all', 'fetchMerchantAccounts']\n})};\n"]},"metadata":{},"sourceType":"script"}