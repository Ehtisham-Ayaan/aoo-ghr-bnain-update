{"ast":null,"code":"'use strict';\n/* eslint-disable no-invalid-this, no-use-before-define */\n\nlet Util = require('./util').Util;\n\nfunction argsToArray(argsObject) {\n  return Array.prototype.slice.call(argsObject);\n}\n\nclass AdvancedSearch {\n  static equalityFields() {\n    let fields = argsToArray(arguments);\n    return this._createFieldAccessors(fields, EqualityNode);\n  }\n\n  static partialMatchFields() {\n    let fields = argsToArray(arguments);\n    return this._createFieldAccessors(fields, PartialMatchNode);\n  }\n\n  static endsWithFields() {\n    let fields = argsToArray(arguments);\n    return this._createFieldAccessors(fields, EndsWithNode);\n  }\n\n  static textFields() {\n    let fields = argsToArray(arguments);\n    return this._createFieldAccessors(fields, TextNode);\n  }\n\n  static keyValueFields() {\n    let fields = argsToArray(arguments);\n    return this._createFieldAccessors(fields, KeyValueNode);\n  }\n\n  static multipleValueField(field, options) {\n    options = options || {};\n    return this._createFieldAccessors([field], MultipleValueNode, options);\n  }\n\n  static multipleValueOrTextField(field, options) {\n    options = options || {};\n    return this._createFieldAccessors([field], MultipleValueOrTextNode, options);\n  }\n\n  static rangeFields() {\n    let fields = argsToArray(arguments);\n    return this._createFieldAccessors(fields, RangeNode);\n  }\n\n  static _createFieldAccessors(fields, nodeClass, options) {\n    return fields.map(field => {\n      this.prototype[field] = this._fieldTemplate(field, nodeClass, options);\n      return this.prototype[field];\n    });\n  }\n\n  static _fieldTemplate(field, NodeClass, options) {\n    return function () {\n      return new NodeClass(field, this, options);\n    };\n  }\n\n  constructor() {\n    this.criteria = {};\n  }\n\n  addCriteria(key, value) {\n    // eslint-disable-line consistent-return\n    if (this.criteria[key] === Object(this.criteria[key]) && !Array.isArray(this.criteria[key])) {\n      return Util.merge(this.criteria[key], value);\n    }\n\n    this.criteria[key] = value;\n  }\n\n  toHash() {\n    return this.criteria;\n  }\n\n}\n\nclass SearchNode {\n  static operators() {\n    let operators = argsToArray(arguments);\n\n    let operatorTemplate = operator => {\n      // eslint-disable-line func-style\n      return function (value) {\n        let criterion = {};\n        criterion[operator] = `${value}`;\n        return this.parent.addCriteria(this.nodeName, criterion);\n      };\n    };\n\n    return operators.map(operator => {\n      this.prototype[operator] = operatorTemplate(operator);\n    });\n  }\n\n  constructor(nodeName, parent) {\n    this.nodeName = nodeName;\n    this.parent = parent;\n  }\n\n}\n\nclass EqualityNode extends SearchNode {\n  static initClass() {\n    this.operators('is', 'isNot');\n  }\n\n}\n\nEqualityNode.initClass();\n\nclass PartialMatchNode extends EqualityNode {\n  static initClass() {\n    this.operators('endsWith', 'startsWith');\n  }\n\n}\n\nPartialMatchNode.initClass();\n\nclass EndsWithNode extends SearchNode {\n  static initClass() {\n    this.operators('endsWith');\n  }\n\n}\n\nEndsWithNode.initClass();\n\nclass TextNode extends PartialMatchNode {\n  static initClass() {\n    this.operators('contains');\n  }\n\n}\n\nTextNode.initClass();\n\nclass KeyValueNode extends SearchNode {\n  is(value) {\n    return this.parent.addCriteria(this.nodeName, value);\n  }\n\n}\n\nclass MultipleValueNode extends SearchNode {\n  constructor(nodeName, parent, options) {\n    super(nodeName, parent);\n    this.options = options;\n  }\n\n  allowedValues() {\n    return this.options.allows;\n  }\n\n  in() {\n    let values = argsToArray(arguments);\n    values = Util.flatten(values);\n\n    if (__guardMethod__(this, 'allowedValues', o => o.allowedValues())) {\n      let allowedValues = this.allowedValues();\n      let badValues = Util.without(values, allowedValues);\n\n      if (!Util.arrayIsEmpty(badValues)) {\n        throw new Error(`Invalid argument(s) for ${this.nodeName}`);\n      }\n    }\n\n    return this.parent.addCriteria(this.nodeName, values);\n  }\n\n  is(value) {\n    return this.in(value);\n  }\n\n}\n\nclass MultipleValueOrTextNode extends MultipleValueNode {\n  static initClass() {\n    this.delegators('contains', 'endsWith', 'is', 'isNot', 'startsWith');\n  }\n\n  static delegators() {\n    let delegatedMethods = argsToArray(arguments);\n\n    let delegatorTemplate = methodName => {\n      // eslint-disable-line func-style\n      return function (value) {\n        return this.textNode[methodName](value);\n      };\n    };\n\n    return delegatedMethods.map(methodName => {\n      this.prototype[methodName] = delegatorTemplate(methodName);\n    });\n  }\n\n  constructor(nodeName, parent, options) {\n    super(nodeName, parent, options);\n    this.textNode = new TextNode(nodeName, parent);\n  }\n\n}\n\nMultipleValueOrTextNode.initClass();\n\nclass RangeNode extends SearchNode {\n  static initClass() {\n    this.operators('is');\n  }\n\n  between(min, max) {\n    this.min(min);\n    return this.max(max);\n  }\n\n  max(value) {\n    return this.parent.addCriteria(this.nodeName, {\n      max: value\n    });\n  }\n\n  min(value) {\n    return this.parent.addCriteria(this.nodeName, {\n      min: value\n    });\n  }\n\n}\n\nRangeNode.initClass();\nmodule.exports = {\n  AdvancedSearch: AdvancedSearch\n};\n\nfunction __guardMethod__(obj, methodName, transform) {\n  // eslint-disable-line consistent-return\n  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {\n    return transform(obj, methodName);\n  }\n}","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/advanced_search.js"],"names":["Util","require","argsToArray","argsObject","Array","prototype","slice","call","AdvancedSearch","equalityFields","fields","arguments","_createFieldAccessors","EqualityNode","partialMatchFields","PartialMatchNode","endsWithFields","EndsWithNode","textFields","TextNode","keyValueFields","KeyValueNode","multipleValueField","field","options","MultipleValueNode","multipleValueOrTextField","MultipleValueOrTextNode","rangeFields","RangeNode","nodeClass","map","_fieldTemplate","NodeClass","constructor","criteria","addCriteria","key","value","Object","isArray","merge","toHash","SearchNode","operators","operatorTemplate","operator","criterion","parent","nodeName","initClass","is","allowedValues","allows","in","values","flatten","__guardMethod__","o","badValues","without","arrayIsEmpty","Error","delegators","delegatedMethods","delegatorTemplate","methodName","textNode","between","min","max","module","exports","obj","transform"],"mappings":"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","sourcesContent":["'use strict';\n\n/* eslint-disable no-invalid-this, no-use-before-define */\nlet Util = require('./util').Util;\n\nfunction argsToArray(argsObject) {\n  return Array.prototype.slice.call(argsObject);\n}\n\nclass AdvancedSearch {\n  static equalityFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, EqualityNode);\n  }\n\n  static partialMatchFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, PartialMatchNode);\n  }\n\n  static endsWithFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, EndsWithNode);\n  }\n\n  static textFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, TextNode);\n  }\n\n  static keyValueFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, KeyValueNode);\n  }\n\n  static multipleValueField(field, options) {\n    options = options || {};\n\n    return this._createFieldAccessors([field], MultipleValueNode, options);\n  }\n\n  static multipleValueOrTextField(field, options) {\n    options = options || {};\n\n    return this._createFieldAccessors([field], MultipleValueOrTextNode, options);\n  }\n\n  static rangeFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, RangeNode);\n  }\n\n  static _createFieldAccessors(fields, nodeClass, options) {\n    return fields.map((field) => {\n      this.prototype[field] = this._fieldTemplate(field, nodeClass, options);\n\n      return this.prototype[field];\n    });\n  }\n\n  static _fieldTemplate(field, NodeClass, options) {\n    return function () { return new NodeClass(field, this, options); };\n  }\n\n  constructor() { this.criteria = {}; }\n\n  addCriteria(key, value) { // eslint-disable-line consistent-return\n    if (this.criteria[key] === Object(this.criteria[key]) && !Array.isArray(this.criteria[key])) {\n      return Util.merge(this.criteria[key], value);\n    }\n\n    this.criteria[key] = value;\n  }\n\n  toHash() { return this.criteria; }\n}\n\nclass SearchNode {\n  static operators() {\n    let operators = argsToArray(arguments);\n\n    let operatorTemplate = operator => { // eslint-disable-line func-style\n      return function (value) {\n        let criterion = {};\n\n        criterion[operator] = `${value}`;\n\n        return this.parent.addCriteria(this.nodeName, criterion);\n      };\n    };\n\n    return operators.map((operator) => {\n      this.prototype[operator] = operatorTemplate(operator);\n    });\n  }\n\n  constructor(nodeName, parent) {\n    this.nodeName = nodeName;\n    this.parent = parent;\n  }\n}\n\nclass EqualityNode extends SearchNode {\n  static initClass() {\n    this.operators('is', 'isNot');\n  }\n}\nEqualityNode.initClass();\n\nclass PartialMatchNode extends EqualityNode {\n  static initClass() {\n    this.operators('endsWith', 'startsWith');\n  }\n}\nPartialMatchNode.initClass();\n\nclass EndsWithNode extends SearchNode {\n  static initClass() {\n    this.operators('endsWith');\n  }\n}\nEndsWithNode.initClass();\n\nclass TextNode extends PartialMatchNode {\n  static initClass() {\n    this.operators('contains');\n  }\n}\nTextNode.initClass();\n\nclass KeyValueNode extends SearchNode {\n  is(value) { return this.parent.addCriteria(this.nodeName, value); }\n}\n\nclass MultipleValueNode extends SearchNode {\n  constructor(nodeName, parent, options) {\n    super(nodeName, parent);\n    this.options = options;\n  }\n\n  allowedValues() { return this.options.allows; }\n\n  in() {\n    let values = argsToArray(arguments);\n\n    values = Util.flatten(values);\n\n    if (__guardMethod__(this, 'allowedValues', o => o.allowedValues())) {\n      let allowedValues = this.allowedValues();\n      let badValues = Util.without(values, allowedValues);\n\n      if (!Util.arrayIsEmpty(badValues)) { throw new Error(`Invalid argument(s) for ${this.nodeName}`); }\n    }\n\n    return this.parent.addCriteria(this.nodeName, values);\n  }\n\n  is(value) { return this.in(value); }\n}\n\nclass MultipleValueOrTextNode extends MultipleValueNode {\n  static initClass() {\n    this.delegators('contains', 'endsWith', 'is', 'isNot', 'startsWith');\n  }\n\n  static delegators() {\n    let delegatedMethods = argsToArray(arguments);\n    let delegatorTemplate = methodName => { // eslint-disable-line func-style\n      return function (value) { return this.textNode[methodName](value); };\n    };\n\n    return delegatedMethods.map((methodName) => {\n      this.prototype[methodName] = delegatorTemplate(methodName);\n    });\n  }\n\n  constructor(nodeName, parent, options) {\n    super(nodeName, parent, options);\n    this.textNode = new TextNode(nodeName, parent);\n  }\n}\nMultipleValueOrTextNode.initClass();\n\nclass RangeNode extends SearchNode {\n  static initClass() {\n    this.operators('is');\n  }\n\n  between(min, max) {\n    this.min(min);\n\n    return this.max(max);\n  }\n\n  max(value) {\n    return this.parent.addCriteria(this.nodeName, {max: value});\n  }\n\n  min(value) {\n    return this.parent.addCriteria(this.nodeName, {min: value});\n  }\n}\nRangeNode.initClass();\n\nmodule.exports = {AdvancedSearch: AdvancedSearch};\n\nfunction __guardMethod__(obj, methodName, transform) { // eslint-disable-line consistent-return\n  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {\n    return transform(obj, methodName);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}