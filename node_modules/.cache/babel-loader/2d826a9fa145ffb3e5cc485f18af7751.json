{"ast":null,"code":"import { action, setAction, elements, getElementAtPosition, mouse, selectedElement, tool, setElementWidth, setElementLength, setElementStrokeWidth } from \"../sketch\";\nimport { updateElement } from \"./updateElement\";\nexport const handleMouseMove = event => {\n  // const {clientX, clientY} = event;\n  let bounds = event.target.getBoundingClientRect();\n  mouse.x = event.pageX - bounds.left - window.scrollX; // is window.scrollX same for Y\n\n  mouse.y = event.pageY - bounds.top - window.scrollY;\n\n  if (tool === \"selection\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"move\" : \"default\";\n  }\n\n  if (tool === \"text\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"text\" : \"default\";\n  }\n\n  if (tool === \"eraser\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"move\" : \"default\";\n  }\n\n  if (tool === \"resize\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"resize\" : \"default\";\n  } // if(tool === \"rectangle\" || tool ===\"circle\" || tool ===\"wall\" || tool ===\"arcL\" ||\n  //     tool ===\"arcR\" || tool ===\"ellipse\"){\n  //\n  //     event.target.style.cursor = getCvsAtPosition(canvas.getBoundingClientRect().width , canvas.getBoundingClientRect().height, elements)\n  //         ? \"crosshair\" : \"default\";\n  // }\n\n\n  if (action === \"drawing\") {\n    const index = elements.length - 1;\n    const {\n      x1,\n      y1\n    } = elements[index];\n    updateElement(index, x1, y1, mouse.x, mouse.y, tool);\n  } else if (action === \"moving\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY\n    } = selectedElement;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY; // type.scale(mouse.x , mouse.y);\n\n    updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type);\n  } else if (action === \"eraser\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY\n    } = selectedElement;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY; // type.scale(mouse.x , mouse.y);\n\n    updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, null);\n  } else if (action === \"resize\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY\n    } = selectedElement;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY;\n    alert(\"Your previous Width was \" + width / 15.36);\n    alert(\"Your previous Width was \" + height / 15.36);\n    const newx1 = prompt(\"Your previous x1 was \" + x1 + \" Enter x1 \");\n    const newx2 = prompt(\"Your previous x2 was \" + x2 + \" Enter x2 \");\n    const newy1 = prompt(\"Your previous y1 was \" + y1 + \" Enter y1 \");\n    const newy2 = prompt(\"Your previous y2 was \" + y2 + \" Enter y2 \"); // type.scale(mouse.x , mouse.y);\n\n    if (newx1 && newx2 && newy1 && newy2) {\n      updateElement(id, newx1, newy1, newx2, newy2, type);\n    } else {\n      updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type);\n    }\n\n    setAction(\"selection\");\n  } else if (action === \"sizes\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY,\n      strokeWidth\n    } = selectedElement;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY; // type.scale(mouse.x , mouse.y);\n\n    setElementWidth(width);\n    setElementLength(height); // console.log(selectedElement)\n\n    setElementStrokeWidth(selectedElement.roughElement.options.strokeWidth);\n  }\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/src/sketchHelper/handleMouseMove.js"],"names":["action","setAction","elements","getElementAtPosition","mouse","selectedElement","tool","setElementWidth","setElementLength","setElementStrokeWidth","updateElement","handleMouseMove","event","bounds","target","getBoundingClientRect","x","pageX","left","window","scrollX","y","pageY","top","scrollY","style","cursor","index","length","x1","y1","id","x2","y2","type","offsetX","offsetY","width","height","nexX1","nexY1","alert","newx1","prompt","newx2","newy1","newy2","strokeWidth","roughElement","options"],"mappings":"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","sourcesContent":["import {action, \n        setAction ,\n        elements, \n        getElementAtPosition, \n        mouse, \n        selectedElement, \n        tool,\n        setElementWidth , \n        setElementLength ,\n        setElementStrokeWidth } from \"../sketch\";\nimport {updateElement} from \"./updateElement\";\n\nexport const handleMouseMove = (event) => {\n    // const {clientX, clientY} = event;\n\n    let bounds = event.target.getBoundingClientRect();\n    mouse.x = event.pageX - bounds.left - window.scrollX;  // is window.scrollX same for Y\n    mouse.y = event.pageY - bounds.top - window.scrollY;\n\n    if(tool === \"selection\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"move\" : \"default\";\n    }\n\n    if(tool === \"text\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"text\" : \"default\";\n    }\n\n    if(tool === \"eraser\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"move\" : \"default\";\n    }\n    if(tool === \"resize\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"resize\" : \"default\";\n    }\n    // if(tool === \"rectangle\" || tool ===\"circle\" || tool ===\"wall\" || tool ===\"arcL\" ||\n    //     tool ===\"arcR\" || tool ===\"ellipse\"){\n    //\n    //     event.target.style.cursor = getCvsAtPosition(canvas.getBoundingClientRect().width , canvas.getBoundingClientRect().height, elements)\n    //         ? \"crosshair\" : \"default\";\n    // }\n\n    if(action === \"drawing\") {\n        const index = elements.length - 1;\n        const {x1,y1} = elements[index];\n        updateElement(index, x1 , y1 , mouse.x, mouse.y , tool);\n\n    }\n    else if (action === \"moving\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type);\n        \n    }\n    else if (action === \"eraser\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, null);\n    }\n\n    else if (action === \"resize\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        alert(\"Your previous Width was \" + width / 15.36)\n\n        alert(\"Your previous Width was \" + height / 15.36)\n        \n\n        const newx1 = prompt(\"Your previous x1 was \" + x1 + \" Enter x1 \")\n        const newx2 = prompt(\"Your previous x2 was \" + x2 + \" Enter x2 \")\n        const newy1 = prompt(\"Your previous y1 was \" + y1 + \" Enter y1 \")\n        const newy2 = prompt(\"Your previous y2 was \" + y2 + \" Enter y2 \")\n        // type.scale(mouse.x , mouse.y);\n\n        if(newx1 && newx2 && newy1 && newy2)\n        {\n        updateElement(id, newx1, newy1, newx2, newy2, type);\n        }\n        else{\n            updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type);\n        }\n        setAction(\"selection\")\n    }\n\n    else if (action === \"sizes\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY, strokeWidth} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        setElementWidth(width);\n        setElementLength(height); \n        \n        // console.log(selectedElement)\n        setElementStrokeWidth(selectedElement.roughElement.options.strokeWidth)\n    }\n\n};"]},"metadata":{},"sourceType":"module"}