{"ast":null,"code":"'use strict';\n\nlet Environment = require('./environment').Environment;\n\nclass CredentialsParser {\n  parseClientCredentials(clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n\n    if (!this.clientId) {\n      throw new Error('Missing clientId');\n    }\n\n    if (!this.clientSecret) {\n      throw new Error('Missing clientSecret');\n    }\n\n    if (this.clientId.indexOf('client_id') !== 0) {\n      throw new Error('Value passed for clientId is not a client id');\n    }\n\n    if (this.clientSecret.indexOf('client_secret') !== 0) {\n      throw new Error('Value passed for clientSecret is not a client secret');\n    }\n\n    let clientIdEnvironment = this.parseEnvironment(this.clientId);\n    let clientSecretEnvironment = this.parseEnvironment(this.clientSecret);\n\n    if (clientIdEnvironment !== clientSecretEnvironment) {\n      throw new Error(`Mismatched credential environments: clientId environment is ${clientIdEnvironment} and clientSecret environment is ${clientSecretEnvironment}`);\n    }\n\n    this.environment = clientIdEnvironment;\n    return this.environment;\n  }\n\n  parseAccessToken(accessToken) {\n    this.accessToken = accessToken;\n\n    if (!this.accessToken) {\n      throw new Error('Missing access token');\n    }\n\n    if (this.accessToken.indexOf('access_token') !== 0) {\n      throw new Error('Value passed for accessToken is not a valid access token');\n    }\n\n    this.merchantId = this.accessToken.split('$')[2];\n    this.environment = this.parseEnvironment(this.accessToken);\n    return this.environment;\n  }\n\n  parseEnvironment(credential) {\n    let env = credential.split('$')[1];\n\n    switch (env) {\n      case 'development':\n      case 'integration':\n        return Environment.Development;\n\n      case 'qa':\n        return Environment.Qa;\n\n      case 'sandbox':\n        return Environment.Sandbox;\n\n      case 'production':\n        return Environment.Production;\n\n      default:\n        throw new Error(`Unknown environment: ${env}`);\n    }\n  }\n\n}\n\nmodule.exports = {\n  CredentialsParser: CredentialsParser\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/credentials_parser.js"],"names":["Environment","require","CredentialsParser","parseClientCredentials","clientId","clientSecret","Error","indexOf","clientIdEnvironment","parseEnvironment","clientSecretEnvironment","environment","parseAccessToken","accessToken","merchantId","split","credential","env","Development","Qa","Sandbox","Production","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,WAA3C;;AAEA,MAAME,iBAAN,CAAwB;AACtBC,EAAAA,sBAAsB,CAACC,QAAD,EAAWC,YAAX,EAAyB;AAC7C,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,YAAL,GAAoBA,YAApB;;AACA,QAAI,CAAC,KAAKD,QAAV,EAAoB;AAAE,YAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AAAsC;;AAC5D,QAAI,CAAC,KAAKD,YAAV,EAAwB;AAAE,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AAA0C;;AAEpE,QAAI,KAAKF,QAAL,CAAcG,OAAd,CAAsB,WAAtB,MAAuC,CAA3C,EAA8C;AAAE,YAAM,IAAID,KAAJ,CAAU,8CAAV,CAAN;AAAkE;;AAClH,QAAI,KAAKD,YAAL,CAAkBE,OAAlB,CAA0B,eAA1B,MAA+C,CAAnD,EAAsD;AAAE,YAAM,IAAID,KAAJ,CAAU,sDAAV,CAAN;AAA0E;;AAElI,QAAIE,mBAAmB,GAAG,KAAKC,gBAAL,CAAsB,KAAKL,QAA3B,CAA1B;AACA,QAAIM,uBAAuB,GAAG,KAAKD,gBAAL,CAAsB,KAAKJ,YAA3B,CAA9B;;AAEA,QAAIG,mBAAmB,KAAKE,uBAA5B,EAAqD;AACnD,YAAM,IAAIJ,KAAJ,CAAW,+DAA8DE,mBAAoB,oCAAmCE,uBAAwB,EAAxJ,CAAN;AACD;;AAED,SAAKC,WAAL,GAAmBH,mBAAnB;AAEA,WAAO,KAAKG,WAAZ;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,WAAD,EAAc;AAC5B,SAAKA,WAAL,GAAmBA,WAAnB;;AACA,QAAI,CAAC,KAAKA,WAAV,EAAuB;AAAE,YAAM,IAAIP,KAAJ,CAAU,sBAAV,CAAN;AAA0C;;AAEnE,QAAI,KAAKO,WAAL,CAAiBN,OAAjB,CAAyB,cAAzB,MAA6C,CAAjD,EAAoD;AAAE,YAAM,IAAID,KAAJ,CAAU,0DAAV,CAAN;AAA8E;;AAEpI,SAAKQ,UAAL,GAAkB,KAAKD,WAAL,CAAiBE,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAlB;AACA,SAAKJ,WAAL,GAAmB,KAAKF,gBAAL,CAAsB,KAAKI,WAA3B,CAAnB;AAEA,WAAO,KAAKF,WAAZ;AACD;;AAEDF,EAAAA,gBAAgB,CAACO,UAAD,EAAa;AAC3B,QAAIC,GAAG,GAAGD,UAAU,CAACD,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAV;;AAEA,YAAQE,GAAR;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AAAoB,eAAOjB,WAAW,CAACkB,WAAnB;;AACpB,WAAK,IAAL;AAAW,eAAOlB,WAAW,CAACmB,EAAnB;;AACX,WAAK,SAAL;AAAgB,eAAOnB,WAAW,CAACoB,OAAnB;;AAChB,WAAK,YAAL;AAAmB,eAAOpB,WAAW,CAACqB,UAAnB;;AACnB;AAAS,cAAM,IAAIf,KAAJ,CAAW,wBAAuBW,GAAI,EAAtC,CAAN;AANX;AAQD;;AA7CqB;;AAgDxBK,MAAM,CAACC,OAAP,GAAiB;AAACrB,EAAAA,iBAAiB,EAAEA;AAApB,CAAjB","sourcesContent":["'use strict';\n\nlet Environment = require('./environment').Environment;\n\nclass CredentialsParser {\n  parseClientCredentials(clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    if (!this.clientId) { throw new Error('Missing clientId'); }\n    if (!this.clientSecret) { throw new Error('Missing clientSecret'); }\n\n    if (this.clientId.indexOf('client_id') !== 0) { throw new Error('Value passed for clientId is not a client id'); }\n    if (this.clientSecret.indexOf('client_secret') !== 0) { throw new Error('Value passed for clientSecret is not a client secret'); }\n\n    let clientIdEnvironment = this.parseEnvironment(this.clientId);\n    let clientSecretEnvironment = this.parseEnvironment(this.clientSecret);\n\n    if (clientIdEnvironment !== clientSecretEnvironment) {\n      throw new Error(`Mismatched credential environments: clientId environment is ${clientIdEnvironment} and clientSecret environment is ${clientSecretEnvironment}`);\n    }\n\n    this.environment = clientIdEnvironment;\n\n    return this.environment;\n  }\n\n  parseAccessToken(accessToken) {\n    this.accessToken = accessToken;\n    if (!this.accessToken) { throw new Error('Missing access token'); }\n\n    if (this.accessToken.indexOf('access_token') !== 0) { throw new Error('Value passed for accessToken is not a valid access token'); }\n\n    this.merchantId = this.accessToken.split('$')[2];\n    this.environment = this.parseEnvironment(this.accessToken);\n\n    return this.environment;\n  }\n\n  parseEnvironment(credential) {\n    let env = credential.split('$')[1];\n\n    switch (env) {\n      case 'development':\n      case 'integration': return Environment.Development;\n      case 'qa': return Environment.Qa;\n      case 'sandbox': return Environment.Sandbox;\n      case 'production': return Environment.Production;\n      default: throw new Error(`Unknown environment: ${env}`);\n    }\n  }\n}\n\nmodule.exports = {CredentialsParser: CredentialsParser};\n"]},"metadata":{},"sourceType":"script"}