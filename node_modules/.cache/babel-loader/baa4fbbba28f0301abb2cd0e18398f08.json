{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Util = require('./util').Util;\n\nlet Customer = require('./customer').Customer;\n\nlet CustomerSearch = require('./customer_search').CustomerSearch;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass CustomerGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    let invalidKeysError = Util.verifyKeys(this._createSignature(), attributes);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers`, {\n      customer: attributes\n    }).then(this.responseHandler());\n  }\n\n  delete(customerId) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/customers/${customerId}`);\n  }\n\n  find(customerId, associationFilterId) {\n    let queryParams = '';\n\n    if (customerId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    if (associationFilterId) {\n      queryParams = `?association_filter_id=${associationFilterId}`;\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}${queryParams}`).then(function (response) {\n      return new Customer(response.customer);\n    });\n  }\n\n  update(customerId, attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}`, {\n      customer: attributes\n    }).then(this.responseHandler());\n  }\n\n  search(fn, callback) {\n    let search = new CustomerSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/customers/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('customer', Customer);\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'customers/advanced_search', Customer, 'customers', response => response.customers.customer);\n  }\n\n  _createSignature() {\n    return {\n      valid: ['id', 'company', 'email', 'fax', 'firstName', 'lastName', 'phone', 'website', 'deviceData', // NEXT_MAJOR_VERSION remove deviceSessionId\n      'deviceSessionId', // NEXT_MAJOR_VERSION remove fraudMerchantId\n      'fraudMerchantId', 'paymentMethodNonce', 'riskData', 'riskData[customerBrowser]', 'riskData[customerIp]', 'creditCard', 'creditCard[token]', 'creditCard[cardholderName]', 'creditCard[cvv]', 'creditCard[expirationDate]', 'creditCard[expirationMonth]', 'creditCard[expirationYear]', 'creditCard[number]', 'creditCard[paymentMethodNonce]', 'creditCard[venmoSdkPaymentMethodCode]', 'creditCard[options]', 'creditCard[threeDSecurePassThru]', 'creditCard[threeDSecurePassThru][eciFlag]', 'creditCard[threeDSecurePassThru][cavv]', 'creditCard[threeDSecurePassThru][xid]', 'creditCard[threeDSecurePassThru][threeDSecureVersion]', 'creditCard[threeDSecurePassThru][authenticationResponse]', 'creditCard[threeDSecurePassThru][directoryResponse]', 'creditCard[threeDSecurePassThru][cavvAlgorithm]', 'creditCard[threeDSecurePassThru][dsTransactionId]', 'creditCard[options][failOnDuplicatePaymentMethod]', 'creditCard[options][makeDefault]', 'creditCard[options][verificationAmount]', 'creditCard[options][verificationMerchantAccountId]', 'creditCard[options][verifyCard]', 'creditCard[options][verificationAccountType]', 'creditCard[options][venmoSdkSession]', 'creditCard[billingAddress]', 'creditCard[billingAddress][company]', 'creditCard[billingAddress][countryCodeAlpha2]', 'creditCard[billingAddress][countryCodeAlpha3]', 'creditCard[billingAddress][countryCodeNumeric]', 'creditCard[billingAddress][countryName]', 'creditCard[billingAddress][extendedAddress]', 'creditCard[billingAddress][firstName]', 'creditCard[billingAddress][lastName]', 'creditCard[billingAddress][locality]', 'creditCard[billingAddress][postalCode]', 'creditCard[billingAddress][region]', 'creditCard[billingAddress][streetAddress]', 'creditCard[billingAddress][options]', 'creditCard[billingAddress][options][updateExisting]', 'options', 'options[paypal]', 'options[paypal][payeeEmail]', 'options[paypal][orderId]', 'options[paypal][amount]', 'options[paypal][description]', 'options[paypal][shipping]', 'options[paypal][shipping][firstName]', 'options[paypal][shipping][lastName]', 'options[paypal][shipping][company]', 'options[paypal][shipping][countryName]', 'options[paypal][shipping][countryCodeAlpha2]', 'options[paypal][shipping][countryCodeAlpha3]', 'options[paypal][shipping][countryCodeNumeric]', 'options[paypal][shipping][extendedAddress]', 'options[paypal][shipping][locality]', 'options[paypal][shipping][postalCode]', 'options[paypal][shipping][region]', 'options[paypal][shipping][streetAddress]'],\n      ignore: ['customFields', 'options[paypal][customField]']\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for Customer objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for Customer objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n\n}\n\nmodule.exports = {\n  CustomerGateway: wrapPrototype(CustomerGateway, {\n    ignoreMethods: ['search']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/customer_gateway.js"],"names":["Gateway","require","Util","Customer","CustomerSearch","exceptions","wrapPrototype","CustomerGateway","constructor","gateway","config","create","attributes","invalidKeysError","verifyKeys","_createSignature","Promise","reject","_checkForDeprecatedAttributes","http","post","baseMerchantPath","customer","then","responseHandler","delete","customerId","find","associationFilterId","queryParams","trim","NotFoundError","get","response","update","put","search","fn","callback","createSearchResponse","pagingFunctionGenerator","createResponseHandler","customers","valid","ignore","deviceSessionId","console","warn","fraudMerchantId","module","exports","ignoreMethods"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Util = require('./util').Util;\nlet Customer = require('./customer').Customer;\nlet CustomerSearch = require('./customer_search').CustomerSearch;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass CustomerGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    let invalidKeysError = Util.verifyKeys(this._createSignature(), attributes);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers`, {customer: attributes}).then(this.responseHandler());\n  }\n\n  delete(customerId) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/customers/${customerId}`);\n  }\n\n  find(customerId, associationFilterId) {\n    let queryParams = '';\n\n    if (customerId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    if (associationFilterId) {\n      queryParams = `?association_filter_id=${associationFilterId}`;\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}${queryParams}`).then(function (response) {\n      return new Customer(response.customer);\n    });\n  }\n\n  update(customerId, attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}`, {customer: attributes}).then(this.responseHandler());\n  }\n\n  search(fn, callback) {\n    let search = new CustomerSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/customers/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('customer', Customer);\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'customers/advanced_search', Customer, 'customers', response => response.customers.customer);\n  }\n\n  _createSignature() {\n    return {\n      valid: [\n        'id',\n        'company',\n        'email',\n        'fax',\n        'firstName',\n        'lastName',\n        'phone',\n        'website',\n        'deviceData',\n        // NEXT_MAJOR_VERSION remove deviceSessionId\n        'deviceSessionId',\n        // NEXT_MAJOR_VERSION remove fraudMerchantId\n        'fraudMerchantId',\n        'paymentMethodNonce',\n        'riskData',\n        'riskData[customerBrowser]',\n        'riskData[customerIp]',\n        'creditCard',\n        'creditCard[token]',\n        'creditCard[cardholderName]',\n        'creditCard[cvv]',\n        'creditCard[expirationDate]',\n        'creditCard[expirationMonth]',\n        'creditCard[expirationYear]',\n        'creditCard[number]',\n        'creditCard[paymentMethodNonce]',\n        'creditCard[venmoSdkPaymentMethodCode]',\n        'creditCard[options]',\n        'creditCard[threeDSecurePassThru]',\n        'creditCard[threeDSecurePassThru][eciFlag]',\n        'creditCard[threeDSecurePassThru][cavv]',\n        'creditCard[threeDSecurePassThru][xid]',\n        'creditCard[threeDSecurePassThru][threeDSecureVersion]',\n        'creditCard[threeDSecurePassThru][authenticationResponse]',\n        'creditCard[threeDSecurePassThru][directoryResponse]',\n        'creditCard[threeDSecurePassThru][cavvAlgorithm]',\n        'creditCard[threeDSecurePassThru][dsTransactionId]',\n        'creditCard[options][failOnDuplicatePaymentMethod]',\n        'creditCard[options][makeDefault]',\n        'creditCard[options][verificationAmount]',\n        'creditCard[options][verificationMerchantAccountId]',\n        'creditCard[options][verifyCard]',\n        'creditCard[options][verificationAccountType]',\n        'creditCard[options][venmoSdkSession]',\n        'creditCard[billingAddress]',\n        'creditCard[billingAddress][company]',\n        'creditCard[billingAddress][countryCodeAlpha2]',\n        'creditCard[billingAddress][countryCodeAlpha3]',\n        'creditCard[billingAddress][countryCodeNumeric]',\n        'creditCard[billingAddress][countryName]',\n        'creditCard[billingAddress][extendedAddress]',\n        'creditCard[billingAddress][firstName]',\n        'creditCard[billingAddress][lastName]',\n        'creditCard[billingAddress][locality]',\n        'creditCard[billingAddress][postalCode]',\n        'creditCard[billingAddress][region]',\n        'creditCard[billingAddress][streetAddress]',\n        'creditCard[billingAddress][options]',\n        'creditCard[billingAddress][options][updateExisting]',\n        'options',\n        'options[paypal]',\n        'options[paypal][payeeEmail]',\n        'options[paypal][orderId]',\n        'options[paypal][amount]',\n        'options[paypal][description]',\n        'options[paypal][shipping]',\n        'options[paypal][shipping][firstName]',\n        'options[paypal][shipping][lastName]',\n        'options[paypal][shipping][company]',\n        'options[paypal][shipping][countryName]',\n        'options[paypal][shipping][countryCodeAlpha2]',\n        'options[paypal][shipping][countryCodeAlpha3]',\n        'options[paypal][shipping][countryCodeNumeric]',\n        'options[paypal][shipping][extendedAddress]',\n        'options[paypal][shipping][locality]',\n        'options[paypal][shipping][postalCode]',\n        'options[paypal][shipping][region]',\n        'options[paypal][shipping][streetAddress]'\n      ],\n      ignore: ['customFields', 'options[paypal][customField]']\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for Customer objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for Customer objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n}\n\nmodule.exports = {CustomerGateway: wrapPrototype(CustomerGateway, {\n  ignoreMethods: ['search']\n})};\n"]},"metadata":{},"sourceType":"script"}