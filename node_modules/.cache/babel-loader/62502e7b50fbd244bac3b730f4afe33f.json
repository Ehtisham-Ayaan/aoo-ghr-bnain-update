{"ast":null,"code":"'use strict';\n\nlet http = require('http');\n\nlet https = require('https');\n\nlet zlib = require('zlib');\n\nlet Buffer = require('buffer').Buffer;\n\nlet fs = require('fs');\n\nlet path = require('path');\n\nlet version = require('../../package.json').version;\n\nlet xml2js = require('xml2js');\n\nlet exceptions = require('./exceptions');\n\nlet Util = require('./util').Util;\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass Http {\n  constructor(config) {\n    this.config = config;\n  }\n  /* eslint-disable new-cap */\n\n\n  checkHttpStatus(status) {\n    switch (status.toString()) {\n      case '200':\n      case '201':\n      case '422':\n        return null;\n\n      case '401':\n        return exceptions.AuthenticationError('Authentication Error');\n\n      case '403':\n        return exceptions.AuthorizationError('Authorization Error');\n\n      case '404':\n        return exceptions.NotFoundError('Not Found');\n\n      case '408':\n        return exceptions.RequestTimeoutError('Request Timeout Error');\n\n      case '426':\n        return exceptions.UpgradeRequired('Upgrade Required');\n\n      case '429':\n        return exceptions.TooManyRequestsError('Too Many Requests');\n\n      case '500':\n        return exceptions.ServerError('Server Error');\n\n      case '503':\n        return exceptions.ServiceUnavailableError('Service Unavailable Error');\n\n      case '504':\n        return exceptions.GatewayTimeoutError('Gateway Timeout Error');\n\n      default:\n        return exceptions.UnexpectedError(`Unexpected HTTP response: ${status}`);\n    }\n  }\n  /* eslint-enable new-cap */\n\n\n  delete(url) {\n    return this.httpRequest('DELETE', url, null);\n  }\n\n  get(url) {\n    return this.httpRequest('GET', url, null);\n  }\n\n  post(url, body) {\n    return this.httpRequest('POST', url, body);\n  }\n\n  postMultipart(url, body, file) {\n    return this.httpRequest('POST', url, body, file);\n  }\n\n  put(url, body) {\n    return this.httpRequest('PUT', url, body);\n  }\n\n  httpRequest(method, url, body, file, host, port, headers) {\n    let boundary, requestBody, requestAborted;\n    let client = this.config.environment.ssl ? https : http;\n    let options = {\n      host: host || this.config.environment.server,\n      port: port || this.config.environment.port,\n      method,\n      path: url,\n      headers: Object.assign({}, this._headers(), headers)\n    };\n\n    if (file) {\n      boundary = 'boundary' + Date.now();\n      requestBody = this._prepareMultipart(boundary, body, file);\n      options.headers['Content-Type'] = `multipart/form-data; boundary=${boundary}`;\n    } else if (body) {\n      if ('application/json'.match(options.headers.Accept)) {\n        requestBody = JSON.stringify(body);\n      } else {\n        requestBody = JSON.stringify(Util.convertObjectKeysToUnderscores(body));\n      }\n    }\n\n    if (requestBody) {\n      options.headers['Content-Length'] = Buffer.byteLength(requestBody).toString();\n    }\n\n    return new Promise((resolve, reject) => {\n      let theRequest = client.request(options, response => {\n        let chunks = [];\n        response.on('data', responseBody => {\n          chunks.push(responseBody);\n        });\n        response.on('end', () => {\n          let buffer = Buffer.concat(chunks);\n          let error = this.checkHttpStatus(response.statusCode);\n\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          if (buffer.length > 0) {\n            if (response.headers['content-encoding'] === 'gzip') {\n              zlib.gunzip(buffer, (gunzipError, result) => {\n                if (gunzipError) {\n                  reject(gunzipError);\n                } else {\n                  parseResponse(result.toString('utf8'), response.headers['content-type']);\n                }\n              });\n            } else {\n              parseResponse(buffer.toString('utf8'), response.headers['content-type']);\n            }\n          } else {\n            resolve();\n          }\n        });\n        response.on('error', function (err) {\n          let error = exceptions.UnexpectedError(`Unexpected response error: ${err}`); // eslint-disable-line new-cap\n\n          reject(error);\n        });\n      });\n\n      function parseResponse(responseBody, contentType) {\n        if (responseBody.match(/^\\s+$/)) {\n          resolve({});\n        } else if (contentType && contentType.match('application/xml')) {\n          xml2js.parseStringPromise(responseBody, {\n            attrkey: '@',\n            charkey: '#',\n            explicitArray: false\n          }).then(result => {\n            resolve(Util.convertNodeToObject(result));\n          }).catch(reject);\n        } else if (contentType && contentType.match('application/json')) {\n          resolve(JSON.parse(responseBody));\n        } else {\n          resolve(responseBody);\n        }\n      }\n\n      function timeoutHandler() {\n        theRequest.abort();\n        requestAborted = true;\n        let error = exceptions.UnexpectedError('Request timed out'); // eslint-disable-line new-cap\n\n        reject(error);\n      }\n\n      theRequest.setTimeout(this.config.timeout, timeoutHandler);\n      let requestSocket;\n      theRequest.on('socket', socket => {\n        requestSocket = socket;\n      });\n      theRequest.on('error', err => {\n        if (requestAborted) {\n          return;\n        }\n\n        if (this.config.timeout > 0 && requestSocket) {\n          requestSocket.removeListener('timeout', timeoutHandler);\n        }\n\n        let error = exceptions.UnexpectedError(`Unexpected request error: ${err}`); // eslint-disable-line new-cap\n\n        reject(error);\n      });\n\n      if (body) {\n        theRequest.write(requestBody);\n      }\n\n      theRequest.end();\n    });\n  }\n\n  _prepareMultipart(boundary, body, file) {\n    let requestBody = Buffer.concat([this._filePart('file', file, boundary)]);\n\n    for (const key of Object.keys(body)) {\n      let val = body[key];\n      requestBody = Buffer.concat([requestBody, this._formPart(key, val, boundary)]);\n    }\n\n    return Buffer.concat([requestBody, Buffer.from(`--${boundary}--\\r\\n\\r\\n`)]);\n  }\n\n  _partHeader(key, filename, boundary) {\n    let part = `--${boundary}`;\n    part += '\\r\\n';\n    part += `Content-Disposition: form-data; name=\"${key}\"`;\n\n    if (filename) {\n      part += `; filename=\"${filename}\"`;\n      part += '\\r\\n';\n      part += `Content-Type: ${this._filetype(filename)}`;\n    }\n\n    part += '\\r\\n\\r\\n';\n    return part;\n  }\n\n  _formPart(key, formPart, boundary) {\n    return Buffer.concat([Buffer.from(this._partHeader(key, null, boundary)), Buffer.from(formPart + '\\r\\n')]);\n  }\n\n  _filePart(key, readStream, boundary) {\n    let part = Buffer.from(this._partHeader(key, path.basename(readStream.path), boundary));\n    let fileData = fs.readFileSync(readStream.path);\n    return Buffer.concat([part, fileData, Buffer.from('\\r\\n')]);\n  }\n\n  _filetype(filename) {\n    let ext = path.extname(filename);\n\n    if (ext === '.jpeg' || ext === '.jpg') {\n      return 'image/jpeg';\n    } else if (ext === '.png') {\n      return 'image/png';\n    } else if (ext === '.pdf') {\n      return 'application/pdf';\n    }\n\n    return 'application/octet-stream';\n  }\n\n  _headers() {\n    return {\n      Authorization: this.authorizationHeader(),\n      'X-ApiVersion': this.config.apiVersion,\n      Accept: 'application/xml',\n      'Content-Type': 'application/json',\n      'User-Agent': `Braintree Node ${version}`,\n      'Accept-Encoding': 'gzip'\n    };\n  }\n\n  authorizationHeader() {\n    if (this.config.accessToken) {\n      return `Bearer ${this.config.accessToken}`;\n    } else if (this.config.clientId) {\n      return `Basic ${Buffer.from(this.config.clientId + ':' + this.config.clientSecret).toString('base64')}`;\n    }\n\n    return `Basic ${Buffer.from(this.config.publicKey + ':' + this.config.privateKey).toString('base64')}`;\n  }\n\n}\n\nmodule.exports = {\n  Http: wrapPrototype(Http)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/http.js"],"names":["http","require","https","zlib","Buffer","fs","path","version","xml2js","exceptions","Util","wrapPrototype","Http","constructor","config","checkHttpStatus","status","toString","AuthenticationError","AuthorizationError","NotFoundError","RequestTimeoutError","UpgradeRequired","TooManyRequestsError","ServerError","ServiceUnavailableError","GatewayTimeoutError","UnexpectedError","delete","url","httpRequest","get","post","body","postMultipart","file","put","method","host","port","headers","boundary","requestBody","requestAborted","client","environment","ssl","options","server","Object","assign","_headers","Date","now","_prepareMultipart","match","Accept","JSON","stringify","convertObjectKeysToUnderscores","byteLength","Promise","resolve","reject","theRequest","request","response","chunks","on","responseBody","push","buffer","concat","error","statusCode","length","gunzip","gunzipError","result","parseResponse","err","contentType","parseStringPromise","attrkey","charkey","explicitArray","then","convertNodeToObject","catch","parse","timeoutHandler","abort","setTimeout","timeout","requestSocket","socket","removeListener","write","end","_filePart","key","keys","val","_formPart","from","_partHeader","filename","part","_filetype","formPart","readStream","basename","fileData","readFileSync","ext","extname","Authorization","authorizationHeader","apiVersion","accessToken","clientId","clientSecret","publicKey","privateKey","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet http = require('http');\nlet https = require('https');\nlet zlib = require('zlib');\nlet Buffer = require('buffer').Buffer;\nlet fs = require('fs');\nlet path = require('path');\n\nlet version = require('../../package.json').version;\nlet xml2js = require('xml2js');\nlet exceptions = require('./exceptions');\nlet Util = require('./util').Util;\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass Http {\n  constructor(config) {\n    this.config = config;\n  }\n\n  /* eslint-disable new-cap */\n  checkHttpStatus(status) {\n    switch (status.toString()) {\n      case '200':\n      case '201':\n      case '422': return null;\n      case '401': return exceptions.AuthenticationError('Authentication Error');\n      case '403': return exceptions.AuthorizationError('Authorization Error');\n      case '404': return exceptions.NotFoundError('Not Found');\n      case '408': return exceptions.RequestTimeoutError('Request Timeout Error');\n      case '426': return exceptions.UpgradeRequired('Upgrade Required');\n      case '429': return exceptions.TooManyRequestsError('Too Many Requests');\n      case '500': return exceptions.ServerError('Server Error');\n      case '503': return exceptions.ServiceUnavailableError('Service Unavailable Error');\n      case '504': return exceptions.GatewayTimeoutError('Gateway Timeout Error');\n      default: return exceptions.UnexpectedError(`Unexpected HTTP response: ${status}`);\n    }\n  }\n  /* eslint-enable new-cap */\n\n  delete(url) {\n    return this.httpRequest('DELETE', url, null);\n  }\n\n  get(url) {\n    return this.httpRequest('GET', url, null);\n  }\n\n  post(url, body) {\n    return this.httpRequest('POST', url, body);\n  }\n\n  postMultipart(url, body, file) {\n    return this.httpRequest('POST', url, body, file);\n  }\n\n  put(url, body) {\n    return this.httpRequest('PUT', url, body);\n  }\n\n  httpRequest(method, url, body, file, host, port, headers) {\n    let boundary, requestBody, requestAborted;\n    let client = this.config.environment.ssl ? https : http;\n\n    let options = {\n      host: host || this.config.environment.server,\n      port: port || this.config.environment.port,\n      method,\n      path: url,\n      headers: Object.assign({}, this._headers(), headers)\n    };\n\n    if (file) {\n      boundary = 'boundary' + Date.now();\n      requestBody = this._prepareMultipart(boundary, body, file);\n      options.headers['Content-Type'] = `multipart/form-data; boundary=${boundary}`;\n    } else if (body) {\n      if ('application/json'.match(options.headers.Accept)) {\n        requestBody = JSON.stringify(body);\n      } else {\n        requestBody = JSON.stringify(Util.convertObjectKeysToUnderscores(body));\n      }\n    }\n\n    if (requestBody) {\n      options.headers['Content-Length'] = Buffer.byteLength(requestBody).toString();\n    }\n\n    return new Promise((resolve, reject) => {\n      let theRequest = client.request(options, (response) => {\n        let chunks = [];\n\n        response.on('data', (responseBody) => {\n          chunks.push(responseBody);\n        });\n\n        response.on('end', () => {\n          let buffer = Buffer.concat(chunks);\n          let error = this.checkHttpStatus(response.statusCode);\n\n          if (error) {\n            reject(error);\n\n            return;\n          }\n\n          if (buffer.length > 0) {\n            if (response.headers['content-encoding'] === 'gzip') {\n              zlib.gunzip(buffer, (gunzipError, result) => {\n                if (gunzipError) {\n                  reject(gunzipError);\n                } else {\n                  parseResponse(result.toString('utf8'), response.headers['content-type']);\n                }\n              });\n            } else {\n              parseResponse(buffer.toString('utf8'), response.headers['content-type']);\n            }\n          } else {\n            resolve();\n          }\n        });\n\n        response.on('error', function (err) {\n          let error = exceptions.UnexpectedError(`Unexpected response error: ${err}`); // eslint-disable-line new-cap\n\n          reject(error);\n        });\n      });\n\n      function parseResponse(responseBody, contentType) {\n        if (responseBody.match(/^\\s+$/)) {\n          resolve({});\n        } else if (contentType && contentType.match('application/xml')) {\n          xml2js.parseStringPromise(responseBody, {\n            attrkey: '@',\n            charkey: '#',\n            explicitArray: false\n          }).then(result => {\n            resolve(Util.convertNodeToObject(result));\n          }).catch(reject);\n        } else if (contentType && contentType.match('application/json')) {\n          resolve(JSON.parse(responseBody));\n        } else {\n          resolve(responseBody);\n        }\n      }\n\n      function timeoutHandler() {\n        theRequest.abort();\n        requestAborted = true;\n        let error = exceptions.UnexpectedError('Request timed out'); // eslint-disable-line new-cap\n\n        reject(error);\n      }\n\n      theRequest.setTimeout(this.config.timeout, timeoutHandler);\n\n      let requestSocket;\n\n      theRequest.on('socket', (socket) => {\n        requestSocket = socket;\n      });\n\n      theRequest.on('error', err => {\n        if (requestAborted) { return; }\n        if (this.config.timeout > 0 && requestSocket) {\n          requestSocket.removeListener('timeout', timeoutHandler);\n        }\n        let error = exceptions.UnexpectedError(`Unexpected request error: ${err}`); // eslint-disable-line new-cap\n\n        reject(error);\n      });\n\n      if (body) { theRequest.write(requestBody); }\n      theRequest.end();\n    });\n  }\n\n  _prepareMultipart(boundary, body, file) {\n    let requestBody = Buffer.concat([this._filePart('file', file, boundary)]);\n\n    for (const key of Object.keys(body)) {\n      let val = body[key];\n\n      requestBody = Buffer.concat([requestBody, this._formPart(key, val, boundary)]);\n    }\n\n    return Buffer.concat([requestBody, Buffer.from(`--${boundary}--\\r\\n\\r\\n`)]);\n  }\n\n  _partHeader(key, filename, boundary) {\n    let part = `--${boundary}`;\n\n    part += '\\r\\n';\n    part += `Content-Disposition: form-data; name=\"${key}\"`;\n    if (filename) {\n      part += `; filename=\"${filename}\"`;\n      part += '\\r\\n';\n      part += `Content-Type: ${this._filetype(filename)}`;\n    }\n    part += '\\r\\n\\r\\n';\n\n    return part;\n  }\n\n  _formPart(key, formPart, boundary) {\n    return Buffer.concat([Buffer.from(this._partHeader(key, null, boundary)), Buffer.from(formPart + '\\r\\n')]);\n  }\n\n  _filePart(key, readStream, boundary) {\n    let part = Buffer.from(this._partHeader(key, path.basename(readStream.path), boundary));\n    let fileData = fs.readFileSync(readStream.path);\n\n    return Buffer.concat([part, fileData, Buffer.from('\\r\\n')]);\n  }\n\n  _filetype(filename) {\n    let ext = path.extname(filename);\n\n    if (ext === '.jpeg' || ext === '.jpg') {\n      return 'image/jpeg';\n    } else if (ext === '.png') {\n      return 'image/png';\n    } else if (ext === '.pdf') {\n      return 'application/pdf';\n    }\n\n    return 'application/octet-stream';\n  }\n\n  _headers() {\n    return {\n      Authorization: this.authorizationHeader(),\n      'X-ApiVersion': this.config.apiVersion,\n      Accept: 'application/xml',\n      'Content-Type': 'application/json',\n      'User-Agent': `Braintree Node ${version}`,\n      'Accept-Encoding': 'gzip'\n    };\n  }\n\n  authorizationHeader() {\n    if (this.config.accessToken) {\n      return `Bearer ${this.config.accessToken}`;\n    } else if (this.config.clientId) {\n      return `Basic ${Buffer.from(this.config.clientId + ':' + this.config.clientSecret).toString('base64')}`;\n    }\n\n    return `Basic ${Buffer.from(this.config.publicKey + ':' + this.config.privateKey).toString('base64')}`;\n  }\n}\n\nmodule.exports = {Http: wrapPrototype(Http)};\n"]},"metadata":{},"sourceType":"script"}