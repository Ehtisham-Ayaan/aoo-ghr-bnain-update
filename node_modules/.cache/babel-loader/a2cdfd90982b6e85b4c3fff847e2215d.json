{"ast":null,"code":"'use strict';\n\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\n\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\n\nlet CreditCard = require('./credit_card').CreditCard;\n\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\n\nlet UnknownPaymentMethod = require('./unknown_payment_method').UnknownPaymentMethod;\n\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\n\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\n\nlet VenmoAccount = require('./venmo_account').VenmoAccount;\n\nlet VisaCheckoutCard = require('./visa_checkout_card').VisaCheckoutCard;\n\nlet SamsungPayCard = require('./samsung_pay_card').SamsungPayCard;\n\nclass PaymentMethodParser {\n  static parsePaymentMethod(response) {\n    if (response.creditCard) {\n      return new CreditCard(response.creditCard);\n    } else if (response.paypalAccount) {\n      return new PayPalAccount(response.paypalAccount);\n    } else if (response.applePayCard) {\n      return new ApplePayCard(response.applePayCard);\n    } else if (response.androidPayCard) {\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      return new AndroidPayCard(response.androidPayCard);\n    } else if (response.paymentMethodNonce) {\n      return new PaymentMethodNonce(response.paymentMethodNonce);\n    } else if (response.usBankAccount) {\n      return new UsBankAccount(response.usBankAccount);\n    } else if (response.venmoAccount) {\n      return new VenmoAccount(response.venmoAccount);\n    } else if (response.visaCheckoutCard) {\n      return new VisaCheckoutCard(response.visaCheckoutCard);\n    } else if (response.samsungPayCard) {\n      return new SamsungPayCard(response.samsungPayCard);\n    }\n\n    return new UnknownPaymentMethod(response);\n  }\n\n}\n\nmodule.exports = {\n  PaymentMethodParser: PaymentMethodParser\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/payment_method_parser.js"],"names":["ApplePayCard","require","AndroidPayCard","CreditCard","PayPalAccount","UnknownPaymentMethod","PaymentMethodNonce","UsBankAccount","VenmoAccount","VisaCheckoutCard","SamsungPayCard","PaymentMethodParser","parsePaymentMethod","response","creditCard","paypalAccount","applePayCard","androidPayCard","paymentMethodNonce","usBankAccount","venmoAccount","visaCheckoutCard","samsungPayCard","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,YAA/C;;AACA,IAAIE,cAAc,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAnD;;AACA,IAAIC,UAAU,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,UAA1C;;AACA,IAAIC,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAAP,CAA4BG,aAAhD;;AACA,IAAIC,oBAAoB,GAAGJ,OAAO,CAAC,0BAAD,CAAP,CAAoCI,oBAA/D;;AACA,IAAIC,kBAAkB,GAAGL,OAAO,CAAC,wBAAD,CAAP,CAAkCK,kBAA3D;;AACA,IAAIC,aAAa,GAAGN,OAAO,CAAC,mBAAD,CAAP,CAA6BM,aAAjD;;AACA,IAAIC,YAAY,GAAGP,OAAO,CAAC,iBAAD,CAAP,CAA2BO,YAA9C;;AACA,IAAIC,gBAAgB,GAAGR,OAAO,CAAC,sBAAD,CAAP,CAAgCQ,gBAAvD;;AACA,IAAIC,cAAc,GAAGT,OAAO,CAAC,oBAAD,CAAP,CAA8BS,cAAnD;;AAEA,MAAMC,mBAAN,CAA0B;AACC,SAAlBC,kBAAkB,CAACC,QAAD,EAAW;AAClC,QAAIA,QAAQ,CAACC,UAAb,EAAyB;AACvB,aAAO,IAAIX,UAAJ,CAAeU,QAAQ,CAACC,UAAxB,CAAP;AACD,KAFD,MAEO,IAAID,QAAQ,CAACE,aAAb,EAA4B;AACjC,aAAO,IAAIX,aAAJ,CAAkBS,QAAQ,CAACE,aAA3B,CAAP;AACD,KAFM,MAEA,IAAIF,QAAQ,CAACG,YAAb,EAA2B;AAChC,aAAO,IAAIhB,YAAJ,CAAiBa,QAAQ,CAACG,YAA1B,CAAP;AACD,KAFM,MAEA,IAAIH,QAAQ,CAACI,cAAb,EAA6B;AAClC;AACA,aAAO,IAAIf,cAAJ,CAAmBW,QAAQ,CAACI,cAA5B,CAAP;AACD,KAHM,MAGA,IAAIJ,QAAQ,CAACK,kBAAb,EAAiC;AACtC,aAAO,IAAIZ,kBAAJ,CAAuBO,QAAQ,CAACK,kBAAhC,CAAP;AACD,KAFM,MAEA,IAAIL,QAAQ,CAACM,aAAb,EAA4B;AACjC,aAAO,IAAIZ,aAAJ,CAAkBM,QAAQ,CAACM,aAA3B,CAAP;AACD,KAFM,MAEA,IAAIN,QAAQ,CAACO,YAAb,EAA2B;AAChC,aAAO,IAAIZ,YAAJ,CAAiBK,QAAQ,CAACO,YAA1B,CAAP;AACD,KAFM,MAEA,IAAIP,QAAQ,CAACQ,gBAAb,EAA+B;AACpC,aAAO,IAAIZ,gBAAJ,CAAqBI,QAAQ,CAACQ,gBAA9B,CAAP;AACD,KAFM,MAEA,IAAIR,QAAQ,CAACS,cAAb,EAA6B;AAClC,aAAO,IAAIZ,cAAJ,CAAmBG,QAAQ,CAACS,cAA5B,CAAP;AACD;;AAED,WAAO,IAAIjB,oBAAJ,CAAyBQ,QAAzB,CAAP;AACD;;AAxBuB;;AA2B1BU,MAAM,CAACC,OAAP,GAAiB;AAACb,EAAAA,mBAAmB,EAAEA;AAAtB,CAAjB","sourcesContent":["'use strict';\n\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\nlet CreditCard = require('./credit_card').CreditCard;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet UnknownPaymentMethod = require('./unknown_payment_method').UnknownPaymentMethod;\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\nlet VenmoAccount = require('./venmo_account').VenmoAccount;\nlet VisaCheckoutCard = require('./visa_checkout_card').VisaCheckoutCard;\nlet SamsungPayCard = require('./samsung_pay_card').SamsungPayCard;\n\nclass PaymentMethodParser {\n  static parsePaymentMethod(response) {\n    if (response.creditCard) {\n      return new CreditCard(response.creditCard);\n    } else if (response.paypalAccount) {\n      return new PayPalAccount(response.paypalAccount);\n    } else if (response.applePayCard) {\n      return new ApplePayCard(response.applePayCard);\n    } else if (response.androidPayCard) {\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      return new AndroidPayCard(response.androidPayCard);\n    } else if (response.paymentMethodNonce) {\n      return new PaymentMethodNonce(response.paymentMethodNonce);\n    } else if (response.usBankAccount) {\n      return new UsBankAccount(response.usBankAccount);\n    } else if (response.venmoAccount) {\n      return new VenmoAccount(response.venmoAccount);\n    } else if (response.visaCheckoutCard) {\n      return new VisaCheckoutCard(response.visaCheckoutCard);\n    } else if (response.samsungPayCard) {\n      return new SamsungPayCard(response.samsungPayCard);\n    }\n\n    return new UnknownPaymentMethod(response);\n  }\n}\n\nmodule.exports = {PaymentMethodParser: PaymentMethodParser};\n"]},"metadata":{},"sourceType":"script"}