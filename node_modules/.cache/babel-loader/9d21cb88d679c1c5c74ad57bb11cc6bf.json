{"ast":null,"code":"'use strict';\n\nlet AddressGateway = require('./address_gateway').AddressGateway;\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Transaction = require('./transaction').Transaction;\n\nlet TransactionSearch = require('./transaction_search').TransactionSearch;\n\nlet Util = require('./util').Util;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass TransactionGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  adjustAuthorization(transactionId, amount) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/adjust_authorization`, {\n      transaction: {\n        amount: amount\n      }\n    }).then(this.responseHandler());\n  }\n\n  cancelRelease(transactionId) {\n    let path = `${this.config.baseMerchantPath()}/transactions/${transactionId}/cancel_release`;\n    let body = {};\n    return this.gateway.http.put(path, body).then(this.responseHandler());\n  }\n\n  cloneTransaction(transactionId, attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/clone`, {\n      transactionClone: attributes\n    }).then(this.responseHandler());\n  }\n\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions`, {\n      transaction: attributes\n    }).then(this.responseHandler());\n  }\n\n  credit(attributes) {\n    attributes.type = 'credit';\n    return this.create(attributes);\n  }\n\n  find(transactionId) {\n    if (transactionId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/transactions/${transactionId}`).then(response => {\n      return new Transaction(response.transaction, this.gateway);\n    });\n  }\n\n  holdInEscrow(transactionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/hold_in_escrow`, {}).then(this.responseHandler());\n  }\n\n  refund(transactionId, options) {\n    if (typeof options === 'function') {\n      options = {};\n    } else if (typeof options !== 'object') {\n      options = {\n        amount: options\n      };\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/refund`, {\n      transaction: options\n    }).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('transaction', Transaction);\n  }\n\n  sale(attributes) {\n    let invalidKeysError;\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    attributes.type = 'sale';\n    invalidKeysError = Util.verifyKeys(this._createSignature(), attributes);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.create(attributes);\n  }\n\n  search(fn, callback) {\n    let search = new TransactionSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/transactions/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  releaseFromEscrow(transactionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/release_from_escrow`, {}).then(this.responseHandler());\n  }\n\n  submitForSettlement(transactionId, amount, options) {\n    let invalidKeysError;\n    options = options || {};\n    invalidKeysError = Util.verifyKeys(this._submitForSettlementSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/submit_for_settlement`, {\n      transaction: Object.assign({\n        amount\n      }, options)\n    }).then(this.responseHandler());\n  }\n\n  updateDetails(transactionId, options) {\n    let invalidKeysError = Util.verifyKeys(this._updateDetailsSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/update_details`, {\n      transaction: options\n    }).then(this.responseHandler());\n  }\n\n  submitForPartialSettlement(transactionId, amount, options) {\n    let invalidKeysError;\n    options = options || {};\n    invalidKeysError = Util.verifyKeys(this._submitForSettlementSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/submit_for_partial_settlement`, {\n      transaction: Object.assign({\n        amount\n      }, options)\n    }).then(this.responseHandler());\n  }\n\n  void(transactionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/void`, null).then(this.responseHandler());\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'transactions/advanced_search', Transaction, 'creditCardTransactions', response => response.creditCardTransactions.transaction);\n  }\n\n  _submitForSettlementSignature() {\n    return {\n      valid: ['descriptor[name]', 'descriptor[phone]', 'descriptor[url]', 'discountAmount', 'lineItems[commodityCode]', 'lineItems[description]', 'lineItems[discountAmount]', 'lineItems[imageUrl]', 'lineItems[itemType]', 'lineItems[kind]', 'lineItems[name]', 'lineItems[productCode]', 'lineItems[quantity]', 'lineItems[taxAmount]', 'lineItems[totalAmount]', 'lineItems[unitAmount]', 'lineItems[unitOfMeasure]', 'lineItems[unitTaxAmount]', 'lineItems[url]', 'orderId', 'purchaseOrderNumber', 'shipping[company]', 'shipping[countryCodeAlpha2]', 'shipping[countryCodeAlpha3]', 'shipping[countryCodeNumeric]', 'shipping[countryName]', 'shipping[extendedAddress]', 'shipping[firstName]', 'shipping[lastName]', 'shipping[locality]', 'shipping[postalCode]', 'shipping[region]', 'shipping[streetAddress]', 'shippingAddressId', 'shippingAmount', 'shipsFromPostalCode', 'taxAmount', 'taxExempt']\n    };\n  }\n\n  _updateDetailsSignature() {\n    return {\n      valid: ['amount', 'orderId', 'descriptor[name]', 'descriptor[phone]', 'descriptor[url]']\n    };\n  }\n\n  _createSignature() {\n    let validKeys = ['amount', 'customerId', 'merchantAccountId', 'orderId', 'channel', 'paymentMethodToken', 'purchaseOrderNumber', 'recurring', 'transactionSource', 'shippingAddressId', 'type', 'taxAmount', 'taxExempt', 'venmoSdkPaymentMethodCode', // NEXT_MAJOR_VERSION remove deviceSessionId\n    'deviceSessionId', 'serviceFeeAmount', 'deviceData', // NEXT_MAJOR_VERSION remove fraudMerchantId\n    'fraudMerchantId', 'billingAddressId', 'paymentMethodNonce', 'paymentMethodToken', 'acquirerReferenceNumber', 'threeDSecureToken', 'threeDSecureAuthenticationId', 'sharedPaymentMethodToken', 'sharedPaymentMethodNonce', 'sharedBillingAddressId', 'sharedCustomerId', 'sharedShippingAddressId', 'riskData', 'riskData[customerBrowser]', 'riskData[customerDeviceId]', 'riskData[customerIp]', 'riskData[customerLocationZip]', 'riskData[customerTenure]', 'creditCard', 'creditCard[token]', 'creditCard[cardholderName]', 'creditCard[cvv]', 'creditCard[expirationDate]', 'creditCard[expirationMonth]', 'creditCard[expirationYear]', 'creditCard[number]', 'customer', 'customer[id]', 'customer[company]', 'customer[email]', 'customer[fax]', 'customer[firstName]', 'customer[lastName]', 'customer[phone]', 'customer[website]', 'threeDSecurePassThru', 'threeDSecurePassThru[eciFlag]', 'threeDSecurePassThru[cavv]', 'threeDSecurePassThru[xid]', 'threeDSecurePassThru[threeDSecureVersion]', 'threeDSecurePassThru[authenticationResponse]', 'threeDSecurePassThru[directoryResponse]', 'threeDSecurePassThru[cavvAlgorithm]', 'threeDSecurePassThru[dsTransactionId]', 'options', 'options[credit_card][accountType]', 'options[holdInEscrow]', 'options[storeInVault]', 'options[storeInVaultOnSuccess]', 'options[submitForSettlement]', 'options[addBillingAddressToPaymentMethod]', 'options[storeShippingAddressInVault]', 'options[venmoSdkSession]', 'options[payeeId]', 'options[payeeEmail]', 'options[skipAdvancedFraudChecking]', 'options[skipAvs]', 'options[skipCvv]', 'options[paypal]', 'options[paypal][customField]', 'options[paypal][payeeId]', 'options[paypal][payeeEmail]', 'options[paypal][description]', 'options[threeDSecure]', 'options[threeDSecure][required]', 'options[amexRewards]', 'options[amexRewards][requestId]', 'options[amexRewards][points]', 'options[amexRewards][currencyAmount]', 'options[amexRewards][currencyIsoCode]', 'options[venmo]', 'options[venmo][profileId]', 'descriptor', 'descriptor[name]', 'descriptor[phone]', 'descriptor[url]', 'paypalAccount', 'paypalAccount[email]', 'paypalAccount[token]', 'paypalAccount[paypalData]', 'paypalAccount[payeeId]', 'paypalAccount[payeeEmail]', 'paypalAccount[payerId]', 'paypalAccount[paymentId]', 'productSku', 'industry', 'industry[industryType]', 'industry[data]', 'industry[data][folioNumber]', 'industry[data][checkInDate]', 'industry[data][checkOutDate]', 'industry[data][travelPackage]', 'industry[data][lodgingCheckInDate]', 'industry[data][lodgingCheckOutDate]', 'industry[data][departureDate]', 'industry[data][lodgingName]', 'industry[data][roomRate]', 'industry[data][roomTax]', 'industry[data][passengerFirstName]', 'industry[data][passengerLastName]', 'industry[data][passengerMiddleInitial]', 'industry[data][passengerTitle]', 'industry[data][issuedDate]', 'industry[data][travelAgencyName]', 'industry[data][travelAgencyCode]', 'industry[data][ticketNumber]', 'industry[data][issuingCarrierCode]', 'industry[data][customerCode]', 'industry[data][fareAmount]', 'industry[data][feeAmount]', 'industry[data][taxAmount]', 'industry[data][restrictedTicket]', 'industry[data][noShow]', 'industry[data][advancedDeposit]', 'industry[data][fireSafe]', 'industry[data][propertyPhone]', 'industry[data][legs][conjunctionTicket]', 'industry[data][legs][exchangeTicket]', 'industry[data][legs][couponNumber]', 'industry[data][legs][serviceClass]', 'industry[data][legs][carrierCode]', 'industry[data][legs][fareBasisCode]', 'industry[data][legs][flightNumber]', 'industry[data][legs][departureDate]', 'industry[data][legs][departureAirportCode]', 'industry[data][legs][departureTime]', 'industry[data][legs][arrivalAirportCode]', 'industry[data][legs][arrivalTime]', 'industry[data][legs][stopoverPermitted]', 'industry[data][legs][fareAmount]', 'industry[data][legs][feeAmount]', 'industry[data][legs][taxAmount]', 'industry[data][legs][endorsementOrRestrictions]', 'industry[data][additionalCharges][kind]', 'industry[data][additionalCharges][amount]', 'installments[count]', 'discountAmount', 'shippingAmount', 'shipsFromPostalCode', 'lineItems[quantity]', 'lineItems[name]', 'lineItems[description]', 'lineItems[kind]', 'lineItems[unitAmount]', 'lineItems[unitTaxAmount]', 'lineItems[totalAmount]', 'lineItems[discountAmount]', 'lineItems[unitOfMeasure]', 'lineItems[productCode]', 'lineItems[commodityCode]', 'lineItems[url]', 'lineItems[taxAmount]', 'applePayCard', 'applePayCard[number]', 'applePayCard[cardholderName]', 'applePayCard[cryptogram]', 'applePayCard[expirationMonth]', 'applePayCard[expirationYear]', 'applePayCard[eciIndicator]', // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n    'androidPayCard', 'androidPayCard[number]', 'androidPayCard[cryptogram]', 'androidPayCard[googleTransactionId]', 'androidPayCard[expirationMonth]', 'androidPayCard[expirationYear]', 'androidPayCard[sourceCardType]', 'androidPayCard[sourceCardLastFour]', 'androidPayCard[eciIndicator]', 'subscriptionId', 'externalVault', 'externalVault[status]', 'externalVault[previousNetworkTransactionId]', 'scaExemption'];\n    let validShippingKeys = new AddressGateway(this).sharedSignature('shipping').concat('shipping[shippingMethod]');\n    let validBillingKeys = new AddressGateway(this).sharedSignature('billing');\n    validKeys = validKeys.concat(validShippingKeys, validBillingKeys);\n    return {\n      valid: validKeys,\n      ignore: ['customFields', 'options[paypal][supplementaryData]']\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.recurring != null) {\n      console.warn('[DEPRECATED] `recurring` is a deprecated param for transaction.sale calls. Use `transactionSource` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for transaction.sale calls. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for transaction.sale calls. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n\n}\n\nmodule.exports = {\n  TransactionGateway: wrapPrototype(TransactionGateway, {\n    ignoreMethods: ['search']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/transaction_gateway.js"],"names":["AddressGateway","require","Gateway","Transaction","TransactionSearch","Util","exceptions","wrapPrototype","TransactionGateway","constructor","gateway","config","adjustAuthorization","transactionId","amount","http","put","baseMerchantPath","transaction","then","responseHandler","cancelRelease","path","body","cloneTransaction","attributes","post","transactionClone","create","credit","type","find","trim","Promise","reject","NotFoundError","get","response","holdInEscrow","refund","options","createResponseHandler","sale","invalidKeysError","_checkForDeprecatedAttributes","verifyKeys","_createSignature","search","fn","callback","createSearchResponse","pagingFunctionGenerator","releaseFromEscrow","submitForSettlement","_submitForSettlementSignature","Object","assign","updateDetails","_updateDetailsSignature","submitForPartialSettlement","void","creditCardTransactions","valid","validKeys","validShippingKeys","sharedSignature","concat","validBillingKeys","ignore","recurring","console","warn","deviceSessionId","fraudMerchantId","module","exports","ignoreMethods"],"mappings":"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","sourcesContent":["'use strict';\n\nlet AddressGateway = require('./address_gateway').AddressGateway;\nlet Gateway = require('./gateway').Gateway;\nlet Transaction = require('./transaction').Transaction;\nlet TransactionSearch = require('./transaction_search').TransactionSearch;\nlet Util = require('./util').Util;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass TransactionGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  adjustAuthorization(transactionId, amount) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/adjust_authorization`, {\n      transaction: {amount: amount}\n    }).then(this.responseHandler());\n  }\n\n  cancelRelease(transactionId) {\n    let path = `${this.config.baseMerchantPath()}/transactions/${transactionId}/cancel_release`;\n    let body = {};\n\n    return this.gateway.http.put(path, body).then(this.responseHandler());\n  }\n\n  cloneTransaction(transactionId, attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/clone`, {\n      transactionClone: attributes\n    }).then(this.responseHandler());\n  }\n\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions`, {transaction: attributes}).then(this.responseHandler());\n  }\n\n  credit(attributes) {\n    attributes.type = 'credit';\n\n    return this.create(attributes);\n  }\n\n  find(transactionId) {\n    if (transactionId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/transactions/${transactionId}`).then((response) => {\n      return new Transaction(response.transaction, this.gateway);\n    });\n  }\n\n  holdInEscrow(transactionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/hold_in_escrow`, {}).then(this.responseHandler());\n  }\n\n  refund(transactionId, options) {\n    if (typeof options === 'function') {\n      options = {};\n    } else if (typeof options !== 'object') {\n      options = {amount: options};\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/refund`, {transaction: options}).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('transaction', Transaction);\n  }\n\n  sale(attributes) {\n    let invalidKeysError;\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    attributes.type = 'sale';\n    invalidKeysError = Util.verifyKeys(this._createSignature(), attributes);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.create(attributes);\n  }\n\n  search(fn, callback) {\n    let search = new TransactionSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/transactions/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  releaseFromEscrow(transactionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/release_from_escrow`, {}).then(this.responseHandler());\n  }\n\n  submitForSettlement(transactionId, amount, options) {\n    let invalidKeysError;\n\n    options = options || {};\n\n    invalidKeysError = Util.verifyKeys(this._submitForSettlementSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/submit_for_settlement`, {\n      transaction: Object.assign({\n        amount\n      }, options)\n    }).then(this.responseHandler());\n  }\n\n  updateDetails(transactionId, options) {\n    let invalidKeysError = Util.verifyKeys(this._updateDetailsSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/update_details`, {\n      transaction: options\n    }).then(this.responseHandler());\n  }\n\n  submitForPartialSettlement(transactionId, amount, options) {\n    let invalidKeysError;\n\n    options = options || {};\n\n    invalidKeysError = Util.verifyKeys(this._submitForSettlementSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError, null);\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/submit_for_partial_settlement`, {\n      transaction: Object.assign({\n        amount\n      }, options)\n    }).then(this.responseHandler());\n  }\n\n  void(transactionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/void`, null).then(this.responseHandler());\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'transactions/advanced_search', Transaction, 'creditCardTransactions', response => response.creditCardTransactions.transaction);\n  }\n\n  _submitForSettlementSignature() {\n    return {\n      valid: [\n        'descriptor[name]',\n        'descriptor[phone]',\n        'descriptor[url]',\n        'discountAmount',\n        'lineItems[commodityCode]',\n        'lineItems[description]',\n        'lineItems[discountAmount]',\n        'lineItems[imageUrl]',\n        'lineItems[itemType]',\n        'lineItems[kind]',\n        'lineItems[name]',\n        'lineItems[productCode]',\n        'lineItems[quantity]',\n        'lineItems[taxAmount]',\n        'lineItems[totalAmount]',\n        'lineItems[unitAmount]',\n        'lineItems[unitOfMeasure]',\n        'lineItems[unitTaxAmount]',\n        'lineItems[url]',\n        'orderId',\n        'purchaseOrderNumber',\n        'shipping[company]',\n        'shipping[countryCodeAlpha2]',\n        'shipping[countryCodeAlpha3]',\n        'shipping[countryCodeNumeric]',\n        'shipping[countryName]',\n        'shipping[extendedAddress]',\n        'shipping[firstName]',\n        'shipping[lastName]',\n        'shipping[locality]',\n        'shipping[postalCode]',\n        'shipping[region]',\n        'shipping[streetAddress]',\n        'shippingAddressId',\n        'shippingAmount',\n        'shipsFromPostalCode',\n        'taxAmount',\n        'taxExempt'\n      ]\n    };\n  }\n\n  _updateDetailsSignature() {\n    return {\n      valid: ['amount', 'orderId', 'descriptor[name]', 'descriptor[phone]', 'descriptor[url]']\n    };\n  }\n\n  _createSignature() {\n    let validKeys = [\n      'amount',\n      'customerId',\n      'merchantAccountId',\n      'orderId',\n      'channel',\n      'paymentMethodToken',\n      'purchaseOrderNumber',\n      'recurring',\n      'transactionSource',\n      'shippingAddressId',\n      'type',\n      'taxAmount',\n      'taxExempt',\n      'venmoSdkPaymentMethodCode',\n      // NEXT_MAJOR_VERSION remove deviceSessionId\n      'deviceSessionId',\n      'serviceFeeAmount',\n      'deviceData',\n      // NEXT_MAJOR_VERSION remove fraudMerchantId\n      'fraudMerchantId',\n      'billingAddressId',\n      'paymentMethodNonce',\n      'paymentMethodToken',\n      'acquirerReferenceNumber',\n      'threeDSecureToken',\n      'threeDSecureAuthenticationId',\n      'sharedPaymentMethodToken',\n      'sharedPaymentMethodNonce',\n      'sharedBillingAddressId',\n      'sharedCustomerId',\n      'sharedShippingAddressId',\n      'riskData',\n      'riskData[customerBrowser]',\n      'riskData[customerDeviceId]',\n      'riskData[customerIp]',\n      'riskData[customerLocationZip]',\n      'riskData[customerTenure]',\n      'creditCard',\n      'creditCard[token]',\n      'creditCard[cardholderName]',\n      'creditCard[cvv]',\n      'creditCard[expirationDate]',\n      'creditCard[expirationMonth]',\n      'creditCard[expirationYear]',\n      'creditCard[number]',\n      'customer',\n      'customer[id]',\n      'customer[company]',\n      'customer[email]',\n      'customer[fax]',\n      'customer[firstName]',\n      'customer[lastName]',\n      'customer[phone]',\n      'customer[website]',\n      'threeDSecurePassThru',\n      'threeDSecurePassThru[eciFlag]',\n      'threeDSecurePassThru[cavv]',\n      'threeDSecurePassThru[xid]',\n      'threeDSecurePassThru[threeDSecureVersion]',\n      'threeDSecurePassThru[authenticationResponse]',\n      'threeDSecurePassThru[directoryResponse]',\n      'threeDSecurePassThru[cavvAlgorithm]',\n      'threeDSecurePassThru[dsTransactionId]',\n      'options',\n      'options[credit_card][accountType]',\n      'options[holdInEscrow]',\n      'options[storeInVault]',\n      'options[storeInVaultOnSuccess]',\n      'options[submitForSettlement]',\n      'options[addBillingAddressToPaymentMethod]',\n      'options[storeShippingAddressInVault]',\n      'options[venmoSdkSession]',\n      'options[payeeId]',\n      'options[payeeEmail]',\n      'options[skipAdvancedFraudChecking]',\n      'options[skipAvs]',\n      'options[skipCvv]',\n      'options[paypal]',\n      'options[paypal][customField]',\n      'options[paypal][payeeId]',\n      'options[paypal][payeeEmail]',\n      'options[paypal][description]',\n      'options[threeDSecure]',\n      'options[threeDSecure][required]',\n      'options[amexRewards]',\n      'options[amexRewards][requestId]',\n      'options[amexRewards][points]',\n      'options[amexRewards][currencyAmount]',\n      'options[amexRewards][currencyIsoCode]',\n      'options[venmo]',\n      'options[venmo][profileId]',\n      'descriptor',\n      'descriptor[name]',\n      'descriptor[phone]',\n      'descriptor[url]',\n      'paypalAccount',\n      'paypalAccount[email]',\n      'paypalAccount[token]',\n      'paypalAccount[paypalData]',\n      'paypalAccount[payeeId]',\n      'paypalAccount[payeeEmail]',\n      'paypalAccount[payerId]',\n      'paypalAccount[paymentId]',\n      'productSku',\n      'industry',\n      'industry[industryType]',\n      'industry[data]',\n      'industry[data][folioNumber]',\n      'industry[data][checkInDate]',\n      'industry[data][checkOutDate]',\n      'industry[data][travelPackage]',\n      'industry[data][lodgingCheckInDate]',\n      'industry[data][lodgingCheckOutDate]',\n      'industry[data][departureDate]',\n      'industry[data][lodgingName]',\n      'industry[data][roomRate]',\n      'industry[data][roomTax]',\n      'industry[data][passengerFirstName]',\n      'industry[data][passengerLastName]',\n      'industry[data][passengerMiddleInitial]',\n      'industry[data][passengerTitle]',\n      'industry[data][issuedDate]',\n      'industry[data][travelAgencyName]',\n      'industry[data][travelAgencyCode]',\n      'industry[data][ticketNumber]',\n      'industry[data][issuingCarrierCode]',\n      'industry[data][customerCode]',\n      'industry[data][fareAmount]',\n      'industry[data][feeAmount]',\n      'industry[data][taxAmount]',\n      'industry[data][restrictedTicket]',\n      'industry[data][noShow]',\n      'industry[data][advancedDeposit]',\n      'industry[data][fireSafe]',\n      'industry[data][propertyPhone]',\n      'industry[data][legs][conjunctionTicket]',\n      'industry[data][legs][exchangeTicket]',\n      'industry[data][legs][couponNumber]',\n      'industry[data][legs][serviceClass]',\n      'industry[data][legs][carrierCode]',\n      'industry[data][legs][fareBasisCode]',\n      'industry[data][legs][flightNumber]',\n      'industry[data][legs][departureDate]',\n      'industry[data][legs][departureAirportCode]',\n      'industry[data][legs][departureTime]',\n      'industry[data][legs][arrivalAirportCode]',\n      'industry[data][legs][arrivalTime]',\n      'industry[data][legs][stopoverPermitted]',\n      'industry[data][legs][fareAmount]',\n      'industry[data][legs][feeAmount]',\n      'industry[data][legs][taxAmount]',\n      'industry[data][legs][endorsementOrRestrictions]',\n      'industry[data][additionalCharges][kind]',\n      'industry[data][additionalCharges][amount]',\n      'installments[count]',\n      'discountAmount',\n      'shippingAmount',\n      'shipsFromPostalCode',\n      'lineItems[quantity]',\n      'lineItems[name]',\n      'lineItems[description]',\n      'lineItems[kind]',\n      'lineItems[unitAmount]',\n      'lineItems[unitTaxAmount]',\n      'lineItems[totalAmount]',\n      'lineItems[discountAmount]',\n      'lineItems[unitOfMeasure]',\n      'lineItems[productCode]',\n      'lineItems[commodityCode]',\n      'lineItems[url]',\n      'lineItems[taxAmount]',\n      'applePayCard',\n      'applePayCard[number]',\n      'applePayCard[cardholderName]',\n      'applePayCard[cryptogram]',\n      'applePayCard[expirationMonth]',\n      'applePayCard[expirationYear]',\n      'applePayCard[eciIndicator]',\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      'androidPayCard',\n      'androidPayCard[number]',\n      'androidPayCard[cryptogram]',\n      'androidPayCard[googleTransactionId]',\n      'androidPayCard[expirationMonth]',\n      'androidPayCard[expirationYear]',\n      'androidPayCard[sourceCardType]',\n      'androidPayCard[sourceCardLastFour]',\n      'androidPayCard[eciIndicator]',\n      'subscriptionId',\n      'externalVault',\n      'externalVault[status]',\n      'externalVault[previousNetworkTransactionId]',\n      'scaExemption'\n    ];\n\n    let validShippingKeys = new AddressGateway(this).sharedSignature('shipping').concat('shipping[shippingMethod]');\n    let validBillingKeys = new AddressGateway(this).sharedSignature('billing');\n\n    validKeys = validKeys.concat(validShippingKeys, validBillingKeys);\n\n    return {\n      valid: validKeys,\n      ignore: ['customFields', 'options[paypal][supplementaryData]']\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.recurring != null) {\n      console.warn('[DEPRECATED] `recurring` is a deprecated param for transaction.sale calls. Use `transactionSource` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for transaction.sale calls. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for transaction.sale calls. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n}\n\nmodule.exports = {TransactionGateway: wrapPrototype(TransactionGateway, {\n  ignoreMethods: ['search']\n})};\n"]},"metadata":{},"sourceType":"script"}