{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\n\nlet CreditCardVerificationSearch = require('./credit_card_verification_search').CreditCardVerificationSearch;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass CreditCardVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(creditCardVerificationId) {\n    if (creditCardVerificationId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/verifications/${creditCardVerificationId}`).then(function (response) {\n      return new CreditCardVerification(response.verification);\n    });\n  }\n\n  search(fn, callback) {\n    let search = new CreditCardVerificationSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/verifications/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  create(params) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications`, {\n      verification: params\n    }).then(this.createResponseHandler('verification', CreditCardVerification));\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('creditCardVerification', CreditCardVerification);\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n      searchCriteria.ids = ids;\n      return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications/advanced_search`, {\n        search: searchCriteria\n      }, function (err, response) {\n        if (err) {\n          return callback(err, null);\n        } else if (Array.isArray(response.creditCardVerifications.verification)) {\n          return response.creditCardVerifications.verification.map(creditCardVerification => callback(null, new CreditCardVerification(creditCardVerification)));\n        }\n\n        return callback(null, new CreditCardVerification(response.creditCardVerifications.verification));\n      });\n    };\n  }\n\n}\n\nmodule.exports = {\n  CreditCardVerificationGateway: wrapPrototype(CreditCardVerificationGateway, {\n    ignoreMethods: ['search']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/credit_card_verification_gateway.js"],"names":["Gateway","require","CreditCardVerification","CreditCardVerificationSearch","exceptions","wrapPrototype","CreditCardVerificationGateway","constructor","gateway","config","find","creditCardVerificationId","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","verification","search","fn","callback","createSearchResponse","pagingFunctionGenerator","create","params","post","createResponseHandler","responseHandler","ids","searchCriteria","toHash","err","Array","isArray","creditCardVerifications","map","creditCardVerification","module","exports","ignoreMethods"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,sBAAsB,GAAGD,OAAO,CAAC,4BAAD,CAAP,CAAsCC,sBAAnE;;AACA,IAAIC,4BAA4B,GAAGF,OAAO,CAAC,mCAAD,CAAP,CAA6CE,4BAAhF;;AACA,IAAIC,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,yBAAD,CAAP,CAAmCI,aAAvD;;AAEA,MAAMC,6BAAN,SAA4CN,OAA5C,CAAoD;AAClDO,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,IAAI,CAACC,wBAAD,EAA2B;AAC7B,QAAIA,wBAAwB,CAACC,IAAzB,OAAoC,EAAxC,EAA4C;AAC1C,aAAOC,OAAO,CAACC,MAAR,CAAeV,UAAU,CAACW,aAAX,CAAyB,WAAzB,CAAf,CAAP,CAD0C,CACoB;AAC/D;;AAED,WAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBC,GAAlB,CAAuB,GAAE,KAAKR,MAAL,CAAYS,gBAAZ,EAA+B,kBAAiBP,wBAAyB,EAAlG,EAAqGQ,IAArG,CAA0G,UAAUC,QAAV,EAAoB;AACnI,aAAO,IAAIlB,sBAAJ,CAA2BkB,QAAQ,CAACC,YAApC,CAAP;AACD,KAFM,CAAP;AAGD;;AAEDC,EAAAA,MAAM,CAACC,EAAD,EAAKC,QAAL,EAAe;AACnB,QAAIF,MAAM,GAAG,IAAInB,4BAAJ,EAAb;AAEAoB,IAAAA,EAAE,CAACD,MAAD,CAAF;AAEA,WAAO,KAAKG,oBAAL,CAA2B,GAAE,KAAKhB,MAAL,CAAYS,gBAAZ,EAA+B,oCAA5D,EAAiGI,MAAjG,EAAyG,KAAKI,uBAAL,CAA6BJ,MAA7B,CAAzG,EAA+IE,QAA/I,CAAP;AACD;;AAEDG,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,WAAO,KAAKpB,OAAL,CAAaQ,IAAb,CAAkBa,IAAlB,CAAwB,GAAE,KAAKpB,MAAL,CAAYS,gBAAZ,EAA+B,gBAAzD,EAA0E;AAC/EG,MAAAA,YAAY,EAAEO;AADiE,KAA1E,EAEJT,IAFI,CAEC,KAAKW,qBAAL,CAA2B,cAA3B,EAA2C5B,sBAA3C,CAFD,CAAP;AAGD;;AAED6B,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKD,qBAAL,CAA2B,wBAA3B,EAAqD5B,sBAArD,CAAP;AACD;;AAEDwB,EAAAA,uBAAuB,CAACJ,MAAD,EAAS;AAC9B,WAAO,CAACU,GAAD,EAAMR,QAAN,KAAmB;AACxB,UAAIS,cAAc,GAAGX,MAAM,CAACY,MAAP,EAArB;AAEAD,MAAAA,cAAc,CAACD,GAAf,GAAqBA,GAArB;AAEA,aAAO,KAAKxB,OAAL,CAAaQ,IAAb,CAAkBa,IAAlB,CAAwB,GAAE,KAAKpB,MAAL,CAAYS,gBAAZ,EAA+B,gCAAzD,EACL;AAACI,QAAAA,MAAM,EAAEW;AAAT,OADK,EAEL,UAAUE,GAAV,EAAef,QAAf,EAAyB;AACvB,YAAIe,GAAJ,EAAS;AACP,iBAAOX,QAAQ,CAACW,GAAD,EAAM,IAAN,CAAf;AACD,SAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcjB,QAAQ,CAACkB,uBAAT,CAAiCjB,YAA/C,CAAJ,EAAkE;AACvE,iBAAOD,QAAQ,CAACkB,uBAAT,CAAiCjB,YAAjC,CAA8CkB,GAA9C,CAAmDC,sBAAD,IACvDhB,QAAQ,CAAC,IAAD,EAAO,IAAItB,sBAAJ,CAA2BsC,sBAA3B,CAAP,CADH,CAAP;AAED;;AAED,eAAOhB,QAAQ,CAAC,IAAD,EAAO,IAAItB,sBAAJ,CAA2BkB,QAAQ,CAACkB,uBAAT,CAAiCjB,YAA5D,CAAP,CAAf;AACD,OAXI,CAAP;AAYD,KAjBD;AAkBD;;AAtDiD;;AAyDpDoB,MAAM,CAACC,OAAP,GAAiB;AAACpC,EAAAA,6BAA6B,EAAED,aAAa,CAACC,6BAAD,EAAgC;AAC5FqC,IAAAA,aAAa,EAAE,CAAC,QAAD;AAD6E,GAAhC;AAA7C,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\nlet CreditCardVerificationSearch = require('./credit_card_verification_search').CreditCardVerificationSearch;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass CreditCardVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(creditCardVerificationId) {\n    if (creditCardVerificationId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/verifications/${creditCardVerificationId}`).then(function (response) {\n      return new CreditCardVerification(response.verification);\n    });\n  }\n\n  search(fn, callback) {\n    let search = new CreditCardVerificationSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/verifications/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  create(params) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications`, {\n      verification: params\n    }).then(this.createResponseHandler('verification', CreditCardVerification));\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('creditCardVerification', CreditCardVerification);\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n\n      searchCriteria.ids = ids;\n\n      return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications/advanced_search`,\n        {search: searchCriteria},\n        function (err, response) {\n          if (err) {\n            return callback(err, null);\n          } else if (Array.isArray(response.creditCardVerifications.verification)) {\n            return response.creditCardVerifications.verification.map((creditCardVerification) =>\n              callback(null, new CreditCardVerification(creditCardVerification)));\n          }\n\n          return callback(null, new CreditCardVerification(response.creditCardVerifications.verification));\n        });\n    };\n  }\n}\n\nmodule.exports = {CreditCardVerificationGateway: wrapPrototype(CreditCardVerificationGateway, {\n  ignoreMethods: ['search']\n})};\n"]},"metadata":{},"sourceType":"script"}