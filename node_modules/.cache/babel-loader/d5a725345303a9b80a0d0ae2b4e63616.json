{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Subscription = require('./subscription').Subscription;\n\nlet SubscriptionSearch = require('./subscription_search').SubscriptionSearch;\n\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass SubscriptionGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/subscriptions`, {\n      subscription: attributes\n    }).then(this.responseHandler());\n  }\n\n  cancel(subscriptionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}/cancel`, null).then(this.responseHandler());\n  }\n\n  find(subscriptionId) {\n    if (subscriptionId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}`).then(response => {\n      return new Subscription(response.subscription, this.gateway);\n    });\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('subscription', Subscription);\n  }\n\n  retryCharge(subscriptionId, amount, submitForSettlement) {\n    if (typeof amount === 'function') {\n      amount = undefined; // eslint-disable-line no-undefined\n    }\n\n    if (typeof submitForSettlement === 'function') {\n      submitForSettlement = false; // eslint-disable-line no-undefined\n    }\n\n    return new TransactionGateway(this.gateway).sale({\n      amount: amount,\n      subscriptionId,\n      options: {\n        submitForSettlement: submitForSettlement\n      }\n    });\n  }\n\n  search(fn, callback) {\n    let search = new SubscriptionSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/subscriptions/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  update(subscriptionId, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}`, {\n      subscription: attributes\n    }).then(this.responseHandler());\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'subscriptions/advanced_search', Subscription, 'subscriptions', response => response.subscriptions.subscription);\n  }\n\n}\n\nmodule.exports = {\n  SubscriptionGateway: wrapPrototype(SubscriptionGateway, {\n    ignoreMethods: ['search']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/subscription_gateway.js"],"names":["Gateway","require","Subscription","SubscriptionSearch","TransactionGateway","exceptions","wrapPrototype","SubscriptionGateway","constructor","gateway","config","create","attributes","http","post","baseMerchantPath","subscription","then","responseHandler","cancel","subscriptionId","put","find","trim","Promise","reject","NotFoundError","get","response","createResponseHandler","retryCharge","amount","submitForSettlement","undefined","sale","options","search","fn","callback","createSearchResponse","pagingFunctionGenerator","update","subscriptions","module","exports","ignoreMethods"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Subscription = require('./subscription').Subscription;\nlet SubscriptionSearch = require('./subscription_search').SubscriptionSearch;\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass SubscriptionGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/subscriptions`, {subscription: attributes}).then(this.responseHandler());\n  }\n\n  cancel(subscriptionId) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}/cancel`, null).then(this.responseHandler());\n  }\n\n  find(subscriptionId) {\n    if (subscriptionId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}`).then((response) => {\n      return new Subscription(response.subscription, this.gateway);\n    });\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('subscription', Subscription);\n  }\n\n  retryCharge(subscriptionId, amount, submitForSettlement) {\n    if (typeof amount === 'function') {\n      amount = undefined; // eslint-disable-line no-undefined\n    }\n\n    if (typeof submitForSettlement === 'function') {\n      submitForSettlement = false; // eslint-disable-line no-undefined\n    }\n\n    return new TransactionGateway(this.gateway).sale({\n      amount: amount,\n      subscriptionId,\n      options: {\n        submitForSettlement: submitForSettlement\n      }\n    });\n  }\n\n  search(fn, callback) {\n    let search = new SubscriptionSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/subscriptions/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  update(subscriptionId, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}`, {subscription: attributes}).then(this.responseHandler());\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'subscriptions/advanced_search', Subscription, 'subscriptions', response => response.subscriptions.subscription);\n  }\n}\n\nmodule.exports = {SubscriptionGateway: wrapPrototype(SubscriptionGateway, {\n  ignoreMethods: ['search']\n})};\n"]},"metadata":{},"sourceType":"script"}