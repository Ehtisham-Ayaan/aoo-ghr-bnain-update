{"ast":null,"code":"'use strict';\n\nlet ErrorResponse = require('./error_response').ErrorResponse;\n\nlet SearchResponse = require('./search_response').SearchResponse;\n\nlet exceptions = require('./exceptions');\n\nclass Gateway {\n  createResponseHandler(attributeKlassMap, Klass) {\n    let gateway = this.gateway;\n    return function (response) {\n      // eslint-disable-line consistent-return\n      if (response.apiErrorResponse) {\n        return Promise.resolve(new ErrorResponse(response.apiErrorResponse, gateway));\n      }\n\n      response.success = true;\n\n      if (attributeKlassMap === null) {\n        return Promise.resolve(response);\n      } else if (typeof attributeKlassMap === 'string') {\n        let attributeName = attributeKlassMap;\n\n        if (response[attributeName]) {\n          if (Klass != null) {\n            response[attributeName] = new Klass(response[attributeName], gateway);\n          }\n        }\n\n        return Promise.resolve(response);\n      }\n\n      let unknown = true;\n\n      for (let attributeName in attributeKlassMap) {\n        if (!attributeKlassMap.hasOwnProperty(attributeName)) {\n          continue;\n        }\n\n        Klass = attributeKlassMap[attributeName];\n\n        if (response[attributeName]) {\n          unknown = false;\n\n          if (Klass != null) {\n            response[attributeName] = new Klass(response[attributeName], gateway);\n          }\n\n          return Promise.resolve(response);\n        }\n      }\n\n      if (unknown) {\n        return Promise.resolve(response);\n      }\n    };\n  }\n\n  createSearchResponse(url, search, pagingFunction, callback) {\n    let gateway = this.gateway;\n\n    if (callback != null) {\n      return gateway.http.post(url, {\n        search: search.toHash()\n      }, this.searchResponseHandler(pagingFunction, callback));\n    }\n\n    let searchResponse = new SearchResponse();\n    gateway.http.post(url, {\n      search: search.toHash()\n    }, function (err, response) {\n      if (err != null) {\n        searchResponse.setFatalError(err);\n      } else if (response.searchResults) {\n        searchResponse.setResponse(response);\n        searchResponse.setPagingFunction(pagingFunction);\n      } else if (response.apiErrorResponse) {\n        searchResponse.setFatalError(new ErrorResponse(response.apiErrorResponse, gateway));\n      } else {\n        searchResponse.setFatalError(exceptions.UnexpectedError('Unexpected Error')); // eslint-disable-line new-cap\n      }\n\n      return searchResponse.ready();\n    });\n    return searchResponse.stream;\n  }\n\n  searchResponseHandler(pagingFunction, callback) {\n    let gateway = this.gateway;\n    return function (err, response) {\n      if (err) {\n        return callback(err, response);\n      }\n\n      if (response.searchResults) {\n        let container = new SearchResponse(pagingFunction, response);\n        return callback(null, container);\n      } else if (response.apiErrorResponse) {\n        return callback(null, new ErrorResponse(response.apiErrorResponse, gateway));\n      }\n\n      return callback(exceptions.UnexpectedError('Unexpected Error'), null); // eslint-disable-line new-cap\n    };\n  }\n\n  pagingFunctionGenerator(search, url, SubjectType, pagedResultsKey, getSubject) {\n    return (ids, callback) => {\n      search.ids().in(ids);\n      let gateway = this.gateway;\n      gateway.http.post(`${this.config.baseMerchantPath()}/${url}`, {\n        search: search.toHash()\n      }, (err, response) => {\n        if (err) {\n          callback(err, null);\n          return;\n        } else if (pagedResultsKey in response) {\n          if (Array.isArray(getSubject(response))) {\n            getSubject(response).forEach(subject => {\n              callback(null, new SubjectType(subject, gateway));\n            });\n            return;\n          }\n\n          callback(null, new SubjectType(getSubject(response), gateway));\n          return;\n        }\n\n        callback(exceptions.UnexpectedError('Unexpected Error'), null); // eslint-disable-line new-cap\n      });\n    };\n  }\n\n}\n\nmodule.exports = {\n  Gateway: Gateway\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/gateway.js"],"names":["ErrorResponse","require","SearchResponse","exceptions","Gateway","createResponseHandler","attributeKlassMap","Klass","gateway","response","apiErrorResponse","Promise","resolve","success","attributeName","unknown","hasOwnProperty","createSearchResponse","url","search","pagingFunction","callback","http","post","toHash","searchResponseHandler","searchResponse","err","setFatalError","searchResults","setResponse","setPagingFunction","UnexpectedError","ready","stream","container","pagingFunctionGenerator","SubjectType","pagedResultsKey","getSubject","ids","in","config","baseMerchantPath","Array","isArray","forEach","subject","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet ErrorResponse = require('./error_response').ErrorResponse;\nlet SearchResponse = require('./search_response').SearchResponse;\nlet exceptions = require('./exceptions');\n\nclass Gateway {\n  createResponseHandler(attributeKlassMap, Klass) {\n    let gateway = this.gateway;\n\n    return function (response) { // eslint-disable-line consistent-return\n      if (response.apiErrorResponse) {\n        return Promise.resolve(new ErrorResponse(response.apiErrorResponse, gateway));\n      }\n\n      response.success = true;\n      if (attributeKlassMap === null) {\n        return Promise.resolve(response);\n      } else if (typeof attributeKlassMap === 'string') {\n        let attributeName = attributeKlassMap;\n\n        if (response[attributeName]) {\n          if (Klass != null) { response[attributeName] = new Klass(response[attributeName], gateway); }\n        }\n\n        return Promise.resolve(response);\n      }\n      let unknown = true;\n\n      for (let attributeName in attributeKlassMap) {\n        if (!attributeKlassMap.hasOwnProperty(attributeName)) {\n          continue;\n        }\n        Klass = attributeKlassMap[attributeName];\n        if (response[attributeName]) {\n          unknown = false;\n          if (Klass != null) { response[attributeName] = new Klass(response[attributeName], gateway); }\n\n          return Promise.resolve(response);\n        }\n      }\n      if (unknown) {\n        return Promise.resolve(response);\n      }\n    };\n  }\n\n  createSearchResponse(url, search, pagingFunction, callback) {\n    let gateway = this.gateway;\n\n    if (callback != null) {\n      return gateway.http.post(url, {search: search.toHash()}, this.searchResponseHandler(pagingFunction, callback));\n    }\n\n    let searchResponse = new SearchResponse();\n\n    gateway.http.post(url, {search: search.toHash()}, function (err, response) {\n      if (err != null) {\n        searchResponse.setFatalError(err);\n      } else if (response.searchResults) {\n        searchResponse.setResponse(response);\n        searchResponse.setPagingFunction(pagingFunction);\n      } else if (response.apiErrorResponse) {\n        searchResponse.setFatalError(new ErrorResponse(response.apiErrorResponse, gateway));\n      } else {\n        searchResponse.setFatalError(exceptions.UnexpectedError('Unexpected Error')); // eslint-disable-line new-cap\n      }\n\n      return searchResponse.ready();\n    });\n\n    return searchResponse.stream;\n  }\n\n  searchResponseHandler(pagingFunction, callback) {\n    let gateway = this.gateway;\n\n    return function (err, response) {\n      if (err) { return callback(err, response); }\n      if (response.searchResults) {\n        let container = new SearchResponse(pagingFunction, response);\n\n        return callback(null, container);\n      } else if (response.apiErrorResponse) {\n        return callback(null, new ErrorResponse(response.apiErrorResponse, gateway));\n      }\n\n      return callback(exceptions.UnexpectedError('Unexpected Error'), null); // eslint-disable-line new-cap\n    };\n  }\n\n  pagingFunctionGenerator(search, url, SubjectType, pagedResultsKey, getSubject) {\n    return (ids, callback) => {\n      search.ids().in(ids);\n      let gateway = this.gateway;\n\n      gateway.http.post(`${this.config.baseMerchantPath()}/${url}`, {search: search.toHash()}, (err, response) => {\n        if (err) {\n          callback(err, null);\n\n          return;\n        } else if (pagedResultsKey in response) {\n          if (Array.isArray(getSubject(response))) {\n            getSubject(response).forEach((subject) => {\n              callback(null, new SubjectType(subject, gateway));\n            });\n\n            return;\n          }\n\n          callback(null, new SubjectType(getSubject(response), gateway));\n\n          return;\n        }\n\n        callback(exceptions.UnexpectedError('Unexpected Error'), null); // eslint-disable-line new-cap\n      });\n    };\n  }\n}\n\nmodule.exports = {Gateway: Gateway};\n"]},"metadata":{},"sourceType":"script"}