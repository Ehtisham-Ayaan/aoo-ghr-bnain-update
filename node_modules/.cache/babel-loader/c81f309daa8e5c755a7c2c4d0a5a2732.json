{"ast":null,"code":"import GenericServices from \"./GenericServices\";\nimport jwt_decode from \"jwt-decode\";\n\nclass userServices extends GenericServices {\n  constructor(...args) {\n    super(...args);\n\n    this.login = (userName, password) => new Promise((resolve, reject) => {\n      console.log(userName, password);\n      this.post(\"http://localhost:5000/auth\", {\n        userName,\n        password\n      }).then(token => {\n        localStorage.setItem(\"token\", token);\n        resolve(token);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n\n    this.register = (username, email, password) => new Promise((resolve, reject) => {\n      console.log(username);\n      this.post(\"http://localhost:5000/register\", {\n        username,\n        email,\n        password\n      }).then(res => {\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n\n    this.contact = (username, email, query) => new Promise((resolve, reject) => {\n      console.log(username);\n      this.post(\"http://localhost:5000/contact\", {\n        username,\n        email,\n        query\n      }).then(res => {\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n\n    this.isLoggedin = localStorage.getItem(\"token\") ? true : false;\n\n    this.logout = () => {\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/\";\n    };\n\n    this.getLoggedinfo = () => {\n      try {\n        let jwt = localStorage.getItem(\"token\");\n        var decode = jwt_decode(jwt);\n        return decode;\n      } catch (error) {\n        console.log(\"error\");\n      }\n    };\n\n    this.isAdmin = () => {\n      if (this.isLoggedIn()) {\n        if (this.getLoggedinfo().role === \"admin\") return true;else return false;\n      } else return false;\n    };\n  }\n\n}\n\nlet UserServices = new userServices();\nexport default UserServices;","map":{"version":3,"sources":["/home/ehtisham/MyApp/myapp/client/src/services/UserServices.js"],"names":["GenericServices","jwt_decode","userServices","login","userName","password","Promise","resolve","reject","console","log","post","then","token","localStorage","setItem","catch","err","register","username","email","res","contact","query","isLoggedin","getItem","logout","removeItem","window","location","href","getLoggedinfo","jwt","decode","error","isAdmin","isLoggedIn","role","UserServices"],"mappings":"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","sourcesContent":["import GenericServices from \"./GenericServices\";\nimport jwt_decode from \"jwt-decode\";\nclass userServices extends GenericServices {\n  login = (userName, password) =>\n\n    new Promise((resolve, reject) => {\n\n      console.log(userName , password);\n\n      this.post(\"http://localhost:5000/auth\", { userName, password })\n        .then((token) => {\n          localStorage.setItem(\"token\", token);\n          resolve(token);\n         \n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n  register = (username, email, password) =>\n    new Promise((resolve, reject) => {\n\n\n      console.log(username)\n\n      this.post(\"http://localhost:5000/register\", { username, email, password })\n        .then((res) => {\n          resolve(res);\n        })  \n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n    contact = (username, email, query) =>\n    new Promise((resolve, reject) => {\n\n\n      console.log(username)\n\n      this.post(\"http://localhost:5000/contact\", { username, email, query })\n        .then((res) => {\n          resolve(res);\n        })  \n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n    isLoggedin = localStorage.getItem(\"token\") ? true : false;\n\n  logout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/\";\n  };\n\n  getLoggedinfo = () => {\n    try {\n      let jwt = localStorage.getItem(\"token\");\n      var decode = jwt_decode(jwt);\n      return decode;\n    } catch (error) {\n      console.log(\"error\");\n    }\n  };\n  \n  isAdmin = () => {\n    if (this.isLoggedIn()) {\n      if (this.getLoggedinfo().role === \"admin\") return true;\n      else return false;\n    } else return false;\n  };\n}\n\nlet UserServices = new userServices();\nexport default UserServices;\n"]},"metadata":{},"sourceType":"module"}