{"ast":null,"code":"import { action, setAction, elements, getElementAtPosition, mouse, selectedElement, tool, setElementWidth, setElementLength, wall, setElementStrokeWidth } from \"../sketch\";\nimport { updateElement } from \"./updateElement\";\nexport const handleMouseMove = event => {\n  // const {clientX, clientY} = event;\n  let bounds = event.target.getBoundingClientRect();\n  mouse.x = event.pageX - bounds.left - window.scrollX; // is window.scrollX same for Y\n\n  mouse.y = event.pageY - bounds.top - window.scrollY;\n\n  if (tool === \"selection\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"move\" : \"default\";\n  }\n\n  if (tool === \"text\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"text\" : \"default\";\n  }\n\n  if (tool === \"eraser\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"move\" : \"default\";\n  }\n\n  if (tool === \"resize\") {\n    event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements) ? \"resize\" : \"default\";\n  } // if(tool === \"rectangle\" || tool ===\"circle\" || tool ===\"wall\" || tool ===\"arcL\" ||\n  //     tool ===\"arcR\" || tool ===\"ellipse\"){\n  //\n  //     event.target.style.cursor = getCvsAtPosition(canvas.getBoundingClientRect().width , canvas.getBoundingClientRect().height, elements)\n  //         ? \"crosshair\" : \"default\";\n  // }\n\n\n  if (action === \"drawing\") {\n    const index = elements.length - 1;\n    const {\n      x1,\n      y1\n    } = elements[index];\n    const sWidth = wall;\n    updateElement(index, x1, y1, mouse.x, mouse.y, tool, sWidth);\n  } else if (action === \"moving\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY\n    } = selectedElement;\n    const sWidth = selectedElement.roughElement.options.strokeWidth;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY; // type.scale(mouse.x , mouse.y);\n\n    updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type, sWidth);\n  } else if (action === \"eraser\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY\n    } = selectedElement;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY; // type.scale(mouse.x , mouse.y);\n\n    updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, null);\n  } else if (action === \"resize\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY\n    } = selectedElement;\n    const sWidth = selectedElement.roughElement.options.strokeWidth;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY;\n    alert(\"Your previous Width was \" + width / 15.36);\n    alert(\"Your previous length was \" + height / 15.36);\n    const newx1 = prompt(\"Your previous x-axis was \" + x1 + \" Enter x-axis \"); // const newx2 = prompt(\"Your previous width was \" + x2 + \" Enter x2 \")\n\n    let newWidth = prompt(\"Your previous width was \" + x2 + \"Feet. Enter new Width in feet \");\n    newWidth = newWidth * 15.36;\n    newWidth = newWidth - newx1;\n    console.log(\"previous  :::  \" + width + \"  Now   :::  \" + newWidth);\n    const newy1 = prompt(\"Your previous y-axis was \" + y1 + \" Enter y-axis \"); // const newy2 = prompt(\"Your previous y2 was \" + y2 + \" Enter y2 \")\n\n    let newHeight = prompt(\"Your previous height was \" + height / 15.36 + \"Feet. Enter new height in feet \");\n    newHeight = newHeight * 15.36;\n    newHeight = newHeight - newy1;\n    console.log(\"previous  :::  \" + height + \"  Now   :::  \" + newHeight); // type.scale(mouse.x , mouse.y);\n\n    if (newx1 && newWidth && newy1 && newHeight) {\n      // updateElement(id, newx1, newy1, newx2, newy2, type, sWidth);\n      updateElement(id, newx1, newy1, newWidth, newy1, newHeight, type, sWidth);\n    } else {\n      updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type, sWidth);\n    }\n\n    setAction(\"selection\");\n  } else if (action === \"sizes\") {\n    const {\n      id,\n      x1,\n      x2,\n      y1,\n      y2,\n      type,\n      offsetX,\n      offsetY,\n      strokeWidth\n    } = selectedElement;\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const nexX1 = mouse.x - offsetX;\n    const nexY1 = mouse.y - offsetY; // type.scale(mouse.x , mouse.y);\n\n    setElementWidth(width);\n    setElementLength(height); // console.log(selectedElement)\n\n    setElementStrokeWidth(selectedElement.roughElement.options.strokeWidth);\n  }\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/src/sketchHelper/handleMouseMove.js"],"names":["action","setAction","elements","getElementAtPosition","mouse","selectedElement","tool","setElementWidth","setElementLength","wall","setElementStrokeWidth","updateElement","handleMouseMove","event","bounds","target","getBoundingClientRect","x","pageX","left","window","scrollX","y","pageY","top","scrollY","style","cursor","index","length","x1","y1","sWidth","id","x2","y2","type","offsetX","offsetY","roughElement","options","strokeWidth","width","height","nexX1","nexY1","alert","newx1","prompt","newWidth","console","log","newy1","newHeight"],"mappings":"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","sourcesContent":["import {action, \n        setAction ,\n        elements, \n        getElementAtPosition, \n        mouse, \n        selectedElement, \n        tool,\n        setElementWidth , \n        setElementLength ,\n        wall,\n        setElementStrokeWidth } from \"../sketch\";\nimport {updateElement} from \"./updateElement\";\n\nexport const handleMouseMove = (event) => {\n    // const {clientX, clientY} = event;\n\n    let bounds = event.target.getBoundingClientRect();\n    mouse.x = event.pageX - bounds.left - window.scrollX;  // is window.scrollX same for Y\n    mouse.y = event.pageY - bounds.top - window.scrollY;\n\n    if(tool === \"selection\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"move\" : \"default\";\n    }\n\n    if(tool === \"text\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"text\" : \"default\";\n    }\n\n    if(tool === \"eraser\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"move\" : \"default\";\n    }\n    if(tool === \"resize\")\n    {\n        event.target.style.cursor = getElementAtPosition(mouse.x, mouse.y, elements)\n            ? \"resize\" : \"default\";\n    }\n    // if(tool === \"rectangle\" || tool ===\"circle\" || tool ===\"wall\" || tool ===\"arcL\" ||\n    //     tool ===\"arcR\" || tool ===\"ellipse\"){\n    //\n    //     event.target.style.cursor = getCvsAtPosition(canvas.getBoundingClientRect().width , canvas.getBoundingClientRect().height, elements)\n    //         ? \"crosshair\" : \"default\";\n    // }\n\n    if(action === \"drawing\") {\n        const index = elements.length - 1;\n        const {x1,y1} = elements[index];\n        const sWidth = wall\n        updateElement(index, x1 , y1 , mouse.x, mouse.y , tool , sWidth);\n\n    }\n    else if (action === \"moving\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const sWidth = selectedElement.roughElement.options.strokeWidth\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type , sWidth);\n        \n    }\n    else if (action === \"eraser\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, null);\n    }\n\n    else if (action === \"resize\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY} = selectedElement;\n        const sWidth = selectedElement.roughElement.options.strokeWidth\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        alert(\"Your previous Width was \" + width / 15.36)\n\n        alert(\"Your previous length was \" + height / 15.36)\n        \n\n        const newx1 = prompt(\"Your previous x-axis was \" + x1 + \" Enter x-axis \")\n        // const newx2 = prompt(\"Your previous width was \" + x2 + \" Enter x2 \")\n        let newWidth = prompt(\"Your previous width was \" + x2 + \"Feet. Enter new Width in feet \")\n        newWidth = newWidth * 15.36\n        newWidth = newWidth - newx1\n        console.log(\"previous  :::  \" + width + \"  Now   :::  \" + newWidth )\n        const newy1 = prompt(\"Your previous y-axis was \" + y1 + \" Enter y-axis \")\n        // const newy2 = prompt(\"Your previous y2 was \" + y2 + \" Enter y2 \")\n        let newHeight = prompt(\"Your previous height was \" + height / 15.36 + \"Feet. Enter new height in feet \")\n        newHeight = newHeight * 15.36\n        newHeight = newHeight - newy1\n        console.log(\"previous  :::  \" + height + \"  Now   :::  \" + newHeight)\n        // type.scale(mouse.x , mouse.y);\n\n        if(newx1 && newWidth && newy1 && newHeight)\n        {\n        // updateElement(id, newx1, newy1, newx2, newy2, type, sWidth);\n        updateElement(id, newx1, newy1, newWidth , newy1, newHeight, type, sWidth);\n\n        }\n        else{\n            updateElement(id, nexX1, nexY1, nexX1 + width, nexY1 + height, type, sWidth);\n        }\n        setAction(\"selection\")\n    }\n\n    else if (action === \"sizes\")\n    {\n        const {id , x1, x2, y1, y2 , type , offsetX, offsetY, strokeWidth} = selectedElement;\n        const width = x2-x1;\n        const height = y2-y1;\n        const nexX1 = mouse.x- offsetX;\n        const nexY1 = mouse.y - offsetY;\n\n        // type.scale(mouse.x , mouse.y);\n\n        setElementWidth(width);\n        setElementLength(height); \n        \n        // console.log(selectedElement)\n        setElementStrokeWidth(selectedElement.roughElement.options.strokeWidth)\n    }\n\n};"]},"metadata":{},"sourceType":"module"}