{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet TransactionLineItem = require('./transaction_line_item').TransactionLineItem;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass TransactionLineItemGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  findAll(transactionId) {\n    if (transactionId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/transactions/${transactionId}/line_items`).then(response => {\n      return response.lineItems.map(function (lineItem) {\n        return new TransactionLineItem(lineItem);\n      });\n    });\n  }\n\n}\n\nmodule.exports = {\n  TransactionLineItemGateway: wrapPrototype(TransactionLineItemGateway, {})\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/transaction_line_item_gateway.js"],"names":["Gateway","require","TransactionLineItem","exceptions","wrapPrototype","TransactionLineItemGateway","constructor","gateway","config","findAll","transactionId","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","lineItems","map","lineItem","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,mBAAmB,GAAGD,OAAO,CAAC,yBAAD,CAAP,CAAmCC,mBAA7D;;AACA,IAAIC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCG,aAAvD;;AAEA,MAAMC,0BAAN,SAAyCL,OAAzC,CAAiD;AAC/CM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,OAAO,CAACC,aAAD,EAAgB;AACrB,QAAIA,aAAa,CAACC,IAAd,OAAyB,EAA7B,EAAiC;AAC/B,aAAOC,OAAO,CAACC,MAAR,CAAeV,UAAU,CAACW,aAAX,CAAyB,WAAzB,CAAf,EAAsD,IAAtD,CAAP,CAD+B,CACqC;AACrE;;AAED,WAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBC,GAAlB,CAAuB,GAAE,KAAKR,MAAL,CAAYS,gBAAZ,EAA+B,iBAAgBP,aAAc,aAAtF,EAAoGQ,IAApG,CAA0GC,QAAD,IAAc;AAC5H,aAAOA,QAAQ,CAACC,SAAT,CAAmBC,GAAnB,CAAuB,UAAUC,QAAV,EAAoB;AAChD,eAAO,IAAIpB,mBAAJ,CAAwBoB,QAAxB,CAAP;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD;;AAjB8C;;AAoBjDC,MAAM,CAACC,OAAP,GAAiB;AAACnB,EAAAA,0BAA0B,EAAED,aAAa,CAACC,0BAAD,EAA6B,EAA7B;AAA1C,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet TransactionLineItem = require('./transaction_line_item').TransactionLineItem;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass TransactionLineItemGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  findAll(transactionId) {\n    if (transactionId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/transactions/${transactionId}/line_items`).then((response) => {\n      return response.lineItems.map(function (lineItem) {\n        return new TransactionLineItem(lineItem);\n      });\n    });\n  }\n}\n\nmodule.exports = {TransactionLineItemGateway: wrapPrototype(TransactionLineItemGateway, {})};\n"]},"metadata":{},"sourceType":"script"}