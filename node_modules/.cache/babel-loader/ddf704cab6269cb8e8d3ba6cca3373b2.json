{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Address = require('./address').Address;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass AddressGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    let customerId = attributes.customerId;\n    delete attributes.customerId;\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses`, {\n      address: attributes\n    }).then(this.responseHandler());\n  }\n\n  delete(customerId, id) {\n    let path = `${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`;\n    return this.gateway.http.delete(path);\n  }\n\n  find(customerId, id) {\n    if (customerId.trim() === '' || id.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`).then(response => {\n      return response.address;\n    });\n  }\n\n  update(customerId, id, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`, {\n      address: attributes\n    }).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('address', Address);\n  }\n\n  sharedSignature(prefix) {\n    let signatureKeys = ['company', 'countryCodeAlpha2', 'countryCodeAlpha3', 'countryCodeNumeric', 'countryName', 'extendedAddress', 'firstName', 'lastName', 'locality', 'phoneNumber', 'postalCode', 'region', 'streetAddress'];\n    let signature = [];\n\n    for (let val of signatureKeys) {\n      signature.push(prefix + '[' + val + ']');\n    }\n\n    return signature;\n  }\n\n}\n\nmodule.exports = {\n  AddressGateway: wrapPrototype(AddressGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/address_gateway.js"],"names":["Gateway","require","Address","exceptions","wrapPrototype","AddressGateway","constructor","gateway","config","create","attributes","customerId","http","post","baseMerchantPath","address","then","responseHandler","delete","id","path","find","trim","Promise","reject","NotFoundError","get","response","update","put","createResponseHandler","sharedSignature","prefix","signatureKeys","signature","val","push","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Address = require('./address').Address;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass AddressGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    let customerId = attributes.customerId;\n\n    delete attributes.customerId;\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses`, {address: attributes}).then(this.responseHandler());\n  }\n\n  delete(customerId, id) {\n    let path = `${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`;\n\n    return this.gateway.http.delete(path);\n  }\n\n  find(customerId, id) {\n    if (customerId.trim() === '' || id.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`).then((response) => {\n      return response.address;\n    });\n  }\n\n  update(customerId, id, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`, {address: attributes}).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('address', Address);\n  }\n\n  sharedSignature(prefix) {\n    let signatureKeys = [\n      'company', 'countryCodeAlpha2', 'countryCodeAlpha3', 'countryCodeNumeric',\n      'countryName', 'extendedAddress', 'firstName', 'lastName', 'locality',\n      'phoneNumber', 'postalCode', 'region', 'streetAddress'\n    ];\n\n    let signature = [];\n\n    for (let val of signatureKeys) {\n      signature.push(prefix + '[' + val + ']');\n    }\n\n    return signature;\n  }\n}\n\nmodule.exports = {AddressGateway: wrapPrototype(AddressGateway)};\n"]},"metadata":{},"sourceType":"script"}