{"ast":null,"code":"import rough from 'roughjs/bundled/rough.esm';\nimport { wall, setWall } from \"../sketch\";\nconst generator = rough.generator();\nexport function createElement(id, x1, y1, x2, y2, type, sWidth) {\n  const roughElement = type === \"line\" ? generator.line(x1, y1, x2, y2, {\n    roughness: 0,\n    strokeWidth: wall\n  }) : type === \"rectangle\" ? generator.rectangle(x1, y1, x2 - x1, y2 - y1, {\n    roughness: 0,\n    strokeWidth: sWidth\n  }) : type === \"ellipse\" ? generator.ellipse(x1, y1, x2 - x1, y2 - y1, {\n    roughness: 0,\n    strokeWidth: sWidth\n  }) : type === \"arcL\" ? generator.arc(x1, y1, x2 - x1, x2 - x1, Math.PI, Math.PI * 1.5, true, {\n    roughness: 0,\n    strokeWidth: 3\n  }) : type === \"arcLB\" ? generator.arc(x1, y1, x2 - x1, x2 - x1, Math.PI * 2.5, Math.PI * 3.0, true, {\n    roughness: 0,\n    strokeWidth: 3\n  }) : type === \"arcR\" ? generator.arc(x1, y1, x2 - x1, x2 - x1, Math.PI * 1.5, Math.PI * 2.0, true, {\n    roughness: 0,\n    strokeWidth: 3\n  }) : type === \"arcRB\" ? generator.arc(x1, y1, x2 - x1, x2 - x1, Math.PI * 2.0, Math.PI * 2.5, true, {\n    roughness: 0,\n    strokeWidth: 3\n  }) : type === \"circle\" ? generator.circle(x1, y1, x2 - x1, {\n    roughness: 0,\n    strokeWidth: sWidth\n  }) : \"\";\n  return {\n    id,\n    x1,\n    y1,\n    x2,\n    y2,\n    type,\n    roughElement\n  };\n}","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/src/sketchHelper/createElement.js"],"names":["rough","wall","setWall","generator","createElement","id","x1","y1","x2","y2","type","sWidth","roughElement","line","roughness","strokeWidth","rectangle","ellipse","arc","Math","PI","circle"],"mappings":"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","sourcesContent":["import rough from 'roughjs/bundled/rough.esm';\nimport {wall, setWall} from \"../sketch\";\n\nconst generator = rough.generator();\n\nexport function createElement(id, x1, y1, x2, y2 , type , sWidth){\n    const roughElement = type === \"line\"\n        ? generator.line(x1,y1,x2,y2, { roughness: 0 , strokeWidth: wall})\n\n        : type === \"rectangle\" ? generator.rectangle(x1, y1, x2-x1, y2-y1 , { roughness: 0 , strokeWidth: sWidth })\n\n            : type === \"ellipse\" ? generator.ellipse(x1, y1, x2-x1, y2-y1 , { roughness: 0 , strokeWidth: sWidth})\n\n                : type === \"arcL\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI , Math.PI * 1.5, true ,  { roughness: 0 , strokeWidth: 3})\n\n                    : type === \"arcLB\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI * 2.5 , Math.PI * 3.0 , true ,  { roughness: 0 , strokeWidth: 3})\n\n                        : type === \"arcR\" ? generator.arc(x1, y1, x2-x1, x2-x1 ,  Math.PI * 1.5 , Math.PI * 2.0, true ,  { roughness: 0 , strokeWidth: 3})\n\n                            : type === \"arcRB\" ? generator.arc(x1, y1, x2-x1, x2-x1 , Math.PI * 2.0 , Math.PI * 2.5, true ,  { roughness: 0 , strokeWidth: 3})\n                            \n                                : type === \"circle\" ? generator.circle(x1, y1, x2-x1,   { roughness: 0 , strokeWidth: sWidth}) :\n\n                                    \"\" ;\n\n\n    return {id, x1, y1, x2, y2, type , roughElement};\n\n}"]},"metadata":{},"sourceType":"module"}