{"ast":null,"code":"'use strict';\n\nlet SearchResponseStream = require('./search_response_stream').SearchResponseStream;\n\nclass SearchResponse {\n  constructor(pagingFunction, results) {\n    if (pagingFunction != null) {\n      this.setPagingFunction(pagingFunction);\n    }\n\n    if (results != null) {\n      this.setResponse(results);\n    }\n\n    this.stream = new SearchResponseStream(this);\n    this.success = true;\n  }\n\n  each(callback) {\n    const ids = this.ids;\n    const pageSize = this.pageSize;\n    const pageIndicies = [];\n    let current = 0;\n\n    while (current < ids.length) {\n      pageIndicies.push(current);\n      current += pageSize;\n    }\n\n    return pageIndicies.forEach(pageIndex => this.pagingFunction(ids.slice(pageIndex, pageIndex + pageSize), callback));\n  }\n\n  first(callback) {\n    if (this.ids.length === 0) {\n      return callback(null, null);\n    }\n\n    return this.pagingFunction([this.ids[0]], callback);\n  }\n\n  length() {\n    return this.ids.length;\n  }\n\n  ready() {\n    return this.stream.ready();\n  }\n\n  setFatalError(error) {\n    this.fatalError = error;\n  }\n\n  setResponse(results) {\n    this.ids = results.searchResults.ids;\n    this.pageSize = parseInt(results.searchResults.pageSize, 10);\n  }\n\n  setPagingFunction(pagingFunction) {\n    this.pagingFunction = pagingFunction;\n  }\n\n}\n\nmodule.exports = {\n  SearchResponse: SearchResponse\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/search_response.js"],"names":["SearchResponseStream","require","SearchResponse","constructor","pagingFunction","results","setPagingFunction","setResponse","stream","success","each","callback","ids","pageSize","pageIndicies","current","length","push","forEach","pageIndex","slice","first","ready","setFatalError","error","fatalError","searchResults","parseInt","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,0BAAD,CAAP,CAAoCD,oBAA/D;;AAEA,MAAME,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0B;AACnC,QAAID,cAAc,IAAI,IAAtB,EAA4B;AAC1B,WAAKE,iBAAL,CAAuBF,cAAvB;AACD;;AAED,QAAIC,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAKE,WAAL,CAAiBF,OAAjB;AACD;;AAED,SAAKG,MAAL,GAAc,IAAIR,oBAAJ,CAAyB,IAAzB,CAAd;AAEA,SAAKS,OAAL,GAAe,IAAf;AACD;;AAEDC,EAAAA,IAAI,CAACC,QAAD,EAAW;AACb,UAAMC,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMC,YAAY,GAAG,EAArB;AACA,QAAIC,OAAO,GAAG,CAAd;;AAEA,WAAOA,OAAO,GAAGH,GAAG,CAACI,MAArB,EAA6B;AAC3BF,MAAAA,YAAY,CAACG,IAAb,CAAkBF,OAAlB;AACAA,MAAAA,OAAO,IAAIF,QAAX;AACD;;AAED,WAAOC,YAAY,CAACI,OAAb,CAAsBC,SAAD,IAAe,KAAKf,cAAL,CAAoBQ,GAAG,CAACQ,KAAJ,CAAUD,SAAV,EAAqBA,SAAS,GAAGN,QAAjC,CAApB,EAAgEF,QAAhE,CAApC,CAAP;AACD;;AAEDU,EAAAA,KAAK,CAACV,QAAD,EAAW;AACd,QAAI,KAAKC,GAAL,CAASI,MAAT,KAAoB,CAAxB,EAA2B;AACzB,aAAOL,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACD;;AAED,WAAO,KAAKP,cAAL,CAAoB,CAAC,KAAKQ,GAAL,CAAS,CAAT,CAAD,CAApB,EAAmCD,QAAnC,CAAP;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKJ,GAAL,CAASI,MAAhB;AACD;;AAEDM,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKd,MAAL,CAAYc,KAAZ,EAAP;AACD;;AAEDC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,SAAKC,UAAL,GAAkBD,KAAlB;AACD;;AAEDjB,EAAAA,WAAW,CAACF,OAAD,EAAU;AACnB,SAAKO,GAAL,GAAWP,OAAO,CAACqB,aAAR,CAAsBd,GAAjC;AACA,SAAKC,QAAL,GAAgBc,QAAQ,CAACtB,OAAO,CAACqB,aAAR,CAAsBb,QAAvB,EAAiC,EAAjC,CAAxB;AACD;;AAEDP,EAAAA,iBAAiB,CAACF,cAAD,EAAiB;AAChC,SAAKA,cAAL,GAAsBA,cAAtB;AACD;;AAxDkB;;AA2DrBwB,MAAM,CAACC,OAAP,GAAiB;AAAC3B,EAAAA,cAAc,EAAEA;AAAjB,CAAjB","sourcesContent":["'use strict';\n\nlet SearchResponseStream = require('./search_response_stream').SearchResponseStream;\n\nclass SearchResponse {\n  constructor(pagingFunction, results) {\n    if (pagingFunction != null) {\n      this.setPagingFunction(pagingFunction);\n    }\n\n    if (results != null) {\n      this.setResponse(results);\n    }\n\n    this.stream = new SearchResponseStream(this);\n\n    this.success = true;\n  }\n\n  each(callback) {\n    const ids = this.ids;\n    const pageSize = this.pageSize;\n    const pageIndicies = [];\n    let current = 0;\n\n    while (current < ids.length) {\n      pageIndicies.push(current);\n      current += pageSize;\n    }\n\n    return pageIndicies.forEach((pageIndex) => this.pagingFunction(ids.slice(pageIndex, pageIndex + pageSize), callback));\n  }\n\n  first(callback) {\n    if (this.ids.length === 0) {\n      return callback(null, null);\n    }\n\n    return this.pagingFunction([this.ids[0]], callback);\n  }\n\n  length() {\n    return this.ids.length;\n  }\n\n  ready() {\n    return this.stream.ready();\n  }\n\n  setFatalError(error) {\n    this.fatalError = error;\n  }\n\n  setResponse(results) {\n    this.ids = results.searchResults.ids;\n    this.pageSize = parseInt(results.searchResults.pageSize, 10);\n  }\n\n  setPagingFunction(pagingFunction) {\n    this.pagingFunction = pagingFunction;\n  }\n}\n\nmodule.exports = {SearchResponse: SearchResponse};\n"]},"metadata":{},"sourceType":"script"}