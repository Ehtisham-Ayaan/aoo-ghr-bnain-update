{"ast":null,"code":"import PropTypes from 'prop-types';\nconst stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number]); // properties that match media queries\n\nconst matchers = {\n  orientation: PropTypes.oneOf(['portrait', 'landscape']),\n  scan: PropTypes.oneOf(['progressive', 'interlace']),\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n  color: PropTypes.bool,\n  colorIndex: PropTypes.bool,\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber\n}; // media features\n\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n  ...matchers\n}; // media types\n\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n};\nconst all = { ...types,\n  ...features\n}; // add the type property\n\nmatchers.type = Object.keys(types);\nexport default {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n};","map":{"version":3,"sources":["E:/aoo-ghr-bnain-update/node_modules/react-responsive/src/mediaQuery.js"],"names":["PropTypes","stringOrNumber","oneOfType","string","number","matchers","orientation","oneOf","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","bool","colorIndex","monochrome","resolution","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","types","all","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","type","Object","keys"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst stringOrNumber = PropTypes.oneOfType([\r\n  PropTypes.string,\r\n  PropTypes.number\r\n])\r\n\r\n// properties that match media queries\r\nconst matchers = {\r\n  orientation: PropTypes.oneOf([\r\n    'portrait',\r\n    'landscape'\r\n  ]),\r\n\r\n  scan: PropTypes.oneOf([\r\n    'progressive',\r\n    'interlace'\r\n  ]),\r\n\r\n  aspectRatio: PropTypes.string,\r\n  deviceAspectRatio: PropTypes.string,\r\n\r\n  height: stringOrNumber,\r\n  deviceHeight: stringOrNumber,\r\n\r\n  width: stringOrNumber,\r\n  deviceWidth: stringOrNumber,\r\n\r\n  color: PropTypes.bool,\r\n\r\n  colorIndex: PropTypes.bool,\r\n\r\n  monochrome: PropTypes.bool,\r\n  resolution: stringOrNumber\r\n}\r\n\r\n// media features\r\nconst features = {\r\n  minAspectRatio: PropTypes.string,\r\n  maxAspectRatio: PropTypes.string,\r\n  minDeviceAspectRatio: PropTypes.string,\r\n  maxDeviceAspectRatio: PropTypes.string,\r\n\r\n  minHeight: stringOrNumber,\r\n  maxHeight: stringOrNumber,\r\n  minDeviceHeight: stringOrNumber,\r\n  maxDeviceHeight: stringOrNumber,\r\n\r\n  minWidth: stringOrNumber,\r\n  maxWidth: stringOrNumber,\r\n  minDeviceWidth: stringOrNumber,\r\n  maxDeviceWidth: stringOrNumber,\r\n\r\n  minColor: PropTypes.number,\r\n  maxColor: PropTypes.number,\r\n\r\n  minColorIndex: PropTypes.number,\r\n  maxColorIndex: PropTypes.number,\r\n\r\n  minMonochrome: PropTypes.number,\r\n  maxMonochrome: PropTypes.number,\r\n\r\n  minResolution: stringOrNumber,\r\n  maxResolution: stringOrNumber,\r\n\r\n  ...matchers\r\n}\r\n\r\n// media types\r\nconst types = {\r\n  all: PropTypes.bool,\r\n  grid: PropTypes.bool,\r\n  aural: PropTypes.bool,\r\n  braille: PropTypes.bool,\r\n  handheld: PropTypes.bool,\r\n  print: PropTypes.bool,\r\n  projection: PropTypes.bool,\r\n  screen: PropTypes.bool,\r\n  tty: PropTypes.bool,\r\n  tv: PropTypes.bool,\r\n  embossed: PropTypes.bool\r\n}\r\n\r\nconst all = { ...types, ...features }\r\n\r\n// add the type property\r\nmatchers.type = Object.keys(types)\r\n\r\nexport default {\r\n  all: all,\r\n  types: types,\r\n  matchers: matchers,\r\n  features: features\r\n}\r\n"]},"metadata":{},"sourceType":"module"}