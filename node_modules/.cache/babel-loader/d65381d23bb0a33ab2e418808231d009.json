{"ast":null,"code":"'use strict';\n\nconst exceptions = require('./exceptions');\n\nclass Util {\n  static convertObjectKeysToUnderscores(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let value = obj[key];\n      let newKey = Util.toUnderscore(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] = value.map(item => typeof item === 'object' ? Util.convertObjectKeysToUnderscores(item) : item);\n      } else if (typeof value === 'object') {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToUnderscores(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n\n    return newObj;\n  }\n\n  static convertObjectKeysToCamelCase(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let value = obj[key];\n      let newKey = Util.toCamelCase(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] = value.map(item => typeof item === 'object' ? Util.convertObjectKeysToCamelCase(item) : item);\n      } else if (typeof value === 'object') {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToCamelCase(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n\n    return newObj;\n  }\n\n  static convertNodeToObject(obj) {\n    if (typeof obj === 'object' && obj['@']) {\n      if (obj['@'].type === 'array') {\n        let newArray = [];\n\n        for (let key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n\n          let value = obj[key];\n\n          if (key !== '@') {\n            if (value instanceof Array) {\n              for (let item of value) {\n                newArray.push(this.convertNodeToObject(item));\n              }\n            } else {\n              newArray.push(this.convertNodeToObject(value));\n            }\n          }\n        }\n\n        return newArray;\n      } else if (obj['@'].type === 'collection') {\n        let newObj = {};\n\n        for (let key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n\n          let value = obj[key];\n\n          if (key !== '@') {\n            newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n          }\n        }\n\n        return newObj;\n      } else if (obj['@'].nil === 'true') {\n        return null;\n      } else if (obj['@'].type === 'integer') {\n        return parseInt(obj['#'], 10);\n      } else if (obj['@'].type === 'boolean') {\n        return obj['#'] === 'true';\n      }\n\n      return obj['#'];\n    } else if (obj instanceof Array) {\n      return obj.map(item => this.convertNodeToObject(item));\n    } else if (typeof obj === 'object' && this.objectIsEmpty(obj)) {\n      return '';\n    } else if (typeof obj === 'object') {\n      let newObj = {};\n\n      for (let key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n\n        let value = obj[key];\n        newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n      }\n\n      return newObj;\n    }\n\n    return obj;\n  }\n\n  static objectIsEmpty(obj) {\n    for (let key in obj) {\n      // eslint-disable-line no-unused-vars\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  static arrayIsEmpty(array) {\n    if (!(array instanceof Array)) {\n      return false;\n    }\n\n    if (array.length > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static toCamelCase(string) {\n    return string.replace(/([\\-\\_][a-z0-9])/g, match => match.toUpperCase().replace('-', '').replace('_', ''));\n  }\n\n  static toUnderscore(string) {\n    return string.replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  }\n\n  static flatten(array) {\n    while (this._containsArray(array)) {\n      array = array.reduce((first, rest) => {\n        first = first instanceof Array ? first : [first];\n        rest = rest instanceof Array ? this.flatten(rest) : rest;\n        return first.concat(rest);\n      });\n    }\n\n    return array;\n  }\n\n  static merge(obj1, obj2) {\n    for (let key in obj2) {\n      if (!obj2.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let value = obj2[key];\n      obj1[key] = value;\n    }\n\n    return obj1;\n  }\n\n  static without(array1, array2) {\n    let newArray = [];\n\n    for (let value of array1) {\n      if (!this._containsValue(array2, value)) {\n        newArray.push(value);\n      }\n    }\n\n    return newArray;\n  }\n\n  static withoutIgnoreCaseStyle(array1, array2) {\n    let newArray = [];\n    let array2CamelCased = array2.map(x => this.toCamelCase(x));\n    this.convertObjectKeysToCamelCase(array2);\n\n    for (let value of array1) {\n      if (!this._containsValue(array2CamelCased, value) && !this._containsValue(array2CamelCased, this.toCamelCase(value))) {\n        newArray.push(value);\n      }\n    }\n\n    return newArray;\n  }\n\n  static flattenKeys(obj, prefix) {\n    let keys = [];\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let value = obj[key];\n\n      if (typeof value === 'object') {\n        let keyToPush = null;\n\n        if (this.isNumeric(key)) {\n          keyToPush = prefix ? prefix : key;\n        } else {\n          keyToPush = prefix ? prefix + '[' + key + ']' : key;\n        }\n\n        keys.push(Util.flattenKeys(value, keyToPush));\n      } else if (prefix) {\n        keys.push(prefix + '[' + key + ']');\n      } else {\n        keys.push(key);\n      }\n    }\n\n    return this.flatten(keys);\n  }\n\n  static isNumeric(value) {\n    return !isNaN(value);\n  }\n\n  static verifyKeys(keys, obj) {\n    // eslint-disable-line consistent-return\n    let invalidKeys;\n    let unrecognizedKeys = this.withoutIgnoreCaseStyle(this.flattenKeys(obj), keys.valid);\n\n    if (keys.ignore) {\n      invalidKeys = unrecognizedKeys.filter(function (key) {\n        for (let ignoredKey of keys.ignore) {\n          if (key.indexOf(ignoredKey) === 0 || Util.toCamelCase(key).indexOf(ignoredKey) === 0) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    } else {\n      invalidKeys = unrecognizedKeys;\n    }\n\n    if (invalidKeys.length > 0) {\n      return exceptions.InvalidKeysError(`These keys are invalid: ${invalidKeys.join(', ')}`); // eslint-disable-line new-cap\n    }\n  }\n\n  static _containsValue(array, element) {\n    return array.indexOf(element) !== -1;\n  }\n\n  static _containsArray(array) {\n    for (let element of array) {\n      if (element instanceof Array) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static zip(...arrays) {\n    const longestLength = arrays.reduce((prev, current) => prev > current.length ? prev : current.length, 0);\n    const finalArray = [];\n    let currentIndex = 0;\n\n    while (currentIndex < longestLength) {\n      const nextArray = [];\n      const i = currentIndex;\n      arrays.forEach(array => {\n        nextArray.push(array[i]);\n      });\n      finalArray.push(nextArray);\n      currentIndex++;\n    }\n\n    return finalArray;\n  }\n\n}\n\nmodule.exports = {\n  Util\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/util.js"],"names":["exceptions","require","Util","convertObjectKeysToUnderscores","obj","newObj","key","hasOwnProperty","value","newKey","toUnderscore","Array","map","item","Date","convertObjectKeysToCamelCase","toCamelCase","convertNodeToObject","type","newArray","push","nil","parseInt","objectIsEmpty","arrayIsEmpty","array","length","string","replace","match","toUpperCase","toLowerCase","flatten","_containsArray","reduce","first","rest","concat","merge","obj1","obj2","without","array1","array2","_containsValue","withoutIgnoreCaseStyle","array2CamelCased","x","flattenKeys","prefix","keys","keyToPush","isNumeric","isNaN","verifyKeys","invalidKeys","unrecognizedKeys","valid","ignore","filter","ignoredKey","indexOf","InvalidKeysError","join","element","zip","arrays","longestLength","prev","current","finalArray","currentIndex","nextArray","i","forEach","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst exceptions = require('./exceptions');\n\nclass Util {\n  static convertObjectKeysToUnderscores(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toUnderscore(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] =\n          value.map((item) => typeof item === 'object' ? Util.convertObjectKeysToUnderscores(item) : item)\n        ;\n      } else if (typeof value === 'object') {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToUnderscores(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n\n    return newObj;\n  }\n\n  static convertObjectKeysToCamelCase(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toCamelCase(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] =\n          value.map((item) => typeof item === 'object' ? Util.convertObjectKeysToCamelCase(item) : item)\n        ;\n      } else if (typeof value === 'object') {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToCamelCase(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n\n    return newObj;\n  }\n\n  static convertNodeToObject(obj) {\n    if (typeof obj === 'object' && obj['@']) {\n      if (obj['@'].type === 'array') {\n        let newArray = [];\n\n        for (let key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = obj[key];\n\n          if (key !== '@') {\n            if (value instanceof Array) {\n              for (let item of value) {\n                newArray.push(this.convertNodeToObject(item));\n              }\n            } else {\n              newArray.push(this.convertNodeToObject(value));\n            }\n          }\n        }\n\n        return newArray;\n      } else if (obj['@'].type === 'collection') {\n        let newObj = {};\n\n        for (let key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = obj[key];\n\n          if (key !== '@') {\n            newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n          }\n        }\n\n        return newObj;\n      } else if (obj['@'].nil === 'true') {\n        return null;\n      } else if (obj['@'].type === 'integer') {\n        return parseInt(obj['#'], 10);\n      } else if (obj['@'].type === 'boolean') {\n        return obj['#'] === 'true';\n      }\n\n      return obj['#'];\n    } else if (obj instanceof Array) {\n      return obj.map((item) => this.convertNodeToObject(item));\n    } else if (typeof obj === 'object' && this.objectIsEmpty(obj)) {\n      return '';\n    } else if (typeof obj === 'object') {\n      let newObj = {};\n\n      for (let key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n        let value = obj[key];\n\n        newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n      }\n\n      return newObj;\n    }\n\n    return obj;\n  }\n\n  static objectIsEmpty(obj) {\n    for (let key in obj) { // eslint-disable-line no-unused-vars\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  static arrayIsEmpty(array) {\n    if (!(array instanceof Array)) { return false; }\n    if (array.length > 0) { return false; }\n\n    return true;\n  }\n\n  static toCamelCase(string) {\n    return string.replace(/([\\-\\_][a-z0-9])/g, match => match.toUpperCase().replace('-', '').replace('_', ''));\n  }\n\n  static toUnderscore(string) {\n    return string.replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  }\n\n  static flatten(array) {\n    while (this._containsArray(array)) {\n      array = array.reduce((first, rest) => {\n        first = first instanceof Array ? first : [first];\n        rest = rest instanceof Array ? this.flatten(rest) : rest;\n\n        return first.concat(rest);\n      }\n      );\n    }\n\n    return array;\n  }\n\n  static merge(obj1, obj2) {\n    for (let key in obj2) {\n      if (!obj2.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj2[key];\n\n      obj1[key] = value;\n    }\n\n    return obj1;\n  }\n\n  static without(array1, array2) {\n    let newArray = [];\n\n    for (let value of array1) {\n      if (!this._containsValue(array2, value)) { newArray.push(value); }\n    }\n\n    return newArray;\n  }\n\n  static withoutIgnoreCaseStyle(array1, array2) {\n    let newArray = [];\n    let array2CamelCased = array2.map(x => this.toCamelCase(x));\n\n    this.convertObjectKeysToCamelCase(array2);\n\n    for (let value of array1) {\n      if (!this._containsValue(array2CamelCased, value) && !this._containsValue(array2CamelCased, this.toCamelCase(value))) { newArray.push(value); }\n    }\n\n    return newArray;\n  }\n\n  static flattenKeys(obj, prefix) {\n    let keys = [];\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let value = obj[key];\n\n      if (typeof value === 'object') {\n        let keyToPush = null;\n\n        if (this.isNumeric(key)) {\n          keyToPush = prefix ? prefix : key;\n        } else {\n          keyToPush = prefix ? prefix + '[' + key + ']' : key;\n        }\n\n        keys.push(Util.flattenKeys(value, keyToPush));\n      } else if (prefix) {\n        keys.push(prefix + '[' + key + ']');\n      } else {\n        keys.push(key);\n      }\n    }\n\n    return this.flatten(keys);\n  }\n\n  static isNumeric(value) {\n    return !isNaN(value);\n  }\n\n  static verifyKeys(keys, obj) { // eslint-disable-line consistent-return\n    let invalidKeys;\n    let unrecognizedKeys = this.withoutIgnoreCaseStyle(this.flattenKeys(obj), keys.valid);\n\n    if (keys.ignore) {\n      invalidKeys = unrecognizedKeys.filter(function (key) {\n        for (let ignoredKey of keys.ignore) {\n          if (key.indexOf(ignoredKey) === 0 || Util.toCamelCase(key).indexOf(ignoredKey) === 0) { return false; }\n        }\n\n        return true;\n      });\n    } else {\n      invalidKeys = unrecognizedKeys;\n    }\n\n    if (invalidKeys.length > 0) {\n      return exceptions.InvalidKeysError(`These keys are invalid: ${invalidKeys.join(', ')}`); // eslint-disable-line new-cap\n    }\n  }\n\n  static _containsValue(array, element) {\n    return array.indexOf(element) !== -1;\n  }\n\n  static _containsArray(array) {\n    for (let element of array) {\n      if (element instanceof Array) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static zip(...arrays) {\n    const longestLength = arrays\n      .reduce((prev, current) => prev > current.length ? prev : current.length, 0);\n    const finalArray = [];\n    let currentIndex = 0;\n\n    while (currentIndex < longestLength) {\n      const nextArray = [];\n      const i = currentIndex;\n\n      arrays.forEach((array) => {\n        nextArray.push(array[i]);\n      });\n\n      finalArray.push(nextArray);\n\n      currentIndex++;\n    }\n\n    return finalArray;\n  }\n}\n\nmodule.exports = {Util};\n"]},"metadata":{},"sourceType":"script"}