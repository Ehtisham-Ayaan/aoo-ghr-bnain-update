{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PayPalAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`).then(response => {\n      return new PayPalAccount(response.paypalAccount);\n    });\n  }\n\n  update(token, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`, {\n      paypalAccount: attributes\n    }).then(this.responseHandler());\n  }\n\n  delete(token) {\n    let path = `${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`;\n    return this.gateway.http.delete(path);\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('paypalAccount', PayPalAccount);\n  }\n\n}\n\nmodule.exports = {\n  PayPalAccountGateway: wrapPrototype(PayPalAccountGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/paypal_account_gateway.js"],"names":["Gateway","require","PayPalAccount","exceptions","wrapPrototype","PayPalAccountGateway","constructor","gateway","config","find","token","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","paypalAccount","update","attributes","put","responseHandler","delete","path","createResponseHandler","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BC,aAAhD;;AACA,IAAIC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCG,aAAvD;;AAEA,MAAMC,oBAAN,SAAmCL,OAAnC,CAA2C;AACzCM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACV,QAAIA,KAAK,CAACC,IAAN,OAAiB,EAArB,EAAyB;AACvB,aAAOC,OAAO,CAACC,MAAR,CAAeV,UAAU,CAACW,aAAX,CAAyB,WAAzB,CAAf,EAAsD,IAAtD,CAAP,CADuB,CAC6C;AACrE;;AAED,WAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBC,GAAlB,CAAuB,GAAE,KAAKR,MAAL,CAAYS,gBAAZ,EAA+B,mCAAkCP,KAAM,EAAhG,EAAmGQ,IAAnG,CAAyGC,QAAD,IAAc;AAC3H,aAAO,IAAIjB,aAAJ,CAAkBiB,QAAQ,CAACC,aAA3B,CAAP;AACD,KAFM,CAAP;AAGD;;AAEDC,EAAAA,MAAM,CAACX,KAAD,EAAQY,UAAR,EAAoB;AACxB,WAAO,KAAKf,OAAL,CAAaQ,IAAb,CAAkBQ,GAAlB,CAAuB,GAAE,KAAKf,MAAL,CAAYS,gBAAZ,EAA+B,mCAAkCP,KAAM,EAAhG,EAAmG;AAACU,MAAAA,aAAa,EAAEE;AAAhB,KAAnG,EAAgIJ,IAAhI,CAAqI,KAAKM,eAAL,EAArI,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACf,KAAD,EAAQ;AACZ,QAAIgB,IAAI,GAAI,GAAE,KAAKlB,MAAL,CAAYS,gBAAZ,EAA+B,mCAAkCP,KAAM,EAArF;AAEA,WAAO,KAAKH,OAAL,CAAaQ,IAAb,CAAkBU,MAAlB,CAAyBC,IAAzB,CAAP;AACD;;AAEDF,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKG,qBAAL,CAA2B,eAA3B,EAA4CzB,aAA5C,CAAP;AACD;;AA7BwC;;AAgC3C0B,MAAM,CAACC,OAAP,GAAiB;AAACxB,EAAAA,oBAAoB,EAAED,aAAa,CAACC,oBAAD;AAApC,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PayPalAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`).then((response) => {\n      return new PayPalAccount(response.paypalAccount);\n    });\n  }\n\n  update(token, attributes) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`, {paypalAccount: attributes}).then(this.responseHandler());\n  }\n\n  delete(token) {\n    let path = `${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`;\n\n    return this.gateway.http.delete(path);\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('paypalAccount', PayPalAccount);\n  }\n}\n\nmodule.exports = {PayPalAccountGateway: wrapPrototype(PayPalAccountGateway)};\n"]},"metadata":{},"sourceType":"script"}