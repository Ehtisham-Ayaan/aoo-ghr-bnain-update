{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Util = require('./util').Util;\n\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PaymentMethodNonceGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler() {\n    let handler = this.createResponseHandler('payment_method_nonce', PaymentMethodNonce);\n    return function (payload) {\n      return handler(payload).then(response => {\n        response.paymentMethodNonce = new PaymentMethodNonce(response.paymentMethodNonce);\n        return response;\n      });\n    };\n  }\n\n  create(paymentMethodToken, params) {\n    let schema = {\n      valid: ['paymentMethodNonce[merchantAccountId]', 'paymentMethodNonce[authenticationInsight]', 'paymentMethodNonce[authenticationInsightOptions][amount]', 'paymentMethodNonce[authenticationInsightOptions][recurringCustomerConsent]', 'paymentMethodNonce[authenticationInsightOptions][recurringMaxAmount]']\n    };\n    let invalidKeysError = Util.verifyKeys(schema, params);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/${paymentMethodToken}/nonces`, params).then(this.responseHandler());\n  }\n\n  find(paymentMethodNonce) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_method_nonces/${paymentMethodNonce}`).then(response => {\n      return new PaymentMethodNonce(response.paymentMethodNonce);\n    });\n  }\n\n}\n\nmodule.exports = {\n  PaymentMethodNonceGateway: wrapPrototype(PaymentMethodNonceGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/payment_method_nonce_gateway.js"],"names":["Gateway","require","Util","PaymentMethodNonce","wrapPrototype","PaymentMethodNonceGateway","constructor","gateway","config","responseHandler","handler","createResponseHandler","payload","then","response","paymentMethodNonce","create","paymentMethodToken","params","schema","valid","invalidKeysError","verifyKeys","Promise","reject","http","post","baseMerchantPath","find","get","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,IAA7B;;AACA,IAAIC,kBAAkB,GAAGF,OAAO,CAAC,wBAAD,CAAP,CAAkCE,kBAA3D;;AACA,IAAIC,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAAP,CAAmCG,aAAvD;;AAEA,MAAMC,yBAAN,SAAwCL,OAAxC,CAAgD;AAC9CM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,QAAIC,OAAO,GAAG,KAAKC,qBAAL,CAA2B,sBAA3B,EAAmDR,kBAAnD,CAAd;AAEA,WAAO,UAAUS,OAAV,EAAmB;AACxB,aAAOF,OAAO,CAACE,OAAD,CAAP,CAAiBC,IAAjB,CAAuBC,QAAD,IAAc;AACzCA,QAAAA,QAAQ,CAACC,kBAAT,GAA8B,IAAIZ,kBAAJ,CAAuBW,QAAQ,CAACC,kBAAhC,CAA9B;AAEA,eAAOD,QAAP;AACD,OAJM,CAAP;AAKD,KAND;AAOD;;AAEDE,EAAAA,MAAM,CAACC,kBAAD,EAAqBC,MAArB,EAA6B;AACjC,QAAIC,MAAM,GAAG;AACXC,MAAAA,KAAK,EAAE,CACL,uCADK,EAEL,2CAFK,EAGL,0DAHK,EAIL,4EAJK,EAKL,sEALK;AADI,KAAb;AAUA,QAAIC,gBAAgB,GAAGnB,IAAI,CAACoB,UAAL,CAAgBH,MAAhB,EAAwBD,MAAxB,CAAvB;;AAEA,QAAIG,gBAAJ,EAAsB;AACpB,aAAOE,OAAO,CAACC,MAAR,CAAeH,gBAAf,CAAP;AACD;;AAED,WAAO,KAAKd,OAAL,CAAakB,IAAb,CAAkBC,IAAlB,CAAwB,GAAE,KAAKlB,MAAL,CAAYmB,gBAAZ,EAA+B,oBAAmBV,kBAAmB,SAA/F,EAAyGC,MAAzG,EAAiHL,IAAjH,CAAsH,KAAKJ,eAAL,EAAtH,CAAP;AACD;;AAEDmB,EAAAA,IAAI,CAACb,kBAAD,EAAqB;AACvB,WAAO,KAAKR,OAAL,CAAakB,IAAb,CAAkBI,GAAlB,CAAuB,GAAE,KAAKrB,MAAL,CAAYmB,gBAAZ,EAA+B,0BAAyBZ,kBAAmB,EAApG,EAAuGF,IAAvG,CAA6GC,QAAD,IAAc;AAC/H,aAAO,IAAIX,kBAAJ,CAAuBW,QAAQ,CAACC,kBAAhC,CAAP;AACD,KAFM,CAAP;AAGD;;AA3C6C;;AA8ChDe,MAAM,CAACC,OAAP,GAAiB;AAAC1B,EAAAA,yBAAyB,EAAED,aAAa,CAACC,yBAAD;AAAzC,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Util = require('./util').Util;\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PaymentMethodNonceGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler() {\n    let handler = this.createResponseHandler('payment_method_nonce', PaymentMethodNonce);\n\n    return function (payload) {\n      return handler(payload).then((response) => {\n        response.paymentMethodNonce = new PaymentMethodNonce(response.paymentMethodNonce);\n\n        return response;\n      });\n    };\n  }\n\n  create(paymentMethodToken, params) {\n    let schema = {\n      valid: [\n        'paymentMethodNonce[merchantAccountId]',\n        'paymentMethodNonce[authenticationInsight]',\n        'paymentMethodNonce[authenticationInsightOptions][amount]',\n        'paymentMethodNonce[authenticationInsightOptions][recurringCustomerConsent]',\n        'paymentMethodNonce[authenticationInsightOptions][recurringMaxAmount]'\n      ]\n    };\n\n    let invalidKeysError = Util.verifyKeys(schema, params);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/${paymentMethodToken}/nonces`, params).then(this.responseHandler());\n  }\n\n  find(paymentMethodNonce) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_method_nonces/${paymentMethodNonce}`).then((response) => {\n      return new PaymentMethodNonce(response.paymentMethodNonce);\n    });\n  }\n}\n\nmodule.exports = {PaymentMethodNonceGateway: wrapPrototype(PaymentMethodNonceGateway)};\n"]},"metadata":{},"sourceType":"script"}