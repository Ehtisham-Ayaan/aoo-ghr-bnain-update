{"ast":null,"code":"'use strict';\n\nconst {\n  Gateway\n} = require('./gateway');\n\nconst {\n  CreditCard\n} = require('./credit_card');\n\nconst exceptions = require('./exceptions');\n\nconst {\n  CreditCardSearch\n} = require('./credit_card_search');\n\nconst {\n  wrapPrototype\n} = require('@braintree/wrap-promise');\n\nclass CreditCardGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {\n      creditCard: attributes\n    }).then(this.responseHandler());\n  }\n\n  delete(token) {\n    let path = `${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`;\n    return this.gateway.http.delete(path);\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`).then(function (response) {\n      return new CreditCard(response.creditCard);\n    });\n  }\n\n  fromNonce(nonce) {\n    if (nonce.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/from_nonce/${nonce}`).then(response => {\n      return new CreditCard(response.creditCard);\n    }).catch(err => {\n      err.message = `Payment method with nonce ${nonce} locked, consumed or not found`;\n      return Promise.reject(err);\n    });\n  }\n\n  update(token, attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`, {\n      creditCard: attributes\n    }).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('creditCard', CreditCard);\n  }\n\n  expired(callback) {\n    const searchUrl = `${this.config.baseMerchantPath()}/payment_methods/all/expired_ids`;\n    const search = new CreditCardSearch();\n    const pagingFunction = this.pagingFunctionGenerator(search, 'payment_methods/all/expired');\n    return this.createSearchResponse(searchUrl, search, pagingFunction, callback);\n  }\n\n  expiringBetween(startDate, endDate, callback) {\n    const query = `start=${this.dateFormat(startDate)}&end=${this.dateFormat(endDate)}`;\n    const searchUrl = `${this.config.baseMerchantPath()}/payment_methods/all/expiring_ids?${query}`;\n    const search = new CreditCardSearch();\n    const pagingFunction = this.pagingFunctionGenerator(search, `payment_methods/all/expiring?${query}`);\n    return this.createSearchResponse(searchUrl, search, pagingFunction, callback);\n  }\n\n  dateFormat(date) {\n    let month = date.getMonth() + 1;\n\n    if (month < 10) {\n      month = `0${month}`;\n    } else {\n      month = `${month}`;\n    }\n\n    return month + date.getFullYear();\n  }\n\n  pagingFunctionGenerator(search, url) {\n    return super.pagingFunctionGenerator(search, url, CreditCard, 'paymentMethods', response => response.paymentMethods.creditCard);\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for CreditCard objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for CreditCard objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n\n}\n\nmodule.exports = {\n  CreditCardGateway: wrapPrototype(CreditCardGateway, {\n    ignoreMethods: ['expired', 'expiringBetween']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/credit_card_gateway.js"],"names":["Gateway","require","CreditCard","exceptions","CreditCardSearch","wrapPrototype","CreditCardGateway","constructor","gateway","config","create","attributes","_checkForDeprecatedAttributes","http","post","baseMerchantPath","creditCard","then","responseHandler","delete","token","path","find","trim","Promise","reject","NotFoundError","get","response","fromNonce","nonce","catch","err","message","update","put","createResponseHandler","expired","callback","searchUrl","search","pagingFunction","pagingFunctionGenerator","createSearchResponse","expiringBetween","startDate","endDate","query","dateFormat","date","month","getMonth","getFullYear","url","paymentMethods","deviceSessionId","console","warn","fraudMerchantId","module","exports","ignoreMethods"],"mappings":"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","sourcesContent":["'use strict';\nconst {Gateway} = require('./gateway');\nconst {CreditCard} = require('./credit_card');\nconst exceptions = require('./exceptions');\nconst {CreditCardSearch} = require('./credit_card_search');\nconst {wrapPrototype} = require('@braintree/wrap-promise');\n\nclass CreditCardGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {creditCard: attributes}).then(this.responseHandler());\n  }\n\n  delete(token) {\n    let path = `${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`;\n\n    return this.gateway.http.delete(path);\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`).then(function (response) {\n      return new CreditCard(response.creditCard);\n    });\n  }\n\n  fromNonce(nonce) {\n    if (nonce.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/from_nonce/${nonce}`).then((response) => {\n      return new CreditCard(response.creditCard);\n    }).catch((err) => {\n      err.message = `Payment method with nonce ${nonce} locked, consumed or not found`;\n\n      return Promise.reject(err);\n    });\n  }\n\n  update(token, attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`, {creditCard: attributes}).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('creditCard', CreditCard);\n  }\n\n  expired(callback) {\n    const searchUrl = `${this.config.baseMerchantPath()}/payment_methods/all/expired_ids`;\n    const search = new CreditCardSearch();\n    const pagingFunction = this.pagingFunctionGenerator(search, 'payment_methods/all/expired');\n\n    return this.createSearchResponse(searchUrl, search, pagingFunction, callback);\n  }\n\n  expiringBetween(startDate, endDate, callback) {\n    const query = `start=${this.dateFormat(startDate)}&end=${this.dateFormat(endDate)}`;\n    const searchUrl = `${this.config.baseMerchantPath()}/payment_methods/all/expiring_ids?${query}`;\n    const search = new CreditCardSearch();\n    const pagingFunction = this.pagingFunctionGenerator(search, `payment_methods/all/expiring?${query}`);\n\n    return this.createSearchResponse(searchUrl, search, pagingFunction, callback);\n  }\n\n  dateFormat(date) {\n    let month = date.getMonth() + 1;\n\n    if (month < 10) {\n      month = `0${month}`;\n    } else {\n      month = `${month}`;\n    }\n\n    return month + date.getFullYear();\n  }\n\n  pagingFunctionGenerator(search, url) {\n    return super.pagingFunctionGenerator(search, url, CreditCard, 'paymentMethods', response => response.paymentMethods.creditCard);\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for CreditCard objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for CreditCard objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n}\n\nmodule.exports = {\n  CreditCardGateway: wrapPrototype(CreditCardGateway, {\n    ignoreMethods: ['expired', 'expiringBetween']\n  })\n};\n"]},"metadata":{},"sourceType":"script"}