{"ast":null,"code":"'use strict';\n\nlet errorTypes = require('./error_types').errorTypes;\n\nfunction errorMaker(type) {\n  return function (message) {\n    let err = new Error(message || '');\n    err.type = err.name = type;\n    return err;\n  };\n}\n\nmodule.exports = {\n  AuthenticationError: errorMaker(errorTypes.authenticationError),\n  AuthorizationError: errorMaker(errorTypes.authorizationError),\n  GatewayTimeoutError: errorMaker(errorTypes.gatewayTimeoutError),\n  InvalidChallengeError: errorMaker(errorTypes.invalidChallengeError),\n  InvalidKeysError: errorMaker(errorTypes.invalidKeysError),\n  InvalidSignatureError: errorMaker(errorTypes.invalidSignatureError),\n  NotFoundError: errorMaker(errorTypes.notFoundError),\n  RequestTimeoutError: errorMaker(errorTypes.requestTimeoutError),\n  ServerError: errorMaker(errorTypes.serverError),\n  ServiceUnavailableError: errorMaker(errorTypes.serviceUnavailableError),\n  TestOperationPerformedInProductionError: errorMaker(errorTypes.testOperationPerformedInProductionError),\n  TooManyRequestsError: errorMaker(errorTypes.tooManyRequestsError),\n  UnexpectedError: errorMaker(errorTypes.unexpectedError),\n  UpgradeRequired: errorMaker(errorTypes.upgradeRequired)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/exceptions.js"],"names":["errorTypes","require","errorMaker","type","message","err","Error","name","module","exports","AuthenticationError","authenticationError","AuthorizationError","authorizationError","GatewayTimeoutError","gatewayTimeoutError","InvalidChallengeError","invalidChallengeError","InvalidKeysError","invalidKeysError","InvalidSignatureError","invalidSignatureError","NotFoundError","notFoundError","RequestTimeoutError","requestTimeoutError","ServerError","serverError","ServiceUnavailableError","serviceUnavailableError","TestOperationPerformedInProductionError","testOperationPerformedInProductionError","TooManyRequestsError","tooManyRequestsError","UnexpectedError","unexpectedError","UpgradeRequired","upgradeRequired"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,UAA1C;;AAEA,SAASE,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAO,UAAUC,OAAV,EAAmB;AACxB,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAUF,OAAO,IAAI,EAArB,CAAV;AAEAC,IAAAA,GAAG,CAACF,IAAJ,GAAWE,GAAG,CAACE,IAAJ,GAAWJ,IAAtB;AAEA,WAAOE,GAAP;AACD,GAND;AAOD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,mBAAmB,EAAER,UAAU,CAACF,UAAU,CAACW,mBAAZ,CADhB;AAEfC,EAAAA,kBAAkB,EAAEV,UAAU,CAACF,UAAU,CAACa,kBAAZ,CAFf;AAGfC,EAAAA,mBAAmB,EAAEZ,UAAU,CAACF,UAAU,CAACe,mBAAZ,CAHhB;AAIfC,EAAAA,qBAAqB,EAAEd,UAAU,CAACF,UAAU,CAACiB,qBAAZ,CAJlB;AAKfC,EAAAA,gBAAgB,EAAEhB,UAAU,CAACF,UAAU,CAACmB,gBAAZ,CALb;AAMfC,EAAAA,qBAAqB,EAAElB,UAAU,CAACF,UAAU,CAACqB,qBAAZ,CANlB;AAOfC,EAAAA,aAAa,EAAEpB,UAAU,CAACF,UAAU,CAACuB,aAAZ,CAPV;AAQfC,EAAAA,mBAAmB,EAAEtB,UAAU,CAACF,UAAU,CAACyB,mBAAZ,CARhB;AASfC,EAAAA,WAAW,EAAExB,UAAU,CAACF,UAAU,CAAC2B,WAAZ,CATR;AAUfC,EAAAA,uBAAuB,EAAE1B,UAAU,CAACF,UAAU,CAAC6B,uBAAZ,CAVpB;AAWfC,EAAAA,uCAAuC,EAAE5B,UAAU,CAACF,UAAU,CAAC+B,uCAAZ,CAXpC;AAYfC,EAAAA,oBAAoB,EAAE9B,UAAU,CAACF,UAAU,CAACiC,oBAAZ,CAZjB;AAafC,EAAAA,eAAe,EAAEhC,UAAU,CAACF,UAAU,CAACmC,eAAZ,CAbZ;AAcfC,EAAAA,eAAe,EAAElC,UAAU,CAACF,UAAU,CAACqC,eAAZ;AAdZ,CAAjB","sourcesContent":["'use strict';\n\nlet errorTypes = require('./error_types').errorTypes;\n\nfunction errorMaker(type) {\n  return function (message) {\n    let err = new Error(message || '');\n\n    err.type = err.name = type;\n\n    return err;\n  };\n}\n\nmodule.exports = {\n  AuthenticationError: errorMaker(errorTypes.authenticationError),\n  AuthorizationError: errorMaker(errorTypes.authorizationError),\n  GatewayTimeoutError: errorMaker(errorTypes.gatewayTimeoutError),\n  InvalidChallengeError: errorMaker(errorTypes.invalidChallengeError),\n  InvalidKeysError: errorMaker(errorTypes.invalidKeysError),\n  InvalidSignatureError: errorMaker(errorTypes.invalidSignatureError),\n  NotFoundError: errorMaker(errorTypes.notFoundError),\n  RequestTimeoutError: errorMaker(errorTypes.requestTimeoutError),\n  ServerError: errorMaker(errorTypes.serverError),\n  ServiceUnavailableError: errorMaker(errorTypes.serviceUnavailableError),\n  TestOperationPerformedInProductionError: errorMaker(errorTypes.testOperationPerformedInProductionError),\n  TooManyRequestsError: errorMaker(errorTypes.tooManyRequestsError),\n  UnexpectedError: errorMaker(errorTypes.unexpectedError),\n  UpgradeRequired: errorMaker(errorTypes.upgradeRequired)\n};\n"]},"metadata":{},"sourceType":"script"}