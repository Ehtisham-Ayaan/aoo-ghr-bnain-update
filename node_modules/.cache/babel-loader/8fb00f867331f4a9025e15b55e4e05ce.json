{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet OAuthCredentials = require('./oauth_credentials').OAuthCredentials;\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nlet Util = require('./util').Util;\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass OAuthGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  createTokenFromCode(attributes) {\n    attributes.grantType = 'authorization_code';\n    return this.gateway.http.post('/oauth/access_tokens', attributes).then(this.responseHandler());\n  }\n\n  createTokenFromRefreshToken(attributes) {\n    attributes.grantType = 'refresh_token';\n    return this.gateway.http.post('/oauth/access_tokens', attributes).then(this.responseHandler());\n  }\n\n  revokeAccessToken(accessToken) {\n    return this.gateway.http.post('/oauth/revoke_access_token', {\n      token: accessToken\n    }).then(this.createResponseHandler('result', AttributeSetter));\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('credentials', OAuthCredentials);\n  }\n\n  connectUrl(rawParams) {\n    const params = Object.assign({\n      clientId: this.config.clientId\n    }, rawParams);\n    return this.config.baseUrl() + '/oauth/connect?' + this.buildQuery(params);\n  }\n\n  buildQuery(params) {\n    params = Util.convertObjectKeysToUnderscores(params);\n    let paramsArray = this.buildSubQuery('user', params.user);\n    paramsArray.push.apply(paramsArray, this.buildSubQuery('business', params.business));\n    paramsArray.push.apply(paramsArray, this.buildSubArrayQuery('payment_methods', params.payment_methods));\n    delete params.user;\n    delete params.business;\n    delete params.payment_methods;\n    paramsArray.push.apply(paramsArray, (() => {\n      let result = [];\n\n      for (let key in params) {\n        if (!params.hasOwnProperty(key)) {\n          continue;\n        }\n\n        let val = params[key];\n        result.push([key, val]);\n      }\n\n      return result;\n    })());\n    let queryStringParts = paramsArray.map(paramParts => {\n      let key = paramParts[0];\n      let value = paramParts[1];\n      return `${this._encodeValue(key)}=${this._encodeValue(value)}`;\n    });\n    return queryStringParts.join('&');\n  }\n\n  buildSubQuery(key, subParams) {\n    let arr = [];\n\n    for (let subKey in subParams) {\n      if (!subParams.hasOwnProperty(subKey)) {\n        continue;\n      }\n\n      let value = subParams[subKey];\n      arr.push([`${key}[${subKey}]`, value]);\n    }\n\n    return arr;\n  }\n\n  _encodeValue(value) {\n    return encodeURIComponent(value).replace(/[!'()]/g, escape).replace(/\\*/g, '%2A');\n  }\n\n  buildSubArrayQuery(key, values) {\n    return (values || []).map(value => [`${key}[]`, value]);\n  }\n\n}\n\nmodule.exports = {\n  OAuthGateway: wrapPrototype(OAuthGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/oauth_gateway.js"],"names":["Gateway","require","OAuthCredentials","AttributeSetter","Util","wrapPrototype","OAuthGateway","constructor","gateway","config","createTokenFromCode","attributes","grantType","http","post","then","responseHandler","createTokenFromRefreshToken","revokeAccessToken","accessToken","token","createResponseHandler","connectUrl","rawParams","params","Object","assign","clientId","baseUrl","buildQuery","convertObjectKeysToUnderscores","paramsArray","buildSubQuery","user","push","apply","business","buildSubArrayQuery","payment_methods","result","key","hasOwnProperty","val","queryStringParts","map","paramParts","value","_encodeValue","join","subParams","arr","subKey","encodeURIComponent","replace","escape","values","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,gBAAgB,GAAGD,OAAO,CAAC,qBAAD,CAAP,CAA+BC,gBAAtD;;AACA,IAAIC,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAAP,CAA8BE,eAApD;;AACA,IAAIC,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,IAA7B;;AACA,IAAIC,aAAa,GAAGJ,OAAO,CAAC,yBAAD,CAAP,CAAmCI,aAAvD;;AAEA,MAAMC,YAAN,SAA2BN,OAA3B,CAAmC;AACjCO,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,mBAAmB,CAACC,UAAD,EAAa;AAC9BA,IAAAA,UAAU,CAACC,SAAX,GAAuB,oBAAvB;AAEA,WAAO,KAAKJ,OAAL,CAAaK,IAAb,CAAkBC,IAAlB,CAAuB,sBAAvB,EAA+CH,UAA/C,EAA2DI,IAA3D,CAAgE,KAAKC,eAAL,EAAhE,CAAP;AACD;;AAEDC,EAAAA,2BAA2B,CAACN,UAAD,EAAa;AACtCA,IAAAA,UAAU,CAACC,SAAX,GAAuB,eAAvB;AAEA,WAAO,KAAKJ,OAAL,CAAaK,IAAb,CAAkBC,IAAlB,CAAuB,sBAAvB,EAA+CH,UAA/C,EAA2DI,IAA3D,CAAgE,KAAKC,eAAL,EAAhE,CAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACC,WAAD,EAAc;AAC7B,WAAO,KAAKX,OAAL,CAAaK,IAAb,CAAkBC,IAAlB,CAAuB,4BAAvB,EAAqD;AAACM,MAAAA,KAAK,EAAED;AAAR,KAArD,EAA2EJ,IAA3E,CAAgF,KAAKM,qBAAL,CAA2B,QAA3B,EAAqClB,eAArC,CAAhF,CAAP;AACD;;AAEDa,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKK,qBAAL,CAA2B,aAA3B,EAA0CnB,gBAA1C,CAAP;AACD;;AAEDoB,EAAAA,UAAU,CAACC,SAAD,EAAY;AACpB,UAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,QAAQ,EAAE,KAAKlB,MAAL,CAAYkB;AAAvB,KAAd,EAAgDJ,SAAhD,CAAf;AAEA,WAAO,KAAKd,MAAL,CAAYmB,OAAZ,KAAwB,iBAAxB,GAA4C,KAAKC,UAAL,CAAgBL,MAAhB,CAAnD;AACD;;AAEDK,EAAAA,UAAU,CAACL,MAAD,EAAS;AACjBA,IAAAA,MAAM,GAAGpB,IAAI,CAAC0B,8BAAL,CAAoCN,MAApC,CAAT;AAEA,QAAIO,WAAW,GAAG,KAAKC,aAAL,CAAmB,MAAnB,EAA2BR,MAAM,CAACS,IAAlC,CAAlB;AAEAF,IAAAA,WAAW,CAACG,IAAZ,CAAiBC,KAAjB,CAAuBJ,WAAvB,EAAoC,KAAKC,aAAL,CAAmB,UAAnB,EAA+BR,MAAM,CAACY,QAAtC,CAApC;AACAL,IAAAA,WAAW,CAACG,IAAZ,CAAiBC,KAAjB,CAAuBJ,WAAvB,EAAoC,KAAKM,kBAAL,CAAwB,iBAAxB,EAA2Cb,MAAM,CAACc,eAAlD,CAApC;AACA,WAAOd,MAAM,CAACS,IAAd;AACA,WAAOT,MAAM,CAACY,QAAd;AACA,WAAOZ,MAAM,CAACc,eAAd;AAEAP,IAAAA,WAAW,CAACG,IAAZ,CAAiBC,KAAjB,CAAuBJ,WAAvB,EAAoC,CAAC,MAAM;AACzC,UAAIQ,MAAM,GAAG,EAAb;;AAEA,WAAK,IAAIC,GAAT,IAAgBhB,MAAhB,EAAwB;AACtB,YAAI,CAACA,MAAM,CAACiB,cAAP,CAAsBD,GAAtB,CAAL,EAAiC;AAC/B;AACD;;AACD,YAAIE,GAAG,GAAGlB,MAAM,CAACgB,GAAD,CAAhB;AAEAD,QAAAA,MAAM,CAACL,IAAP,CAAY,CAACM,GAAD,EAAME,GAAN,CAAZ;AACD;;AAED,aAAOH,MAAP;AACD,KAbmC,GAApC;AAeA,QAAII,gBAAgB,GAAGZ,WAAW,CAACa,GAAZ,CAAiBC,UAAD,IAAgB;AACrD,UAAIL,GAAG,GAAGK,UAAU,CAAC,CAAD,CAApB;AACA,UAAIC,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAtB;AAEA,aAAQ,GAAE,KAAKE,YAAL,CAAkBP,GAAlB,CAAuB,IAAG,KAAKO,YAAL,CAAkBD,KAAlB,CAAyB,EAA7D;AACD,KALsB,CAAvB;AAOA,WAAOH,gBAAgB,CAACK,IAAjB,CAAsB,GAAtB,CAAP;AACD;;AAEDhB,EAAAA,aAAa,CAACQ,GAAD,EAAMS,SAAN,EAAiB;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AAEA,SAAK,IAAIC,MAAT,IAAmBF,SAAnB,EAA8B;AAC5B,UAAI,CAACA,SAAS,CAACR,cAAV,CAAyBU,MAAzB,CAAL,EAAuC;AACrC;AACD;;AACD,UAAIL,KAAK,GAAGG,SAAS,CAACE,MAAD,CAArB;AAEAD,MAAAA,GAAG,CAAChB,IAAJ,CAAS,CAAE,GAAEM,GAAI,IAAGW,MAAO,GAAlB,EAAsBL,KAAtB,CAAT;AACD;;AAED,WAAOI,GAAP;AACD;;AAEDH,EAAAA,YAAY,CAACD,KAAD,EAAQ;AAClB,WAAOM,kBAAkB,CAACN,KAAD,CAAlB,CACJO,OADI,CACI,SADJ,EACeC,MADf,EAEJD,OAFI,CAEI,KAFJ,EAEW,KAFX,CAAP;AAGD;;AAEDhB,EAAAA,kBAAkB,CAACG,GAAD,EAAMe,MAAN,EAAc;AAC9B,WAAO,CAACA,MAAM,IAAI,EAAX,EAAeX,GAAf,CAAmBE,KAAK,IAAI,CAAE,GAAEN,GAAI,IAAR,EAAaM,KAAb,CAA5B,CAAP;AACD;;AA5FgC;;AA+FnCU,MAAM,CAACC,OAAP,GAAiB;AAACnD,EAAAA,YAAY,EAAED,aAAa,CAACC,YAAD;AAA5B,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet OAuthCredentials = require('./oauth_credentials').OAuthCredentials;\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet Util = require('./util').Util;\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass OAuthGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  createTokenFromCode(attributes) {\n    attributes.grantType = 'authorization_code';\n\n    return this.gateway.http.post('/oauth/access_tokens', attributes).then(this.responseHandler());\n  }\n\n  createTokenFromRefreshToken(attributes) {\n    attributes.grantType = 'refresh_token';\n\n    return this.gateway.http.post('/oauth/access_tokens', attributes).then(this.responseHandler());\n  }\n\n  revokeAccessToken(accessToken) {\n    return this.gateway.http.post('/oauth/revoke_access_token', {token: accessToken}).then(this.createResponseHandler('result', AttributeSetter));\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('credentials', OAuthCredentials);\n  }\n\n  connectUrl(rawParams) {\n    const params = Object.assign({clientId: this.config.clientId}, rawParams);\n\n    return this.config.baseUrl() + '/oauth/connect?' + this.buildQuery(params);\n  }\n\n  buildQuery(params) {\n    params = Util.convertObjectKeysToUnderscores(params);\n\n    let paramsArray = this.buildSubQuery('user', params.user);\n\n    paramsArray.push.apply(paramsArray, this.buildSubQuery('business', params.business));\n    paramsArray.push.apply(paramsArray, this.buildSubArrayQuery('payment_methods', params.payment_methods));\n    delete params.user;\n    delete params.business;\n    delete params.payment_methods;\n\n    paramsArray.push.apply(paramsArray, (() => {\n      let result = [];\n\n      for (let key in params) {\n        if (!params.hasOwnProperty(key)) {\n          continue;\n        }\n        let val = params[key];\n\n        result.push([key, val]);\n      }\n\n      return result;\n    })());\n\n    let queryStringParts = paramsArray.map((paramParts) => {\n      let key = paramParts[0];\n      let value = paramParts[1];\n\n      return `${this._encodeValue(key)}=${this._encodeValue(value)}`;\n    });\n\n    return queryStringParts.join('&');\n  }\n\n  buildSubQuery(key, subParams) {\n    let arr = [];\n\n    for (let subKey in subParams) {\n      if (!subParams.hasOwnProperty(subKey)) {\n        continue;\n      }\n      let value = subParams[subKey];\n\n      arr.push([`${key}[${subKey}]`, value]);\n    }\n\n    return arr;\n  }\n\n  _encodeValue(value) {\n    return encodeURIComponent(value)\n      .replace(/[!'()]/g, escape)\n      .replace(/\\*/g, '%2A');\n  }\n\n  buildSubArrayQuery(key, values) {\n    return (values || []).map(value => [`${key}[]`, value]);\n  }\n}\n\nmodule.exports = {OAuthGateway: wrapPrototype(OAuthGateway)};\n"]},"metadata":{},"sourceType":"script"}