{"ast":null,"code":"'use strict';\n\nclass Environment {\n  static initClass() {\n    const DEVELOPMENT_PORT = process.env.GATEWAY_PORT || '3000';\n    const DEVELOPMENT_HOST = process.env.GATEWAY_HOST || 'localhost';\n    const DEVELOPMENT_SSL = process.env.GATEWAY_SSL === 'true' || false;\n    this.Development = new Environment(DEVELOPMENT_HOST, DEVELOPMENT_PORT, 'http://auth.venmo.dev:9292', DEVELOPMENT_SSL, 'graphql.bt.local', 8080);\n    this.Qa = new Environment('gateway.qa.braintreepayments.com', '443', 'https://auth.venmo.qa2.braintreegateway.com', true, 'payments-qa.dev.braintree-api.com', '443');\n    this.Sandbox = new Environment('api.sandbox.braintreegateway.com', '443', 'https://auth.sandbox.venmo.com', true, 'payments.sandbox.braintree-api.com', '443');\n    this.Production = new Environment('api.braintreegateway.com', '443', 'https://auth.venmo.com', true, 'payments.braintree-api.com', '443');\n  }\n\n  constructor(server, port, authUrl, ssl, graphQLServer, graphQLPort) {\n    this.server = server;\n    this.port = port;\n    this.authUrl = authUrl;\n    this.ssl = ssl;\n    this.graphQLServer = graphQLServer;\n    this.graphQLPort = graphQLPort;\n  }\n\n  baseUrl() {\n    let url = this.uriScheme() + this.server;\n\n    if (this === Environment.Development) {\n      url += `:${this.port}`;\n    }\n\n    return url;\n  }\n\n  baseGraphQLUrl() {\n    let url = this.uriScheme() + this.graphQLServer;\n\n    if (this === Environment.Development) {\n      url += `:${this.graphQLPort}`;\n    }\n\n    url += '/graphql';\n    return url;\n  }\n\n  uriScheme() {\n    return this.ssl ? 'https://' : 'http://';\n  }\n\n}\n\nEnvironment.initClass();\nmodule.exports = {\n  Environment: Environment\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/environment.js"],"names":["Environment","initClass","DEVELOPMENT_PORT","process","env","GATEWAY_PORT","DEVELOPMENT_HOST","GATEWAY_HOST","DEVELOPMENT_SSL","GATEWAY_SSL","Development","Qa","Sandbox","Production","constructor","server","port","authUrl","ssl","graphQLServer","graphQLPort","baseUrl","url","uriScheme","baseGraphQLUrl","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAN,CAAkB;AACA,SAATC,SAAS,GAAG;AACjB,UAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAR,CAAYC,YAAZ,IAA4B,MAArD;AACA,UAAMC,gBAAgB,GAAGH,OAAO,CAACC,GAAR,CAAYG,YAAZ,IAA4B,WAArD;AACA,UAAMC,eAAe,GAAGL,OAAO,CAACC,GAAR,CAAYK,WAAZ,KAA4B,MAA5B,IAAsC,KAA9D;AAEA,SAAKC,WAAL,GAAmB,IAAIV,WAAJ,CAAgBM,gBAAhB,EAAkCJ,gBAAlC,EAAoD,4BAApD,EAAkFM,eAAlF,EAAmG,kBAAnG,EAAuH,IAAvH,CAAnB;AACA,SAAKG,EAAL,GAAU,IAAIX,WAAJ,CAAgB,kCAAhB,EAAoD,KAApD,EAA2D,6CAA3D,EAA0G,IAA1G,EAAgH,mCAAhH,EAAqJ,KAArJ,CAAV;AACA,SAAKY,OAAL,GAAe,IAAIZ,WAAJ,CAAgB,kCAAhB,EAAoD,KAApD,EAA2D,gCAA3D,EAA6F,IAA7F,EAAmG,oCAAnG,EAAyI,KAAzI,CAAf;AACA,SAAKa,UAAL,GAAkB,IAAIb,WAAJ,CAAgB,0BAAhB,EAA4C,KAA5C,EAAmD,wBAAnD,EAA6E,IAA7E,EAAmF,4BAAnF,EAAiH,KAAjH,CAAlB;AACD;;AAEDc,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,GAAxB,EAA6BC,aAA7B,EAA4CC,WAA5C,EAAyD;AAClE,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAIC,GAAG,GAAG,KAAKC,SAAL,KAAmB,KAAKR,MAAlC;;AAEA,QAAI,SAASf,WAAW,CAACU,WAAzB,EAAsC;AACpCY,MAAAA,GAAG,IAAK,IAAG,KAAKN,IAAK,EAArB;AACD;;AAED,WAAOM,GAAP;AACD;;AAEDE,EAAAA,cAAc,GAAG;AACf,QAAIF,GAAG,GAAG,KAAKC,SAAL,KAAmB,KAAKJ,aAAlC;;AAEA,QAAI,SAASnB,WAAW,CAACU,WAAzB,EAAsC;AACpCY,MAAAA,GAAG,IAAK,IAAG,KAAKF,WAAY,EAA5B;AACD;;AACDE,IAAAA,GAAG,IAAI,UAAP;AAEA,WAAOA,GAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKL,GAAL,GAAW,UAAX,GAAwB,SAA/B;AACD;;AA5Ce;;AA+ClBlB,WAAW,CAACC,SAAZ;AAEAwB,MAAM,CAACC,OAAP,GAAiB;AAAC1B,EAAAA,WAAW,EAAEA;AAAd,CAAjB","sourcesContent":["'use strict';\n\nclass Environment {\n  static initClass() {\n    const DEVELOPMENT_PORT = process.env.GATEWAY_PORT || '3000';\n    const DEVELOPMENT_HOST = process.env.GATEWAY_HOST || 'localhost';\n    const DEVELOPMENT_SSL = process.env.GATEWAY_SSL === 'true' || false;\n\n    this.Development = new Environment(DEVELOPMENT_HOST, DEVELOPMENT_PORT, 'http://auth.venmo.dev:9292', DEVELOPMENT_SSL, 'graphql.bt.local', 8080);\n    this.Qa = new Environment('gateway.qa.braintreepayments.com', '443', 'https://auth.venmo.qa2.braintreegateway.com', true, 'payments-qa.dev.braintree-api.com', '443');\n    this.Sandbox = new Environment('api.sandbox.braintreegateway.com', '443', 'https://auth.sandbox.venmo.com', true, 'payments.sandbox.braintree-api.com', '443');\n    this.Production = new Environment('api.braintreegateway.com', '443', 'https://auth.venmo.com', true, 'payments.braintree-api.com', '443');\n  }\n\n  constructor(server, port, authUrl, ssl, graphQLServer, graphQLPort) {\n    this.server = server;\n    this.port = port;\n    this.authUrl = authUrl;\n    this.ssl = ssl;\n    this.graphQLServer = graphQLServer;\n    this.graphQLPort = graphQLPort;\n  }\n\n  baseUrl() {\n    let url = this.uriScheme() + this.server;\n\n    if (this === Environment.Development) {\n      url += `:${this.port}`;\n    }\n\n    return url;\n  }\n\n  baseGraphQLUrl() {\n    let url = this.uriScheme() + this.graphQLServer;\n\n    if (this === Environment.Development) {\n      url += `:${this.graphQLPort}`;\n    }\n    url += '/graphql';\n\n    return url;\n  }\n\n  uriScheme() {\n    return this.ssl ? 'https://' : 'http://';\n  }\n}\n\nEnvironment.initClass();\n\nmodule.exports = {Environment: Environment};\n"]},"metadata":{},"sourceType":"script"}