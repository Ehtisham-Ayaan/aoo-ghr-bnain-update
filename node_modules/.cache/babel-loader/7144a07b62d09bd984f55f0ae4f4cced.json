{"ast":null,"code":"import _objectSpread from \"F:/Aoo-Ghr-Bnain-Client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport PropTypes from 'prop-types';\nvar stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number]); // properties that match media queries\n\nvar matchers = {\n  orientation: PropTypes.oneOf(['portrait', 'landscape']),\n  scan: PropTypes.oneOf(['progressive', 'interlace']),\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n  color: PropTypes.bool,\n  colorIndex: PropTypes.bool,\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber\n}; // media features\n\nvar features = _objectSpread({\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber\n}, matchers); // media types\n\n\nvar types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n};\n\nvar all = _objectSpread(_objectSpread({}, types), features); // add the type property\n\n\nmatchers.type = Object.keys(types);\nexport default {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n};","map":{"version":3,"sources":["F:/Aoo-Ghr-Bnain-Client/node_modules/react-responsive/src/mediaQuery.js"],"names":["PropTypes","stringOrNumber","oneOfType","string","number","matchers","orientation","oneOf","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","bool","colorIndex","monochrome","resolution","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","types","all","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","type","Object","keys"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\n\nconst stringOrNumber = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number\n])\n\n// properties that match media queries\nconst matchers = {\n  orientation: PropTypes.oneOf([\n    'portrait',\n    'landscape'\n  ]),\n\n  scan: PropTypes.oneOf([\n    'progressive',\n    'interlace'\n  ]),\n\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n\n  color: PropTypes.bool,\n\n  colorIndex: PropTypes.bool,\n\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber\n}\n\n// media features\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n\n  ...matchers\n}\n\n// media types\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n}\n\nconst all = { ...types, ...features }\n\n// add the type property\nmatchers.type = Object.keys(types)\n\nexport default {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n}\n"]},"metadata":{},"sourceType":"module"}