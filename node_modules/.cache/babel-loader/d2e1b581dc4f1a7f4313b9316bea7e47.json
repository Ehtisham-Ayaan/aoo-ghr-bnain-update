{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet Plan = require('./plan').Plan;\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PlanGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all() {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/plans`).then(this.createResponseHandler('plan', Plan)).then(response => {\n      if (!response.success) {\n        return response;\n      } // NEXT_MAJOR_VERSION all the other server sdks return the collection directly, rather\n      // than a response object. For now, add the plans and success properties to the collection\n      // for backwards compatibility. We can drop these at the next major version.\n\n\n      const collection = response.plans;\n      collection.success = response.success;\n      collection.plans = response.plans;\n      return collection;\n    });\n  }\n\n}\n\nmodule.exports = {\n  PlanGateway: wrapPrototype(PlanGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/plan_gateway.js"],"names":["Gateway","require","Plan","wrapPrototype","PlanGateway","constructor","gateway","config","all","http","get","baseMerchantPath","then","createResponseHandler","response","success","collection","plans","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,IAA7B;;AACA,IAAIC,aAAa,GAAGF,OAAO,CAAC,yBAAD,CAAP,CAAmCE,aAAvD;;AAEA,MAAMC,WAAN,SAA0BJ,OAA1B,CAAkC;AAChCK,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKF,OAAL,CAAaG,IAAb,CAAkBC,GAAlB,CAAuB,GAAE,KAAKH,MAAL,CAAYI,gBAAZ,EAA+B,QAAxD,EACJC,IADI,CACC,KAAKC,qBAAL,CAA2B,MAA3B,EAAmCX,IAAnC,CADD,EAEJU,IAFI,CAEEE,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,OAAd,EAAuB;AACrB,eAAOD,QAAP;AACD,OAHiB,CAKlB;AACA;AACA;;;AACA,YAAME,UAAU,GAAGF,QAAQ,CAACG,KAA5B;AAEAD,MAAAA,UAAU,CAACD,OAAX,GAAqBD,QAAQ,CAACC,OAA9B;AACAC,MAAAA,UAAU,CAACC,KAAX,GAAmBH,QAAQ,CAACG,KAA5B;AAEA,aAAOD,UAAP;AACD,KAhBI,CAAP;AAiBD;;AAzB+B;;AA4BlCE,MAAM,CAACC,OAAP,GAAiB;AAACf,EAAAA,WAAW,EAAED,aAAa,CAACC,WAAD;AAA3B,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Plan = require('./plan').Plan;\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PlanGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all() {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/plans`)\n      .then(this.createResponseHandler('plan', Plan))\n      .then((response) => {\n        if (!response.success) {\n          return response;\n        }\n\n        // NEXT_MAJOR_VERSION all the other server sdks return the collection directly, rather\n        // than a response object. For now, add the plans and success properties to the collection\n        // for backwards compatibility. We can drop these at the next major version.\n        const collection = response.plans;\n\n        collection.success = response.success;\n        collection.plans = response.plans;\n\n        return collection;\n      });\n  }\n}\n\nmodule.exports = {PlanGateway: wrapPrototype(PlanGateway)};\n"]},"metadata":{},"sourceType":"script"}