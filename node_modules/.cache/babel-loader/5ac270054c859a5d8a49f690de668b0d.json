{"ast":null,"code":"'use strict';\n\nlet DocumentUpload = require('./document_upload').DocumentUpload;\n\nlet Gateway = require('./gateway').Gateway;\n\nlet InvalidKeysError = require('./exceptions').InvalidKeysError;\n\nlet Readable = require('stream').Readable;\n\nlet Util = require('./util').Util;\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass DocumentUploadGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(options) {\n    if (!options.file || !(options.file instanceof Readable)) {\n      return Promise.reject(new InvalidKeysError('file must be a Readable stream'));\n    }\n\n    let params = {\n      file: {\n        path: options.file.path\n      },\n      kind: options.kind\n    };\n    let invalidKeysError = Util.verifyKeys(this._createSignature(), params);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    return this.gateway.http.postMultipart(`${this.config.baseMerchantPath()}/document_uploads`, {\n      'document_upload[kind]': params.kind\n    }, params.file).then(this.createResponseHandler('documentUpload', DocumentUpload));\n  }\n\n  _createSignature() {\n    return {\n      valid: ['kind', 'file[path]']\n    };\n  }\n\n}\n\nmodule.exports = {\n  DocumentUploadGateway: wrapPrototype(DocumentUploadGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/document_upload_gateway.js"],"names":["DocumentUpload","require","Gateway","InvalidKeysError","Readable","Util","wrapPrototype","DocumentUploadGateway","constructor","gateway","config","create","options","file","Promise","reject","params","path","kind","invalidKeysError","verifyKeys","_createSignature","http","postMultipart","baseMerchantPath","then","createResponseHandler","valid","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6BD,cAAlD;;AACA,IAAIE,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,OAAnC;;AACA,IAAIC,gBAAgB,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,gBAA/C;;AACA,IAAIC,QAAQ,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,QAAjC;;AACA,IAAIC,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,IAA7B;;AACA,IAAIC,aAAa,GAAGL,OAAO,CAAC,yBAAD,CAAP,CAAmCK,aAAvD;;AAEA,MAAMC,qBAAN,SAAoCL,OAApC,CAA4C;AAC1CM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACd,QAAI,CAACA,OAAO,CAACC,IAAT,IAAiB,EAAED,OAAO,CAACC,IAAR,YAAwBT,QAA1B,CAArB,EAA0D;AACxD,aAAOU,OAAO,CAACC,MAAR,CAAe,IAAIZ,gBAAJ,CAAqB,gCAArB,CAAf,CAAP;AACD;;AAED,QAAIa,MAAM,GAAG;AACXH,MAAAA,IAAI,EAAE;AACJI,QAAAA,IAAI,EAAEL,OAAO,CAACC,IAAR,CAAaI;AADf,OADK;AAIXC,MAAAA,IAAI,EAAEN,OAAO,CAACM;AAJH,KAAb;AAMA,QAAIC,gBAAgB,GAAGd,IAAI,CAACe,UAAL,CAAgB,KAAKC,gBAAL,EAAhB,EAAyCL,MAAzC,CAAvB;;AAEA,QAAIG,gBAAJ,EAAsB;AACpB,aAAOL,OAAO,CAACC,MAAR,CAAeI,gBAAf,CAAP;AACD;;AAED,WAAO,KAAKV,OAAL,CAAaa,IAAb,CAAkBC,aAAlB,CAAiC,GAAE,KAAKb,MAAL,CAAYc,gBAAZ,EAA+B,mBAAlE,EAAsF;AAC3F,+BAAyBR,MAAM,CAACE;AAD2D,KAAtF,EAEJF,MAAM,CAACH,IAFH,EAGJY,IAHI,CAGC,KAAKC,qBAAL,CAA2B,gBAA3B,EAA6C1B,cAA7C,CAHD,CAAP;AAID;;AAEDqB,EAAAA,gBAAgB,GAAG;AACjB,WAAO;AACLM,MAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,YAAT;AADF,KAAP;AAGD;;AAlCyC;;AAqC5CC,MAAM,CAACC,OAAP,GAAiB;AAACtB,EAAAA,qBAAqB,EAAED,aAAa,CAACC,qBAAD;AAArC,CAAjB","sourcesContent":["'use strict';\n\nlet DocumentUpload = require('./document_upload').DocumentUpload;\nlet Gateway = require('./gateway').Gateway;\nlet InvalidKeysError = require('./exceptions').InvalidKeysError;\nlet Readable = require('stream').Readable;\nlet Util = require('./util').Util;\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass DocumentUploadGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(options) {\n    if (!options.file || !(options.file instanceof Readable)) {\n      return Promise.reject(new InvalidKeysError('file must be a Readable stream'));\n    }\n\n    let params = {\n      file: {\n        path: options.file.path\n      },\n      kind: options.kind\n    };\n    let invalidKeysError = Util.verifyKeys(this._createSignature(), params);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    return this.gateway.http.postMultipart(`${this.config.baseMerchantPath()}/document_uploads`, {\n      'document_upload[kind]': params.kind\n    }, params.file)\n      .then(this.createResponseHandler('documentUpload', DocumentUpload));\n  }\n\n  _createSignature() {\n    return {\n      valid: ['kind', 'file[path]']\n    };\n  }\n}\n\nmodule.exports = {DocumentUploadGateway: wrapPrototype(DocumentUploadGateway)};\n"]},"metadata":{},"sourceType":"script"}