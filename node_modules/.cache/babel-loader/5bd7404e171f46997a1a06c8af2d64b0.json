{"ast":null,"code":"'use strict';\n\nconst {\n  Readable\n} = require('stream');\n\nclass SearchResponseStream extends Readable {\n  constructor(searchResponse) {\n    super({\n      objectMode: true\n    });\n    this.searchResponse = searchResponse;\n    this.currentItem = 0;\n    this.currentOffset = 0;\n    this.bufferedResults = [];\n  }\n\n  nextItem() {\n    if (this.searchResponse.fatalError != null) {\n      this.emit('error', this.searchResponse.fatalError);\n      this.push(null);\n      return;\n    } else if (this.bufferedResults.length > 0) {\n      this.pushBufferedResults();\n      return;\n    } else if (this.currentItem >= this.searchResponse.ids.length) {\n      this.push(null);\n      return;\n    }\n\n    let index = 0;\n    this.searchResponse.pagingFunction(this.searchResponse.ids.slice(this.currentOffset, this.currentOffset + this.searchResponse.pageSize), (err, item) => {\n      if (err != null) {\n        this.emit('error', err);\n      } else {\n        this.bufferedResults.push(item);\n      }\n\n      this.currentItem += 1;\n      index += 1;\n\n      if (index === this.searchResponse.pageSize || this.currentItem === this.searchResponse.ids.length) {\n        this.push(this.bufferedResults.shift());\n      }\n    });\n    this.currentOffset += this.searchResponse.pageSize;\n  }\n\n  pushBufferedResults() {\n    return (() => {\n      let result1 = [];\n\n      while (this.bufferedResults.length > 0) {\n        let item;\n        let result = this.push(this.bufferedResults.shift());\n\n        if (result === false) {\n          break;\n        }\n\n        result1.push(item);\n      }\n\n      return result1;\n    })();\n  }\n\n  ready() {\n    this.readyToStart = true;\n    return this.emit('ready');\n  }\n\n  _read() {\n    if (this.readyToStart != null) {\n      return this.nextItem();\n    }\n\n    return this.on('ready', () => {\n      return this.nextItem();\n    });\n  }\n\n}\n\nmodule.exports = {\n  SearchResponseStream\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/search_response_stream.js"],"names":["Readable","require","SearchResponseStream","constructor","searchResponse","objectMode","currentItem","currentOffset","bufferedResults","nextItem","fatalError","emit","push","length","pushBufferedResults","ids","index","pagingFunction","slice","pageSize","err","item","shift","result1","result","ready","readyToStart","_read","on","module","exports"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA;AAAD,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEA,MAAMC,oBAAN,SAAmCF,QAAnC,CAA4C;AAC1CG,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAC1B,UAAM;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAN;AAEA,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKE,WAAL,GAAmB,CAAnB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,KAAKL,cAAL,CAAoBM,UAApB,IAAkC,IAAtC,EAA4C;AAC1C,WAAKC,IAAL,CAAU,OAAV,EAAmB,KAAKP,cAAL,CAAoBM,UAAvC;AACA,WAAKE,IAAL,CAAU,IAAV;AAEA;AACD,KALD,MAKO,IAAI,KAAKJ,eAAL,CAAqBK,MAArB,GAA8B,CAAlC,EAAqC;AAC1C,WAAKC,mBAAL;AAEA;AACD,KAJM,MAIA,IAAI,KAAKR,WAAL,IAAoB,KAAKF,cAAL,CAAoBW,GAApB,CAAwBF,MAAhD,EAAwD;AAC7D,WAAKD,IAAL,CAAU,IAAV;AAEA;AACD;;AAED,QAAII,KAAK,GAAG,CAAZ;AAEA,SAAKZ,cAAL,CAAoBa,cAApB,CAAmC,KAAKb,cAAL,CAAoBW,GAApB,CAAwBG,KAAxB,CAA8B,KAAKX,aAAnC,EAAkD,KAAKA,aAAL,GAAqB,KAAKH,cAAL,CAAoBe,QAA3F,CAAnC,EAAyI,CAACC,GAAD,EAAMC,IAAN,KAAe;AACtJ,UAAID,GAAG,IAAI,IAAX,EAAiB;AACf,aAAKT,IAAL,CAAU,OAAV,EAAmBS,GAAnB;AACD,OAFD,MAEO;AACL,aAAKZ,eAAL,CAAqBI,IAArB,CAA0BS,IAA1B;AACD;;AAED,WAAKf,WAAL,IAAoB,CAApB;AACAU,MAAAA,KAAK,IAAI,CAAT;;AAEA,UAAIA,KAAK,KAAK,KAAKZ,cAAL,CAAoBe,QAA9B,IAA0C,KAAKb,WAAL,KAAqB,KAAKF,cAAL,CAAoBW,GAApB,CAAwBF,MAA3F,EAAmG;AACjG,aAAKD,IAAL,CAAU,KAAKJ,eAAL,CAAqBc,KAArB,EAAV;AACD;AACF,KAbD;AAeA,SAAKf,aAAL,IAAsB,KAAKH,cAAL,CAAoBe,QAA1C;AACD;;AAEDL,EAAAA,mBAAmB,GAAG;AACpB,WAAO,CAAC,MAAM;AACZ,UAAIS,OAAO,GAAG,EAAd;;AAEA,aAAO,KAAKf,eAAL,CAAqBK,MAArB,GAA8B,CAArC,EAAwC;AACtC,YAAIQ,IAAJ;AACA,YAAIG,MAAM,GAAG,KAAKZ,IAAL,CAAU,KAAKJ,eAAL,CAAqBc,KAArB,EAAV,CAAb;;AAEA,YAAIE,MAAM,KAAK,KAAf,EAAsB;AAAE;AAAQ;;AAChCD,QAAAA,OAAO,CAACX,IAAR,CAAaS,IAAb;AACD;;AAED,aAAOE,OAAP;AACD,KAZM,GAAP;AAaD;;AAEDE,EAAAA,KAAK,GAAG;AACN,SAAKC,YAAL,GAAoB,IAApB;AAEA,WAAO,KAAKf,IAAL,CAAU,OAAV,CAAP;AACD;;AAEDgB,EAAAA,KAAK,GAAG;AACN,QAAI,KAAKD,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,aAAO,KAAKjB,QAAL,EAAP;AACD;;AAED,WAAO,KAAKmB,EAAL,CAAQ,OAAR,EAAiB,MAAM;AAC5B,aAAO,KAAKnB,QAAL,EAAP;AACD,KAFM,CAAP;AAGD;;AA5EyC;;AA+E5CoB,MAAM,CAACC,OAAP,GAAiB;AAAC5B,EAAAA;AAAD,CAAjB","sourcesContent":["'use strict';\nconst {Readable} = require('stream');\n\nclass SearchResponseStream extends Readable {\n  constructor(searchResponse) {\n    super({objectMode: true});\n\n    this.searchResponse = searchResponse;\n    this.currentItem = 0;\n    this.currentOffset = 0;\n    this.bufferedResults = [];\n  }\n\n  nextItem() {\n    if (this.searchResponse.fatalError != null) {\n      this.emit('error', this.searchResponse.fatalError);\n      this.push(null);\n\n      return;\n    } else if (this.bufferedResults.length > 0) {\n      this.pushBufferedResults();\n\n      return;\n    } else if (this.currentItem >= this.searchResponse.ids.length) {\n      this.push(null);\n\n      return;\n    }\n\n    let index = 0;\n\n    this.searchResponse.pagingFunction(this.searchResponse.ids.slice(this.currentOffset, this.currentOffset + this.searchResponse.pageSize), (err, item) => {\n      if (err != null) {\n        this.emit('error', err);\n      } else {\n        this.bufferedResults.push(item);\n      }\n\n      this.currentItem += 1;\n      index += 1;\n\n      if (index === this.searchResponse.pageSize || this.currentItem === this.searchResponse.ids.length) {\n        this.push(this.bufferedResults.shift());\n      }\n    });\n\n    this.currentOffset += this.searchResponse.pageSize;\n  }\n\n  pushBufferedResults() {\n    return (() => {\n      let result1 = [];\n\n      while (this.bufferedResults.length > 0) {\n        let item;\n        let result = this.push(this.bufferedResults.shift());\n\n        if (result === false) { break; }\n        result1.push(item);\n      }\n\n      return result1;\n    })();\n  }\n\n  ready() {\n    this.readyToStart = true;\n\n    return this.emit('ready');\n  }\n\n  _read() {\n    if (this.readyToStart != null) {\n      return this.nextItem();\n    }\n\n    return this.on('ready', () => {\n      return this.nextItem();\n    });\n  }\n}\n\nmodule.exports = {SearchResponseStream};\n"]},"metadata":{},"sourceType":"script"}