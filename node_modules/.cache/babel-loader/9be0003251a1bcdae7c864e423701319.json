{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet UsBankAccountVerification = require('./us_bank_account_verification').UsBankAccountVerification;\n\nlet UsBankAccountVerificationSearch = require('./us_bank_account_verification_search').UsBankAccountVerificationSearch;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass UsBankAccountVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(usBankAccountVerificationId) {\n    if (usBankAccountVerificationId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}`).then(function (response) {\n      return new UsBankAccountVerification(response.usBankAccountVerification);\n    });\n  }\n\n  search(fn, callback) {\n    let search = new UsBankAccountVerificationSearch();\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  confirmMicroTransferAmounts(usBankAccountVerificationId, depositAmounts, callback) {\n    let params = {\n      usBankAccountVerification: {\n        depositAmounts: depositAmounts\n      }\n    };\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}/confirm_micro_transfer_amounts`, params, callback).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('usBankAccountVerification', UsBankAccountVerification);\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n      searchCriteria.ids = ids;\n      return this.gateway.http.post(`${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search`, {\n        search: searchCriteria\n      }, function (err, response) {\n        if (err) {\n          return callback(err, null);\n        } else if (Array.isArray(response.usBankAccountVerifications.usBankAccountVerification)) {\n          return response.usBankAccountVerifications.usBankAccountVerification.map(usBankAccountVerification => callback(null, new UsBankAccountVerification(usBankAccountVerification)));\n        }\n\n        return callback(null, new UsBankAccountVerification(response.usBankAccountVerifications.usBankAccountVerification));\n      });\n    };\n  }\n\n}\n\nmodule.exports = {\n  UsBankAccountVerificationGateway: wrapPrototype(UsBankAccountVerificationGateway, {\n    ignoreMethods: ['search']\n  })\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/us_bank_account_verification_gateway.js"],"names":["Gateway","require","UsBankAccountVerification","UsBankAccountVerificationSearch","exceptions","wrapPrototype","UsBankAccountVerificationGateway","constructor","gateway","config","find","usBankAccountVerificationId","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","usBankAccountVerification","search","fn","callback","createSearchResponse","pagingFunctionGenerator","confirmMicroTransferAmounts","depositAmounts","params","put","responseHandler","createResponseHandler","ids","searchCriteria","toHash","post","err","Array","isArray","usBankAccountVerifications","map","module","exports","ignoreMethods"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet UsBankAccountVerification = require('./us_bank_account_verification').UsBankAccountVerification;\nlet UsBankAccountVerificationSearch = require('./us_bank_account_verification_search').UsBankAccountVerificationSearch;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass UsBankAccountVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(usBankAccountVerificationId) {\n    if (usBankAccountVerificationId.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found')); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(\n      `${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}`\n    ).then(function (response) {\n      return new UsBankAccountVerification(response.usBankAccountVerification);\n    });\n  }\n\n  search(fn, callback) {\n    let search = new UsBankAccountVerificationSearch();\n\n    fn(search);\n\n    return this.createSearchResponse(\n      `${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search_ids`,\n      search,\n      this.pagingFunctionGenerator(search),\n      callback\n    );\n  }\n\n  confirmMicroTransferAmounts(usBankAccountVerificationId, depositAmounts, callback) {\n    let params = {\n      usBankAccountVerification: {\n        depositAmounts: depositAmounts\n      }\n    };\n\n    return this.gateway.http.put(\n      `${this.config.baseMerchantPath()}/us_bank_account_verifications/${usBankAccountVerificationId}/confirm_micro_transfer_amounts`,\n      params,\n      callback\n    ).then(this.responseHandler());\n  }\n\n  responseHandler() {\n    return this.createResponseHandler('usBankAccountVerification', UsBankAccountVerification);\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n\n      searchCriteria.ids = ids;\n\n      return this.gateway.http.post(\n        `${this.config.baseMerchantPath()}/us_bank_account_verifications/advanced_search`,\n        {search: searchCriteria},\n        function (err, response) {\n          if (err) {\n            return callback(err, null);\n          } else if (Array.isArray(response.usBankAccountVerifications.usBankAccountVerification)) {\n            return response.usBankAccountVerifications.usBankAccountVerification.map((usBankAccountVerification) =>\n              callback(null, new UsBankAccountVerification(usBankAccountVerification)));\n          }\n\n          return callback(null, new UsBankAccountVerification(response.usBankAccountVerifications.usBankAccountVerification));\n        });\n    };\n  }\n}\n\nmodule.exports = {UsBankAccountVerificationGateway: wrapPrototype(UsBankAccountVerificationGateway, {\n  ignoreMethods: ['search']\n})};\n"]},"metadata":{},"sourceType":"script"}