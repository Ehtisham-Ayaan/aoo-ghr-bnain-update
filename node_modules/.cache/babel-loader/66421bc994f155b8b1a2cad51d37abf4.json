{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet ErrorResponse = require('./error_response').ErrorResponse;\n\nlet Util = require('./util').Util;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nlet DEFAULT_VERSION = 2;\n\nclass ClientTokenGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(params) {\n    let err;\n    params = params || {};\n\n    if (!params.version) {\n      params.version = DEFAULT_VERSION;\n    }\n\n    err = Util.verifyKeys(this._generateSignature(), params);\n\n    if (!err) {\n      err = this.validateParams(params);\n    }\n\n    if (err) {\n      return Promise.reject(err);\n    }\n\n    params = {\n      client_token: params\n    }; // eslint-disable-line camelcase\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/client_token`, params).then(this.responseHandler());\n  }\n\n  validateParams(params) {\n    if (params.customerId || !params.options) {\n      return;\n    }\n\n    let options = ['makeDefault', 'verifyCard', 'failOnDuplicatePaymentMethod'];\n    let invalidOptions = options.filter(name => params.options[name]).map(name => name);\n\n    if (invalidOptions.length > 0) {\n      return exceptions.UnexpectedError(`A customer id is required for the following options: ${invalidOptions.join(', ')}`); // eslint-disable-line consistent-return, new-cap\n    }\n\n    return null; // eslint-disable-line consistent-return\n  }\n\n  responseHandler() {\n    let gateway = this.gateway;\n    return function (response) {\n      // eslint-disable-line consistent-return\n      if (response.clientToken) {\n        response.success = true;\n        response.clientToken = response.clientToken.value;\n        return response;\n      } else if (response.apiErrorResponse) {\n        return new ErrorResponse(response.apiErrorResponse, gateway);\n      }\n    };\n  }\n\n  _generateSignature() {\n    return {\n      valid: ['addressId', 'customerId', 'proxyMerchantId', 'merchantAccountId', 'version', 'options', 'options[makeDefault]', 'options[verifyCard]', 'options[failOnDuplicatePaymentMethod]']\n    };\n  }\n\n}\n\nmodule.exports = {\n  ClientTokenGateway: wrapPrototype(ClientTokenGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/client_token_gateway.js"],"names":["Gateway","require","ErrorResponse","Util","exceptions","wrapPrototype","DEFAULT_VERSION","ClientTokenGateway","constructor","gateway","config","generate","params","err","version","verifyKeys","_generateSignature","validateParams","Promise","reject","client_token","http","post","baseMerchantPath","then","responseHandler","customerId","options","invalidOptions","filter","name","map","length","UnexpectedError","join","response","clientToken","success","value","apiErrorResponse","valid","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet ErrorResponse = require('./error_response').ErrorResponse;\nlet Util = require('./util').Util;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nlet DEFAULT_VERSION = 2;\n\nclass ClientTokenGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(params) {\n    let err;\n\n    params = params || {};\n\n    if (!params.version) { params.version = DEFAULT_VERSION; }\n\n    err = Util.verifyKeys(this._generateSignature(), params);\n\n    if (!err) {\n      err = this.validateParams(params);\n    }\n\n    if (err) {\n      return Promise.reject(err);\n    }\n    params = {client_token: params}; // eslint-disable-line camelcase\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/client_token`, params).then(this.responseHandler());\n  }\n\n  validateParams(params) {\n    if (params.customerId || !params.options) { return; }\n\n    let options = ['makeDefault', 'verifyCard', 'failOnDuplicatePaymentMethod'];\n    let invalidOptions = options.filter((name) => params.options[name]).map((name) => name);\n\n    if (invalidOptions.length > 0) {\n      return exceptions.UnexpectedError(`A customer id is required for the following options: ${invalidOptions.join(', ')}`); // eslint-disable-line consistent-return, new-cap\n    }\n\n    return null; // eslint-disable-line consistent-return\n  }\n\n  responseHandler() {\n    let gateway = this.gateway;\n\n    return function (response) { // eslint-disable-line consistent-return\n      if (response.clientToken) {\n        response.success = true;\n        response.clientToken = response.clientToken.value;\n\n        return response;\n      } else if (response.apiErrorResponse) {\n        return new ErrorResponse(response.apiErrorResponse, gateway);\n      }\n    };\n  }\n\n  _generateSignature() {\n    return {\n      valid: [\n        'addressId', 'customerId', 'proxyMerchantId', 'merchantAccountId',\n        'version', 'options', 'options[makeDefault]', 'options[verifyCard]', 'options[failOnDuplicatePaymentMethod]'\n      ]\n    };\n  }\n}\n\nmodule.exports = {ClientTokenGateway: wrapPrototype(ClientTokenGateway)};\n"]},"metadata":{},"sourceType":"script"}