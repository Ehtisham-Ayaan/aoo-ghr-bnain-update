{"ast":null,"code":"import GenericServices from \"./GenericServices\";\nimport jwt_decode from \"jwt-decode\";\n\nclass userServices extends GenericServices {\n  constructor(...args) {\n    super(...args);\n\n    this.login = (email, password) => new Promise((resolve, reject) => {\n      this.post(\"users/login\", {\n        email,\n        password\n      }).then(token => {\n        localStorage.setItem(\"token\", token);\n        resolve(token);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n\n    this.register = (name, email, password) => new Promise((resolve, reject) => {\n      this.post(\"users/register\", {\n        name,\n        email,\n        password\n      }).then(res => {\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n\n    this.isLoggedin = localStorage.getItem(\"token\") ? true : false;\n\n    this.logout = () => {\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/\";\n    };\n\n    this.getLoggedinfo = () => {\n      try {\n        let jwt = localStorage.getItem(\"token\");\n        var decode = jwt_decode(jwt);\n        return decode;\n      } catch (error) {\n        console.log(\"error\");\n      }\n    };\n\n    this.isAdmin = () => {\n      if (this.isLoggedIn()) {\n        if (this.getLoggedinfo().role === \"admin\") return true;else return false;\n      } else return false;\n    };\n  }\n\n}\n\nlet UserServices = new userServices();\nexport default UserServices;","map":{"version":3,"sources":["/home/ehtisham/MyApp/myapp/client/src/services/UserServices.js"],"names":["GenericServices","jwt_decode","userServices","login","email","password","Promise","resolve","reject","post","then","token","localStorage","setItem","catch","err","register","name","res","isLoggedin","getItem","logout","removeItem","window","location","href","getLoggedinfo","jwt","decode","error","console","log","isAdmin","isLoggedIn","role","UserServices"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AACA,MAAMC,YAAN,SAA2BF,eAA3B,CAA2C;AAAA;AAAA;;AAAA,SACzCG,KADyC,GACjC,CAACC,KAAD,EAAQC,QAAR,KACN,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,WAAKC,IAAL,CAAU,aAAV,EAAyB;AAAEL,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAzB,EACGK,IADH,CACSC,KAAD,IAAW;AACfC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACAJ,QAAAA,OAAO,CAACI,KAAD,CAAP;AACD,OAJH,EAKGG,KALH,CAKUC,GAAD,IAAS;AACdP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACD,OAPH;AAQD,KATD,CAFuC;;AAAA,SAazCC,QAbyC,GAa9B,CAACC,IAAD,EAAOb,KAAP,EAAcC,QAAd,KACT,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,WAAKC,IAAL,CAAU,gBAAV,EAA4B;AAAEQ,QAAAA,IAAF;AAAQb,QAAAA,KAAR;AAAeC,QAAAA;AAAf,OAA5B,EACGK,IADH,CACSQ,GAAD,IAAS;AACbX,QAAAA,OAAO,CAACW,GAAD,CAAP;AACD,OAHH,EAIGJ,KAJH,CAIUC,GAAD,IAAS;AACdP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACD,OANH;AAOD,KARD,CAduC;;AAAA,SAwBzCI,UAxByC,GAwB5BP,YAAY,CAACQ,OAAb,CAAqB,OAArB,IAAgC,IAAhC,GAAuC,KAxBX;;AAAA,SA0BzCC,MA1ByC,GA0BhC,MAAM;AACbT,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACD,KA7BwC;;AAAA,SA+BzCC,aA/ByC,GA+BzB,MAAM;AACpB,UAAI;AACF,YAAIC,GAAG,GAAGf,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAV;AACA,YAAIQ,MAAM,GAAG3B,UAAU,CAAC0B,GAAD,CAAvB;AACA,eAAOC,MAAP;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KAvCwC;;AAAA,SAwCzCC,OAxCyC,GAwC/B,MAAM;AACd,UAAI,KAAKC,UAAL,EAAJ,EAAuB;AACrB,YAAI,KAAKP,aAAL,GAAqBQ,IAArB,KAA8B,OAAlC,EAA2C,OAAO,IAAP,CAA3C,KACK,OAAO,KAAP;AACN,OAHD,MAGO,OAAO,KAAP;AACR,KA7CwC;AAAA;;AAAA;;AAgD3C,IAAIC,YAAY,GAAG,IAAIjC,YAAJ,EAAnB;AACA,eAAeiC,YAAf","sourcesContent":["import GenericServices from \"./GenericServices\";\nimport jwt_decode from \"jwt-decode\";\nclass userServices extends GenericServices {\n  login = (email, password) =>\n    new Promise((resolve, reject) => {\n      this.post(\"users/login\", { email, password })\n        .then((token) => {\n          localStorage.setItem(\"token\", token);\n          resolve(token);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n  register = (name, email, password) =>\n    new Promise((resolve, reject) => {\n      this.post(\"users/register\", { name, email, password })\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n\n  isLoggedin = localStorage.getItem(\"token\") ? true : false;\n\n  logout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/\";\n  };\n\n  getLoggedinfo = () => {\n    try {\n      let jwt = localStorage.getItem(\"token\");\n      var decode = jwt_decode(jwt);\n      return decode;\n    } catch (error) {\n      console.log(\"error\");\n    }\n  };\n  isAdmin = () => {\n    if (this.isLoggedIn()) {\n      if (this.getLoggedinfo().role === \"admin\") return true;\n      else return false;\n    } else return false;\n  };\n}\n\nlet UserServices = new userServices();\nexport default UserServices;\n"]},"metadata":{},"sourceType":"module"}