{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\n\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass UsBankAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/us_bank_account/${token}`).then(function (response) {\n      return new UsBankAccount(response.usBankAccount);\n    });\n  }\n\n  sale(token, transactionRequest) {\n    transactionRequest.paymentMethodToken = token;\n\n    if (!transactionRequest.options) {\n      transactionRequest.options = {};\n    }\n\n    transactionRequest.options.submitForSettlement = true;\n    return new TransactionGateway(this.gateway).sale(transactionRequest);\n  }\n\n}\n\nmodule.exports = {\n  UsBankAccountGateway: wrapPrototype(UsBankAccountGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/us_bank_account_gateway.js"],"names":["Gateway","require","UsBankAccount","TransactionGateway","exceptions","wrapPrototype","UsBankAccountGateway","constructor","gateway","config","find","token","trim","Promise","reject","NotFoundError","http","get","baseMerchantPath","then","response","usBankAccount","sale","transactionRequest","paymentMethodToken","options","submitForSettlement","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,OAAnC;;AACA,IAAIE,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,aAAjD;;AACA,IAAIC,kBAAkB,GAAGF,OAAO,CAAC,uBAAD,CAAP,CAAiCE,kBAA1D;;AACA,IAAIC,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,yBAAD,CAAP,CAAmCI,aAAvD;;AAEA,MAAMC,oBAAN,SAAmCN,OAAnC,CAA2C;AACzCO,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B;AACD;;AAEDC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACV,QAAIA,KAAK,CAACC,IAAN,OAAiB,EAArB,EAAyB;AACvB,aAAOC,OAAO,CAACC,MAAR,CAAeV,UAAU,CAACW,aAAX,CAAyB,WAAzB,CAAf,EAAsD,IAAtD,CAAP,CADuB,CAC6C;AACrE;;AAED,WAAO,KAAKP,OAAL,CAAaQ,IAAb,CAAkBC,GAAlB,CAAuB,GAAE,KAAKR,MAAL,CAAYS,gBAAZ,EAA+B,oCAAmCP,KAAM,EAAjG,EAAoGQ,IAApG,CAAyG,UAAUC,QAAV,EAAoB;AAClI,aAAO,IAAIlB,aAAJ,CAAkBkB,QAAQ,CAACC,aAA3B,CAAP;AACD,KAFM,CAAP;AAGD;;AAEDC,EAAAA,IAAI,CAACX,KAAD,EAAQY,kBAAR,EAA4B;AAC9BA,IAAAA,kBAAkB,CAACC,kBAAnB,GAAwCb,KAAxC;;AACA,QAAI,CAACY,kBAAkB,CAACE,OAAxB,EAAiC;AAAEF,MAAAA,kBAAkB,CAACE,OAAnB,GAA6B,EAA7B;AAAkC;;AACrEF,IAAAA,kBAAkB,CAACE,OAAnB,CAA2BC,mBAA3B,GAAiD,IAAjD;AAEA,WAAO,IAAIvB,kBAAJ,CAAuB,KAAKK,OAA5B,EAAqCc,IAArC,CAA0CC,kBAA1C,CAAP;AACD;;AAvBwC;;AA0B3CI,MAAM,CAACC,OAAP,GAAiB;AAACtB,EAAAA,oBAAoB,EAAED,aAAa,CAACC,oBAAD;AAApC,CAAjB","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass UsBankAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/us_bank_account/${token}`).then(function (response) {\n      return new UsBankAccount(response.usBankAccount);\n    });\n  }\n\n  sale(token, transactionRequest) {\n    transactionRequest.paymentMethodToken = token;\n    if (!transactionRequest.options) { transactionRequest.options = {}; }\n    transactionRequest.options.submitForSettlement = true;\n\n    return new TransactionGateway(this.gateway).sale(transactionRequest);\n  }\n}\n\nmodule.exports = {UsBankAccountGateway: wrapPrototype(UsBankAccountGateway)};\n"]},"metadata":{},"sourceType":"script"}