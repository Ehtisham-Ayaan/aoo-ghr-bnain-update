{"ast":null,"code":"'use strict';\n\nlet Http = require('./http').Http;\n\nlet exceptions = require('./exceptions');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass GraphQL extends Http {\n  constructor(config) {\n    super(config);\n  }\n\n  checkGraphQLErrors(response) {\n    if (!('errors' in response) || !response.errors) {\n      return null;\n    }\n\n    for (let i = 0; i < response.errors.length; i++) {\n      let error = response.errors[i];\n      let message = error.message;\n\n      if (!error.extensions) {\n        return exceptions.UnexpectedError(`Unexpected HTTP response: ${message}`); // eslint-disable-line new-cap\n      }\n\n      switch (error.extensions.errorClass) {\n        case 'VALIDATION':\n          continue;\n\n        case 'AUTHENTICATION':\n          return exceptions.AuthenticationError('Authentication Error');\n        // eslint-disable-line new-cap\n\n        case 'AUTHORIZATION':\n          return exceptions.AuthorizationError('Authorization Error');\n        // eslint-disable-line new-cap\n\n        case 'NOT_FOUND':\n          return exceptions.NotFoundError('Not Found');\n        // eslint-disable-line new-cap\n\n        case 'UNSUPPORTED_CLIENT':\n          return exceptions.UpgradeRequired('Upgrade Required');\n        // eslint-disable-line new-cap\n\n        case 'RESOURCE_LIMIT':\n          return exceptions.TooManyRequestsError('Too Many Requests');\n        // eslint-disable-line new-cap\n\n        case 'INTERNAL':\n          return exceptions.ServerError('Server Error');\n        // eslint-disable-line new-cap\n\n        case 'SERVICE_AVAILABILITY':\n          return exceptions.ServiceUnavailableError('Service Unavailable');\n        // eslint-disable-line new-cap\n\n        default:\n          return exceptions.UnexpectedError(`Unexpected HTTP response: ${message}`);\n        // eslint-disable-line new-cap\n      }\n    }\n\n    return null;\n  }\n\n  headers() {\n    return {\n      Accept: 'application/json',\n      'Braintree-Version': this.config.graphQLApiVersion,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  request(definition, variables) {\n    let graphQLRequest = {\n      query: definition\n    };\n\n    if (variables) {\n      graphQLRequest.variables = variables;\n    }\n\n    return super.httpRequest('POST', this.config.baseGraphQLUrl(), graphQLRequest, null, this.config.environment.graphQLServer, this.config.environment.graphQLPort, this.headers()).then(response => {\n      const error = this.checkGraphQLErrors(response);\n\n      if (error) {\n        return Promise.reject(error);\n      }\n\n      return Promise.resolve(response);\n    });\n  }\n\n}\n\nmodule.exports = {\n  GraphQL: wrapPrototype(GraphQL)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/graphql.js"],"names":["Http","require","exceptions","wrapPrototype","GraphQL","constructor","config","checkGraphQLErrors","response","errors","i","length","error","message","extensions","UnexpectedError","errorClass","AuthenticationError","AuthorizationError","NotFoundError","UpgradeRequired","TooManyRequestsError","ServerError","ServiceUnavailableError","headers","Accept","graphQLApiVersion","request","definition","variables","graphQLRequest","query","httpRequest","baseGraphQLUrl","environment","graphQLServer","graphQLPort","then","Promise","reject","resolve","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Http = require('./http').Http;\nlet exceptions = require('./exceptions');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass GraphQL extends Http {\n  constructor(config) {\n    super(config);\n  }\n\n  checkGraphQLErrors(response) {\n    if (!('errors' in response) || !response.errors) {\n      return null;\n    }\n\n    for (let i = 0; i < response.errors.length; i++) {\n      let error = response.errors[i];\n      let message = error.message;\n\n      if (!error.extensions) {\n        return exceptions.UnexpectedError(`Unexpected HTTP response: ${message}`); // eslint-disable-line new-cap\n      }\n\n      switch (error.extensions.errorClass) {\n        case 'VALIDATION': continue;\n        case 'AUTHENTICATION': return exceptions.AuthenticationError('Authentication Error'); // eslint-disable-line new-cap\n        case 'AUTHORIZATION': return exceptions.AuthorizationError('Authorization Error'); // eslint-disable-line new-cap\n        case 'NOT_FOUND': return exceptions.NotFoundError('Not Found'); // eslint-disable-line new-cap\n        case 'UNSUPPORTED_CLIENT': return exceptions.UpgradeRequired('Upgrade Required'); // eslint-disable-line new-cap\n        case 'RESOURCE_LIMIT': return exceptions.TooManyRequestsError('Too Many Requests'); // eslint-disable-line new-cap\n        case 'INTERNAL': return exceptions.ServerError('Server Error'); // eslint-disable-line new-cap\n        case 'SERVICE_AVAILABILITY': return exceptions.ServiceUnavailableError('Service Unavailable'); // eslint-disable-line new-cap\n        default: return exceptions.UnexpectedError(`Unexpected HTTP response: ${message}`); // eslint-disable-line new-cap\n      }\n    }\n\n    return null;\n  }\n\n  headers() {\n    return {\n      Accept: 'application/json',\n      'Braintree-Version': this.config.graphQLApiVersion,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  request(definition, variables) {\n    let graphQLRequest = {query: definition};\n\n    if (variables) {\n      graphQLRequest.variables = variables;\n    }\n\n    return super.httpRequest(\n      'POST',\n      this.config.baseGraphQLUrl(),\n      graphQLRequest,\n      null,\n      this.config.environment.graphQLServer,\n      this.config.environment.graphQLPort,\n      this.headers()\n    ).then(response => {\n      const error = this.checkGraphQLErrors(response);\n\n      if (error) {\n        return Promise.reject(error);\n      }\n\n      return Promise.resolve(response);\n    });\n  }\n}\n\nmodule.exports = {GraphQL: wrapPrototype(GraphQL)};\n"]},"metadata":{},"sourceType":"script"}