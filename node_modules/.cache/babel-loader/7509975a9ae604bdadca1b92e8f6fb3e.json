{"ast":null,"code":"'use strict';\n\nlet CredentialsParser = require('./credentials_parser').CredentialsParser;\n\nclass Config {\n  constructor(rawConfig) {\n    this.timeout = 60000;\n    this.apiVersion = '6';\n    this.graphQLApiVersion = '2018-09-10';\n    let parser = new CredentialsParser();\n\n    if (rawConfig.clientId || rawConfig.clientSecret) {\n      parser.parseClientCredentials(rawConfig.clientId, rawConfig.clientSecret);\n      this.clientId = parser.clientId;\n      this.clientSecret = parser.clientSecret;\n      this.environment = parser.environment;\n    } else if (rawConfig.accessToken) {\n      parser.parseAccessToken(rawConfig.accessToken);\n\n      if (rawConfig.environment && parser.environment !== rawConfig.environment) {\n        throw new Error('AccessToken environment does not match environment passed in config');\n      }\n\n      this.accessToken = parser.accessToken;\n      this.environment = parser.environment;\n      this.merchantId = parser.merchantId;\n    } else {\n      this.publicKey = rawConfig.publicKey;\n      this.privateKey = rawConfig.privateKey;\n      this.merchantId = rawConfig.merchantId || rawConfig.partnerId;\n      this.environment = rawConfig.environment;\n\n      if (!this.publicKey) {\n        throw new Error('Missing publicKey');\n      }\n\n      if (!this.privateKey) {\n        throw new Error('Missing privateKey');\n      }\n\n      if (!this.merchantId) {\n        throw new Error('Missing merchantId');\n      }\n\n      if (!this.environment) {\n        throw new Error('Missing environment');\n      }\n    }\n  }\n\n  baseMerchantPath() {\n    return `/merchants/${this.merchantId}`;\n  }\n\n  baseUrl() {\n    return this.environment.baseUrl();\n  }\n\n  baseMerchantUrl() {\n    return this.baseUrl() + this.baseMerchantPath();\n  }\n\n  baseGraphQLUrl() {\n    return this.environment.baseGraphQLUrl();\n  }\n\n}\n\nmodule.exports = {\n  Config: Config\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/config.js"],"names":["CredentialsParser","require","Config","constructor","rawConfig","timeout","apiVersion","graphQLApiVersion","parser","clientId","clientSecret","parseClientCredentials","environment","accessToken","parseAccessToken","Error","merchantId","publicKey","privateKey","partnerId","baseMerchantPath","baseUrl","baseMerchantUrl","baseGraphQLUrl","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCD,iBAAxD;;AAEA,MAAME,MAAN,CAAa;AACXC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,UAAL,GAAkB,GAAlB;AACA,SAAKC,iBAAL,GAAyB,YAAzB;AACA,QAAIC,MAAM,GAAG,IAAIR,iBAAJ,EAAb;;AAEA,QAAII,SAAS,CAACK,QAAV,IAAsBL,SAAS,CAACM,YAApC,EAAkD;AAChDF,MAAAA,MAAM,CAACG,sBAAP,CAA8BP,SAAS,CAACK,QAAxC,EAAkDL,SAAS,CAACM,YAA5D;AACA,WAAKD,QAAL,GAAgBD,MAAM,CAACC,QAAvB;AACA,WAAKC,YAAL,GAAoBF,MAAM,CAACE,YAA3B;AACA,WAAKE,WAAL,GAAmBJ,MAAM,CAACI,WAA1B;AACD,KALD,MAKO,IAAIR,SAAS,CAACS,WAAd,EAA2B;AAChCL,MAAAA,MAAM,CAACM,gBAAP,CAAwBV,SAAS,CAACS,WAAlC;;AACA,UAAIT,SAAS,CAACQ,WAAV,IAAyBJ,MAAM,CAACI,WAAP,KAAuBR,SAAS,CAACQ,WAA9D,EAA2E;AACzE,cAAM,IAAIG,KAAJ,CAAU,qEAAV,CAAN;AACD;;AACD,WAAKF,WAAL,GAAmBL,MAAM,CAACK,WAA1B;AACA,WAAKD,WAAL,GAAmBJ,MAAM,CAACI,WAA1B;AACA,WAAKI,UAAL,GAAkBR,MAAM,CAACQ,UAAzB;AACD,KARM,MAQA;AACL,WAAKC,SAAL,GAAiBb,SAAS,CAACa,SAA3B;AACA,WAAKC,UAAL,GAAkBd,SAAS,CAACc,UAA5B;AACA,WAAKF,UAAL,GAAkBZ,SAAS,CAACY,UAAV,IAAwBZ,SAAS,CAACe,SAApD;AACA,WAAKP,WAAL,GAAmBR,SAAS,CAACQ,WAA7B;;AACA,UAAI,CAAC,KAAKK,SAAV,EAAqB;AAAE,cAAM,IAAIF,KAAJ,CAAU,mBAAV,CAAN;AAAuC;;AAC9D,UAAI,CAAC,KAAKG,UAAV,EAAsB;AAAE,cAAM,IAAIH,KAAJ,CAAU,oBAAV,CAAN;AAAwC;;AAChE,UAAI,CAAC,KAAKC,UAAV,EAAsB;AAAE,cAAM,IAAID,KAAJ,CAAU,oBAAV,CAAN;AAAwC;;AAChE,UAAI,CAAC,KAAKH,WAAV,EAAuB;AAAE,cAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AAAyC;AACnE;AACF;;AAEDK,EAAAA,gBAAgB,GAAG;AAAE,WAAQ,cAAa,KAAKJ,UAAW,EAArC;AAAyC;;AAE9DK,EAAAA,OAAO,GAAG;AAAE,WAAO,KAAKT,WAAL,CAAiBS,OAAjB,EAAP;AAAoC;;AAEhDC,EAAAA,eAAe,GAAG;AAAE,WAAO,KAAKD,OAAL,KAAiB,KAAKD,gBAAL,EAAxB;AAAkD;;AAEtEG,EAAAA,cAAc,GAAG;AAAE,WAAO,KAAKX,WAAL,CAAiBW,cAAjB,EAAP;AAA2C;;AAtCnD;;AAyCbC,MAAM,CAACC,OAAP,GAAiB;AAACvB,EAAAA,MAAM,EAAEA;AAAT,CAAjB","sourcesContent":["'use strict';\n\nlet CredentialsParser = require('./credentials_parser').CredentialsParser;\n\nclass Config {\n  constructor(rawConfig) {\n    this.timeout = 60000;\n    this.apiVersion = '6';\n    this.graphQLApiVersion = '2018-09-10';\n    let parser = new CredentialsParser();\n\n    if (rawConfig.clientId || rawConfig.clientSecret) {\n      parser.parseClientCredentials(rawConfig.clientId, rawConfig.clientSecret);\n      this.clientId = parser.clientId;\n      this.clientSecret = parser.clientSecret;\n      this.environment = parser.environment;\n    } else if (rawConfig.accessToken) {\n      parser.parseAccessToken(rawConfig.accessToken);\n      if (rawConfig.environment && parser.environment !== rawConfig.environment) {\n        throw new Error('AccessToken environment does not match environment passed in config');\n      }\n      this.accessToken = parser.accessToken;\n      this.environment = parser.environment;\n      this.merchantId = parser.merchantId;\n    } else {\n      this.publicKey = rawConfig.publicKey;\n      this.privateKey = rawConfig.privateKey;\n      this.merchantId = rawConfig.merchantId || rawConfig.partnerId;\n      this.environment = rawConfig.environment;\n      if (!this.publicKey) { throw new Error('Missing publicKey'); }\n      if (!this.privateKey) { throw new Error('Missing privateKey'); }\n      if (!this.merchantId) { throw new Error('Missing merchantId'); }\n      if (!this.environment) { throw new Error('Missing environment'); }\n    }\n  }\n\n  baseMerchantPath() { return `/merchants/${this.merchantId}`; }\n\n  baseUrl() { return this.environment.baseUrl(); }\n\n  baseMerchantUrl() { return this.baseUrl() + this.baseMerchantPath(); }\n\n  baseGraphQLUrl() { return this.environment.baseGraphQLUrl(); }\n}\n\nmodule.exports = {Config: Config};\n"]},"metadata":{},"sourceType":"script"}