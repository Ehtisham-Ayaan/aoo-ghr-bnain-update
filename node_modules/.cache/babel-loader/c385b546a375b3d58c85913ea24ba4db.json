{"ast":null,"code":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\n\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\n\nlet CreditCard = require('./credit_card').CreditCard;\n\nlet PaymentMethodParser = require('./payment_method_parser').PaymentMethodParser;\n\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\n\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\n\nlet Util = require('./util').Util;\n\nlet exceptions = require('./exceptions');\n\nlet querystring = require('../../vendor/querystring.node.js.511d6a2/querystring');\n\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PaymentMethodGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler() {\n    let responseMapping = {\n      paypalAccount: PayPalAccount,\n      creditCard: CreditCard,\n      applePayCard: ApplePayCard,\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      androidPayCard: AndroidPayCard,\n      paymentMethodNonce: PaymentMethodNonce\n    };\n    let handler = this.createResponseHandler(responseMapping, null);\n    return function (payload) {\n      return handler(payload).then(function (response) {\n        let parsedResponse = PaymentMethodParser.parsePaymentMethod(response);\n\n        if (parsedResponse instanceof PaymentMethodNonce) {\n          response.paymentMethodNonce = parsedResponse;\n        } else {\n          response.paymentMethod = parsedResponse;\n        }\n\n        return response;\n      });\n    };\n  }\n\n  create(attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {\n      paymentMethod: attributes\n    }).then(this.responseHandler());\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`).then(response => {\n      return PaymentMethodParser.parsePaymentMethod(response);\n    });\n  }\n\n  update(token, attributes) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`, {\n      paymentMethod: attributes\n    }).then(this.responseHandler());\n  }\n\n  grant(token, attributes) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    let grantOptions = {\n      sharedPaymentMethodToken: token\n    };\n\n    if (typeof attributes === 'boolean') {\n      attributes = {\n        allow_vaulting: attributes\n      }; // eslint-disable-line camelcase\n    }\n\n    grantOptions = Util.merge(grantOptions, attributes);\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/grant`, {\n      payment_method: grantOptions // eslint-disable-line camelcase\n\n    }).then(this.responseHandler());\n  }\n\n  revoke(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/revoke`, {\n      payment_method: {\n        // eslint-disable-line camelcase\n        sharedPaymentMethodToken: token\n      }\n    }).then(this.responseHandler());\n  }\n\n  delete(token, options) {\n    let queryParam, invalidKeysError;\n\n    if (typeof options === 'function') {\n      options = null;\n    }\n\n    invalidKeysError = Util.verifyKeys(this._deleteSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n\n    queryParam = options != null ? '?' + querystring.stringify(Util.convertObjectKeysToUnderscores(options)) : '';\n    return this.gateway.http.delete(this.config.baseMerchantPath() + '/payment_methods/any/' + token + queryParam);\n  }\n\n  _deleteSignature() {\n    return {\n      valid: ['revokeAllGrants']\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n\n}\n\nmodule.exports = {\n  PaymentMethodGateway: wrapPrototype(PaymentMethodGateway)\n};","map":{"version":3,"sources":["C:/Users/alpha/OneDrive/myapp/client/node_modules/braintree/lib/braintree/payment_method_gateway.js"],"names":["Gateway","require","ApplePayCard","AndroidPayCard","CreditCard","PaymentMethodParser","PayPalAccount","PaymentMethodNonce","Util","exceptions","querystring","wrapPrototype","PaymentMethodGateway","constructor","gateway","config","responseHandler","responseMapping","paypalAccount","creditCard","applePayCard","androidPayCard","paymentMethodNonce","handler","createResponseHandler","payload","then","response","parsedResponse","parsePaymentMethod","paymentMethod","create","attributes","_checkForDeprecatedAttributes","http","post","baseMerchantPath","find","token","trim","Promise","reject","NotFoundError","get","update","put","grant","grantOptions","sharedPaymentMethodToken","allow_vaulting","merge","payment_method","revoke","delete","options","queryParam","invalidKeysError","verifyKeys","_deleteSignature","stringify","convertObjectKeysToUnderscores","valid","deviceSessionId","console","warn","fraudMerchantId","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\nlet CreditCard = require('./credit_card').CreditCard;\nlet PaymentMethodParser = require('./payment_method_parser').PaymentMethodParser;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\nlet Util = require('./util').Util;\nlet exceptions = require('./exceptions');\nlet querystring = require('../../vendor/querystring.node.js.511d6a2/querystring');\nlet wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nclass PaymentMethodGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler() {\n    let responseMapping = {\n      paypalAccount: PayPalAccount,\n      creditCard: CreditCard,\n      applePayCard: ApplePayCard,\n      // NEXT_MAJOR_VERSION rename Android Pay to Google Pay\n      androidPayCard: AndroidPayCard,\n      paymentMethodNonce: PaymentMethodNonce\n    };\n    let handler = this.createResponseHandler(responseMapping, null);\n\n    return function (payload) {\n      return handler(payload).then(function (response) {\n        let parsedResponse = PaymentMethodParser.parsePaymentMethod(response);\n\n        if (parsedResponse instanceof PaymentMethodNonce) {\n          response.paymentMethodNonce = parsedResponse;\n        } else {\n          response.paymentMethod = parsedResponse;\n        }\n\n        return response;\n      });\n    };\n  }\n\n  create(attributes) {\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {paymentMethod: attributes}).then(this.responseHandler());\n  }\n\n  find(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`).then((response) => {\n      return PaymentMethodParser.parsePaymentMethod(response);\n    });\n  }\n\n  update(token, attributes) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    this._checkForDeprecatedAttributes(attributes);\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`, {paymentMethod: attributes}).then(this.responseHandler());\n  }\n\n  grant(token, attributes) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    let grantOptions = {\n      sharedPaymentMethodToken: token\n    };\n\n    if (typeof attributes === 'boolean') {\n      attributes = {allow_vaulting: attributes}; // eslint-disable-line camelcase\n    }\n\n    grantOptions = Util.merge(grantOptions, attributes);\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/grant`, {\n      payment_method: grantOptions // eslint-disable-line camelcase\n    }).then(this.responseHandler());\n  }\n\n  revoke(token) {\n    if (token.trim() === '') {\n      return Promise.reject(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/revoke`, {\n      payment_method: { // eslint-disable-line camelcase\n        sharedPaymentMethodToken: token\n      }\n    }).then(this.responseHandler());\n  }\n\n  delete(token, options) {\n    let queryParam, invalidKeysError;\n\n    if (typeof options === 'function') {\n      options = null;\n    }\n    invalidKeysError = Util.verifyKeys(this._deleteSignature(), options);\n\n    if (invalidKeysError) {\n      return Promise.reject(invalidKeysError);\n    }\n    queryParam = options != null ? '?' + querystring.stringify(Util.convertObjectKeysToUnderscores(options)) : '';\n\n    return this.gateway.http.delete(this.config.baseMerchantPath() + '/payment_methods/any/' + token + queryParam);\n  }\n\n  _deleteSignature() {\n    return {\n      valid: ['revokeAllGrants']\n    };\n  }\n\n  _checkForDeprecatedAttributes(attributes) {\n    if (attributes.deviceSessionId != null) {\n      console.warn('[DEPRECATED] `deviceSessionId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n\n    if (attributes.fraudMerchantId != null) {\n      console.warn('[DEPRECATED] `fraudMerchantId` is a deprecated param for PaymentMethod objects. Use `deviceData` instead'); // eslint-disable-line no-console\n    }\n  }\n}\n\nmodule.exports = {PaymentMethodGateway: wrapPrototype(PaymentMethodGateway)};\n"]},"metadata":{},"sourceType":"script"}